/*

	[San Jose Roleplay]

	Coded by - Chrillzen
	Credits:
		- MadeMan for the Vehicle System
		- Hreesang for the optimization
	
*/

#include <a_samp>

//=========================PREDEFINITIONS===================

#undef MAX_PLAYERS
#undef MAX_PLAYER_NAME

#define MAX_PLAYERS						32
#define MAX_PLAYER_NAME					24


// YSI
#define YSI_YES_HEAP_MALLOC

//=========================INCLUDES=========================

#include <izcmd>
#include <YSI_Storage\y_ini>
#include <YSI_Data\y_iterate>
#include <sscanf2>
#include <streamer>
#include <fader>
#include <mSelection>
#include <ELC_AC_BASE>

//=========================DIALOGS=========================

#define DIALOG_REGISTER 666
#define DIALOG_LOGIN 667
#define DIALOG_SUCCESS_1 668
#define DIALOG_SUCCESS_2 669
#define DIALOG_DRUGSNGUNS 670
#define DIALOG_LOCKER 671
#define DIALOG_USE 672
#define DIALOG_STATS 673
#define DIALOG_COMMANDS 674
#define DIALOG_ANIMS 10
#define DIALOG_DRUGS 12
#define DIALOG_BUY 13
#define DIALOG_TRAIN 14
#define DIALOG_AGE 2009
#define DIALOG_RACE 2010
#define DIALOG_GENDER 2011
#define DIALOG_UNIFORM 2012
#define DIALOG_BUYGUN 2013
#define DIALOG_FISH_BUY 2014
#define DIALOG_ELECTRONICS_BUY 2015
#define DIALOG_BUYCAR 2016
#define DIALOG_MECHANIC_BUY 2017
#define DIALOG_COLOR1 2018
#define DIALOG_COLOR2 2019
#define DIALOG_RIMS 2020
#define DIALOG_BUYDRINK 2021
#define DIALOG_FORUMNAME 2022
#define DIALOG_MAP 2023

#define MAX_WINDOWS 4

#define DIALOG_BOOMBOX  800
#define DIALOG_BOOMBOX1 801
#define DIALOG_BOOMBOX2 802
#define DIALOG_BOOMBOX3 803
#define DIALOG_BOOMBOX4 804
#define DIALOG_BOOMBOX5 805
#define DIALOG_BOOMBOX6 806
#define DIALOG_BOOMBOX7 807

//=========================COLOURS=========================

#define COLOR_GRAD6 0xF0F0F0FF
#define COLOR_BROWN 0x993300AA
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_GREEN 0x33AA33AA
#define COLOR_WHITE 0xFFFFFFFF
#define COL_WHITE 		"{FFFFFF}"
#define COL_RED 		"{B33C3C}"
#define COL_LIGHTRED    "{F041F0}"
#define COL_GREEN 		"{165316}"
#define COL_LIGHTBLUE 	"{00CED1}"
#define COLORYELLOW 	"{9DBD1E}"
#define COLORORANGE 	"{E68C0E}"
#define COLORBLUE   	"{39AACC}"
#define COLORGREEN 		"{6FA828}"
#define COLORWHITE  	"{FFFFFF}"
#define COLORRED    	"{FF0000}"
#define COLORGREY   	"{7D8584}"
#define COL_BROWN       "{6B3F34}"
#define COL_PROPERTIES  "{4364FF}"
#define COL_HOUSES      "{6200FF}"
#define COL_SILVER      "{C0C0C0}"
#define COL_BRONZE      "{CD7F32}"
#define COL_GOLD        "{D4A017}"
#define COL_ADMIN       "{027807}"
#define COLOR_FACTIONCHAT 0x01FCFFC8
#define COLOR_GROVE 0x51A505FF
#define COLOR_SEVILLE 0xBCFB84FF
#define COLOR_AZTECAS 0x00BBBBFF
#define COLOR_VAGOS 0xFFFF24FF
#define COLOR_BALLAS 0xB000B0FF
#define COLOR_SJPD 0x5846FFFF
#define COLOR_ADMIN 0xFD7E00FF
#define COLOR_DARKRED 0xCD000000
#define COLOR_LIGHTBLUE 0x33CCFFAA
#define COLOR_LIGHTGREEN 0x9ACD32AA
#define COLOR_LIGHTRED 0xFF6347AA // 0xB33C3CAA
#define COLOR_LIGHTBLUE 0x33CCFFAA
#define COLOR_LIGHTBLUE2 0x0080FFAA
#define COLOR_LIGHTGREEN 0x9ACD32AA
#define COLOR_LIGHTORANGE 0xFF8000FF
#define COLOR_DARKBROWN 0xB36C42FF
#define COLOR_MEDIUMBLUE 0x1ED5C7FF
#define COLOR_LIGHTYELLOW 0xE0E377AA
#define COLOR_LIGHTYELLOW2 0xE0EA64AA
#define COLOR_LIGHTYELLOW3 0xFF6347AA
#define COLOR_DARKPURPLE 0x5F56F8AA
#define COLOR_YELLOW 0xFFFF00AA
#define COLOR_YELLOW2 0xF5DEB3AA
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_PURPLE 0xC2A2DAAA
#define COLOR_OOC 0xE0FFFFAA
#define COLOR_LOCALMSG 0xEC5413AA

//=========================CONTROL PANEL=========================

#define txtcost 1

#define MAX_ROADBLOCKS 50
#define MAX_SPIKESTRIPS 50

#define TAZE_WEAPON 23
#define TAZE_TIMER 10000
#define TAZE_SPARK 18717
#define TAZE_DESTROY 1250
#define TAZE_LOSEHP 0

#define MAX_PLANTS 100
#define MAX_DROP_ITEMS 200
#define MAX_BUSINESSES 500
#define MAX_HOUSES 500
#define MAX_FACTIONS 5
#define MAX_OBJ 50

#define MAX_DVEHICLES 500
#define MAX_DEALERSHIPS 10
#define MAX_FUEL_STATIONS 10

#define MAX_PIZZABOYS 8
#define MAX_DMVCARS 4
#define MAX_JUNKCARS 5
#define MAX_COPCARS 9
#define MAX_LUMBERCARS 5
#define MAX_GOVCARS 5

#define BODY_CHEST 1337
#define BODY_CROTCH 1338
#define BODY_LEFT_ARM 1339
#define BODY_RIGHT_ARM 1340
#define BODY_LEFT_LEG 1341
#define BODY_RIGHT_LEG 1342
#define BODY_HEAD 1343

#define WEAPON_BODY_PART_CHEST 3
#define WEAPON_BODY_PART_CROTCH 4
#define WEAPON_BODY_PART_LEFT_ARM 5
#define WEAPON_BODY_PART_RIGHT_ARM 6
#define WEAPON_BODY_PART_LEFT_LEG 7
#define WEAPON_BODY_PART_RIGHT_LEG 8
#define WEAPON_BODY_PART_HEAD 9

#define VEHICLE_FILE_PATH "avs/vehicles/"
#define DEALERSHIP_FILE_PATH "avs/dealerships/"
#define FUEL_STATION_FILE_PATH "avs/fuelstations/"

#define MAX_PLAYER_VEHICLES 3
#define FUEL_PRICE 2
#define GAS_CAN_PRICE 50
#define ALARM_TIME 10000  // alarm duration in milliseconds (1 second = 1000 milliseconds)
#define DEFAULT_NUMBER_PLATE "un-registered"

#define L_MAX_COUNT 105

#define VEHICLE_DEALERSHIP 1
#define VEHICLE_PLAYER 2
#define ShowErrorDialog(%1,%2) ShowPlayerDialog(%1, COLOR_LIGHTRED, DIALOG_STYLE_MSGBOX, "ERROR",%2, "OK", "")
#define COLOR_ADVERTISEMENT 0xFF2BD500

#define SCM SendClientMessage

#define SECONDS 10
#define TAZE_MS 400
#define IsNotCop(%0) ((GetPlayerSkin(%0) < 280 && GetPlayerSkin(%0) > 288))

#define PATH "/users/%s.ini"
#define BPATH "/business/%i.ini"
#define HPATH "/houses/%i.ini"
#define FPATH "/factions/%i.ini"

#if !defined MAX_JOIN_LOGS
    #define MAX_JOIN_LOGS (50)
#endif

#if !defined MAX_THRESHOLD
    #define MAX_THRESHOLD (8000) // The amount of time in which all joins are valid and counted
#endif

//==========================================================

////Spikes////
enum spInfo
{
	sCreated, 
    Float:sX, 
    Float:sY, 
    Float:sZ, 
    sObject, 
};
new SpikeInfo[MAX_SPIKESTRIPS][spInfo];

////Roadblocks////
enum rInfo
{
    sCreated, 
    Float:sX, 
    Float:sY, 
    Float:sZ, 
    sObject, 
};
new Roadblocks[MAX_ROADBLOCKS][rInfo];

enum roInfo
{
        pRoadblock, 
};

enum pInfo
{
    pPass, 
    pCash, 
    pAdmin, 
    pKills, 
    pDeaths, 
    dLSD, 
    dCocaine, 
    dMarijuana, 
    dMeth, 
    dEcstasy, 
    pRespect, 
    pCigarettes, 
    pBankAccount, 
    pAccountdata, 
    pBeer, 
    Float:pHealth, 
    pNumber, 
    pSkin, 
    pWeapon1, 
    pAmmo1, 
    pWeapon2, 
    pAmmo2, 
    pWeapon3, 
	pAmmo3, 
	pWeapon4, 
	pAmmo4, 
	pWeapon5, 
	pAmmo5, 
	pWeapon6, 
	pAmmo6, 
	pWeapon7, 
	pAmmo7, 
	pWeapon8, 
	pAmmo8, 
	pWeapon9, 
	pAmmo9, 
	pWeapon10, 
	pAmmo10, 
	pWeapon11, 
	pAmmo11, 
	pWeapon12, 
	pAmmo12, 
	pWeapon13, 
	pAmmo13, 
	pWeapon14, 
	pAmmo14, 
	BizID, 
	HouseID, 
	pLevel, 
	BusinessMoney, 
	pDriverLicense, 
	pAge, 
	pGender, 
	pInJail, 
	pInJailTime, 
	pMask, 
	pFightingStyle, 
	pBoombox, 
	Float:pXPos, 
	Float:pYPos, 
	Float:pZPos, 
	pInterior, 
	pVirtualWorld, 
 	pBanned, 
    BannedIP[22], 
    pExperience, 
	dSeeds, 
	dWater, 
	pCrashed, 
	Float:pCrashX, 
	Float:pCrashY, 
	Float:pCrashZ, 
	pCrashInt, 
	pCrashWorld, 
	pPlayerOwnsHouse, 
	fRank, 
	pWepLicense, 
	pPhone, 
	pFaction, 
	pFishingRod, 
	pWorms, 
	pFishes, 
	pPlayingHours, 
	pJob, 
	pTutorialDone, 
	pNote1[128], 
	pNote2[128], 
	pNote3[128], 
	pNote4[128], 
	pGunRights, 
	pSeeds, 
	pCaller, 
	pYear, 
	pMonth, 
	pDay, 
	pDonator, 
	pBlockPM, 
	pForumName[64], 
	pFname, 
	pJailed, 
	pVehicleKey, 
	dHeroin, 
	dCrack, 
	pActiveOffenses, 
	pActiveOffense[128], 
	pUnActiveOffenses, 
	pPlate1, 
	pPlate2, 
	pPlate3, 
	pName[24], 
	pTicketReason1[128], 
	pTicketReason2[128], 
	pTicket1, 
	pTicket2, 
	pTicketPrice1, 
	pTicketPrice2, 
	pWelfare, 
	pWalkStyle
}

enum wInfo
{
	plantobject[MAX_PLANTS], 
	Float:plantx, 
	Float:planty, 
	Float:plantz, 
	bool:plantdone, 
	bool:planted, 
	bool:step1, 
}

enum bInfo
{
    bOwned, 
    bPrice, 
    bOwner[MAX_PLAYER_NAME], 
    bType, 
    bLocked, 
    bMoney, 
    Float:bEntranceX, 
    Float:bEntranceY, 
    Float:bEntranceZ, 
    Float:bEntranceA, 
    Float:bExitX, 
    Float:bExitY, 
    Float:bExitZ, 
    Float:bExitA, 
    bInt, 
    bWorld, 
    bInsideInt, 
    bInsideWorld, 
    bInsideIcon, 
    bOutsideIcon, 
	Text3D: DLabel, 
    bName[128]
}

enum hInfo
{
    hOwned, 
    hPrice, 
    hOwner[MAX_PLAYER_NAME], 
    hLocked, 
    hMoney, 
    Float:hEntranceX, 
    Float:hEntranceY, 
    Float:hEntranceZ, 
    Float:hEntranceA, 
    Float:hExitX, 
    Float:hExitY, 
    Float:hExitZ, 
    Float:hExitA, 
    hInt, 
    hWorld, 
    hInsideInt, 
    hInsideWorld, 
    hInsideIcon, 
    hOutsideIcon, 
	Text3D: hDLabel, 
	hWeapon1, 
	hWeapon2, 
	hWeapon3, 
	hWeapon4, 
	hWeapon5, 
	hWeapon6, 
	hWeapon7, 
	hWeapon8, 
	hWeapon9, 
	hWeapon10, 
	hAmmo1, 
	hAmmo2, 
	hAmmo3, 
	hAmmo4, 
	hAmmo5, 
	hAmmo6, 
	hAmmo7, 
	hAmmo8, 
	hAmmo9, 
	hAmmo10, 
	hOutsideWorld, 
	hOutsideInt, 
	hLSD, 
	hCocaine, 
	hMarijuana, 
	hMeth, 
	hEcstasy, 
	hHeroin, 
	hCrack, 
	HouseCP
}

enum fInfo
{
    fName[128], 
    fInformation[256], 
    fLeader[MAX_PLAYER_NAME], 
	fMembers, 
	fRank1[64], 
	fRank2[64], 
	fRank3[64], 
	fRank4[64], 
	fRank5[64], 
	fRank6[64], 
	fType, 
	fID
}

enum
{
	DIALOG_NONE=12345, 
	DIALOG_ERROR=12346, 
	DIALOG_VEHICLE=500, 
	DIALOG_VEHICLE_BUY, 
	DIALOG_VEHICLE_SELL, 
	DIALOG_FINDVEHICLE, 
	DIALOG_TRUNK, 
	DIALOG_TRUNK_ACTION, 
	DIALOG_VEHICLE_PLATE, 
	DIALOG_FUEL, 
	DIALOG_EDITVEHICLE, 
	DIALOG_VEHICLELIST
};

enum E_SHOT_INFO
{
	 Chest, 
	 Crotch, 
	 LArm, 
	 RArm, 
	 LLeg, 
	 RLeg, 
	 Head, 
	 Misc
}
new sInfo[MAX_PLAYERS][E_SHOT_INFO];

enum player_enum
{
    bool:calling, 
    caller
}
new player[MAX_PLAYERS][player_enum];

//=========================FORWARDS========================='
forward StopBus(playerid);
forward PizzaTimer();
forward BUSTimer();
forward DMVTimer();
forward TimerWeapons(playerid);
forward EngineOn(playerid);
forward GlobalSavery();
forward NoExplode();
forward JailTimer();
forward check(playerid);
forward stopphone(playerid);
forward startphone(playerid);
forward Unfreeze(playerid);
forward OnPlayerTazePlayer(playerid);
forward MainTimer();
forward Speedometer();
forward SaveTimer();
forward StopAlarm(vehicleid);
forward LoadUser_data(playerid, name[], value[]);
forward LoadIP_data(playerid, name[], value[]);
forward loadbiz_data(idx, name[], value[]);
forward loadhouse_data(idx, name[], value[]);
forward loadfaction_data(idx, name[], value[]);
forward UnJail(playerid);
forward ProxDetector(Float:radi, playerid, const string[], col1, col2, col3, col4, col5);
forward PlayerActionMessage(playerid, Float:radius, const message[]);
forward PoliceBroadcast(color, const string[], level);
forward ABroadCast(color, const string[], level);
forward GiveRespectAgain(playerid);
forward FishChance(playerid);
forward check(playerid);
forward stopphone(playerid);
forward startphone(playerid);
forward KillLog(killstring[]);
forward PayLog(paystring[]);
forward GiveGunLog(givegunstring[]);
forward aGiveGunLog(agivegunstring[]);
forward GiveMoneyLog(givemoneystring[]);
forward SetMoneyLog(setmoneystring[]);
forward BanLog(banstring[]);
forward DropGunLog(dropgunstring[]);
forward PickupGunLog(pickupgunstring[]);
forward HackingLog(hackingstring[]);
forward ServerRestart(playerid);
forward LoginTimer(playerid);
forward login_dialog(playerid);
forward OnPlayerCommandPerformed(playerid, cmdtext[], success);
forward paytime(playerid);
forward UnloadTazer(playerid);
forward RobbedStore3();
forward RobbedStore2();
forward RobbedStore1();
forward timerrob3(playerid);
forward timerrob2(playerid);
forward timerrob1(playerid);
forward timer2(playerid);
forward timer(playerid);
forward timerAttachWorm(playerid);
forward timerrepair(playerid);
forward GrowingMarijuana(playerid);
forward tree5respawn(playerid);
forward tree4respawn(playerid);
forward tree3respawn(playerid);
forward tree2respawn(playerid);
forward tree1respawn(playerid);
forward timershop(playerid);
forward timerchop(playerid);
forward timerFish(playerid);
forward EndOfRegister(playerid);
forward PlayerLocalMessage(playerid, Float:radius, const message[]);
forward UnsetHacksBan(playerid);
forward OnPlayerDataSave(playerid);
forward IsPlayerInsideAHouse(playerid);
forward UpdateTimeAndWeather();
forward DiveAnim(playerid);
forward OperationDone(playerid);
forward LoadDeathAnim(playerid);
forward TutorialDone(playerid);
forward AgeSetup(playerid);
forward Camera5(playerid);
forward Camera4(playerid);
forward Camera3(playerid);
forward Camera2(playerid);
forward Camera1(playerid);
forward StartIntro(playerid);
forward LoadFightingStyle(playerid);
forward ResetWeapons(playerid);
forward ResetPlayerStats(playerid);
forward AdvertiseAgain(playerid);
forward LoadInterior(playerid);
forward LoadPlayerSpawnData(playerid);
forward LoadPlayerWeapons(playerid);
forward LSDEffect(playerid);
forward CocaineEffect(playerid);
forward MarijuanaEffect(playerid);
forward DrugEnd(playerid);
forward TimeCycle(playerid);
forward UnsetBan(playerid);
forward UnsetKick(playerid);
forward SendFactionMessage(faction, color, string[]);
forward SaveBusiness(id);
forward OnPlayerFloodControl(playerid, iCount, iTimeSpan);
forward DestroySpark(playerid);
forward TazedRemove(playerid);
forward SafeSetPlayerPos(playerid, Float:x, Float:y, Float:z);

//=========================VARIABLES=========================

new Float:SpecX[MAX_PLAYERS], Float:SpecY[MAX_PLAYERS], Float:SpecZ[MAX_PLAYERS], vWorld[MAX_PLAYERS], Inter[MAX_PLAYERS];
new IsSpecing[MAX_PLAYERS], IsBeingSpeced[MAX_PLAYERS], spectatorid[MAX_PLAYERS];

new PizzaTimer1[MAX_PLAYERS];
new pizzaboy[MAX_PLAYERS];
new PizzaCP1[MAX_PLAYERS];
new PizzaCP2[MAX_PLAYERS];
new busstop[MAX_PLAYERS];
new BUSTimer1[MAX_PLAYERS];
new LeftBus[MAX_PLAYERS];
new dmvcar[MAX_PLAYERS];
new DMVtimer1[MAX_PLAYERS];
new LeftDMVCar[MAX_PLAYERS];
new LeftPizzaBoy[MAX_PLAYERS];
new mapCP[MAX_PLAYERS];
				
new Text3D:vehicle3Dtext[MAX_VEHICLES], downtownbus;
new Text3D:vehicle3Dtext2[MAX_VEHICLES], southbus;
new Text3D:vehicle3Dtext3[MAX_VEHICLES], westbus;
new Text3D:vehicle3Dtext4[MAX_VEHICLES];
new killed[MAX_PLAYERS];
new Tazer[MAX_PLAYERS];
new Spark[MAX_PLAYERS];
new attachingw[MAX_PLAYERS];
new wormattached2[MAX_PLAYERS];
new Tazed[MAX_PLAYERS];
new policecall[MAX_PLAYERS];
new breaking[MAX_PLAYERS];
new hotwiring[MAX_PLAYERS];

new HouseCPP[MAX_PLAYERS];

enum dGunEnum
{
	Float:ObjPos[3], 
	ObjID, 
	ObjData[2], 
	ObjInt, 
	ObjWorld
};
new dGunData[MAX_OBJ][dGunEnum];

new GunNames[48][] = {
	"Nothink", "Brass Knuckles", "Golf Club", "Nitestick", "Knife", "Baseball Bat", 
	"Showel", "Pool Cue", "Katana", "Chainsaw", "Purple Dildo", "Small White Dildo", 
	"Long White Dildo", "Vibrator", "Flowers", "Cane", "Grenade", "Tear Gas", "Molotov", 
	"Vehicle Missile", "Hydra Flare", "Jetpack", "Glock", "Silenced Colt", "Desert Eagle", 
	"Shotgun", "Sawn Off", "Combat Shotgun", "Micro UZI", "MP5", "AK47", "M4", "Tec9", 
	"Rifle", "Sniper Rifle", "Rocket Launcher", "HS Rocket Launcher", "Flamethrower", "Minigun", 
	"Satchel Charge", "Detonator", "Spraycan", "Fire Extinguisher", "Camera", "Nightvision", 
	"Infrared Vision", "Parachute", "Fake Pistol"
};

new GunObjects[47] = {
	0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324, 325, 326, 342, 343, 344, 
	0, 0, 0, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 
	363, 364, 365, 366, 367, 368, 368, 371
};

new onoff[MAX_PLAYERS] = 1;
new Equipped[MAX_PLAYERS];
new sellfish = 5;
new bool:isAlive[MAX_PLAYERS];
new bool:stopanimAllowed[MAX_PLAYERS];
new bool:rentingVehicle[MAX_PLAYERS];
new bool:PlayerLogged[MAX_PLAYERS];
new StoresRobbed[3];
new DMVcar[4];
new JunkCar[5];
new LumberCar[5];
new GovCar[5];
new LumberTree[5];
new PizzaBoys[8];
new bool:robbing[MAX_PLAYERS];
new TimerRob1[MAX_PLAYERS];
new TimerRob2[MAX_PLAYERS];
new TimerRob3[MAX_PLAYERS];
new robbingstore1[MAX_PLAYERS];
new robbingstore2[MAX_PLAYERS];
new robbingstore3[MAX_PLAYERS];
new RobstoreCP[MAX_PLAYERS];
new ChoppedTree[5];
new PoliceCar[32];
new Pickup[23];
new playerRace[MAX_PLAYERS];
new Text:txtTimeDisp;
new hour, minute;
new timestr[32];
new Float:Deadx[MAX_PLAYERS], Float:Deady[MAX_PLAYERS], Float:Deadz[MAX_PLAYERS];
new deadvw[MAX_PLAYERS];
new deadint[MAX_PLAYERS];
new DMVcp[MAX_PLAYERS];
new getcp[MAX_PLAYERS];
new EastRoute[MAX_PLAYERS];
new SouthRoute[MAX_PLAYERS];
new DownRoute[MAX_PLAYERS];
new JunkCP[MAX_PLAYERS];
new LumberCP[MAX_PLAYERS];
new oldvw[MAX_PLAYERS];
new ShopCP[MAX_PLAYERS];
new BoatCP[MAX_PLAYERS];
new BigEar[MAX_PLAYERS];
new gMuted[MAX_PLAYERS];
new Duty[MAX_PLAYERS];
new aDuty[MAX_PLAYERS];
new tDuty[MAX_PLAYERS];
new PlayerNeedsHelp[MAX_PLAYERS];
new PlayerNeedsHelp2[MAX_PLAYERS];
new Warns[MAX_PLAYERS];
new Respect[MAX_PLAYERS];
new IsSmokingJoint[MAX_PLAYERS];
new IsSmokingCigarette[MAX_PLAYERS];
new IsDrinkingBeer[MAX_PLAYERS];
new IsCocaineHigh[MAX_PLAYERS];
new IsLSDHigh[MAX_PLAYERS];
new WormAttached[MAX_PLAYERS];
new Text:ServerTimeTXT;
new oldskin[MAX_PLAYERS];
new ServerTime = 12;
new bool:OOCenable = true;
new bool:friskInvited[MAX_PLAYERS];
new bool:friskApproved[MAX_PLAYERS];
new Dice[MAX_PLAYERS];
new Mask[MAX_PLAYERS];
new toolkit[MAX_PLAYERS];
new bool:greetInvited[MAX_PLAYERS];
new bool:factionInvited[MAX_PLAYERS];
new greetNumber[MAX_PLAYERS];
new gPlayerUsingLoopingAnim[MAX_PLAYERS];
new Player_Greet[MAX_PLAYERS];
new Player_Frisk[MAX_PLAYERS];
new Player_Invited[MAX_PLAYERS];
new gPlayerLoggin[MAX_PLAYERS char];
new Previous_Colour[ MAX_PLAYERS ];
new InsideBiz[MAX_PLAYERS];
new InsideHouse[MAX_PLAYERS];
new acceptageup[MAX_PLAYERS];
new MaskOn[MAX_PLAYERS];
new AdvertiseAllowed[MAX_PLAYERS];
new CP[MAX_PLAYERS];
new fine_weather_ids[] = {1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 15, 17, 18, 24, 25, 26, 27, 28, 29, 30, 40};
new foggy_weather_ids[] = {9, 19, 20, 31, 32};
new wet_weather_ids[] = {8};
new masknumber[MAX_PLAYERS];
new bool:TakingDriverLicense[MAX_PLAYERS];
new bool:WorkingJunk[MAX_PLAYERS];
new bool:WorkingLumber[MAX_PLAYERS];
new bool:WorkingShop[MAX_PLAYERS];
new bool:Chopping[MAX_PLAYERS];
new bool:Producting[MAX_PLAYERS];
new bool:Fishing[MAX_PLAYERS];
new engine, lights, alarm, doors, bonnet, boot, objective;
new windows[MAX_VEHICLES][4];
new Text:Textdraw0;
new Text:Textdraw1;
new Text:Textdraw2;
new Text:Textdraw3;
new Text:Textdraw4;
new Text:Textdraw5;
new Text:Textdraw6;
new Text:Textdraw7;
new Text:Textdraw8;
new Text:Textdraw9;
new Text:Textdraw10;
new Text:Textdraw11;
new Text:Textdraw12;
new Text:Textdraw13;
new Text:Textdraw14;
new Text:Textdraw15;
new Text:Textdraw16;
new Text:Textdraw17;
new Text:Textdraw18;
new Text:Textdraw19;
new Text3D:deathlabel[MAX_PLAYERS];
new bool:playerWeapons[MAX_PLAYERS][47];
new WeedInfo[100][wInfo];
new BusinessInfo[500][bInfo];
new HouseInfo[500][hInfo];
new FactionInfo[10][fInfo];
new PlayerInfo[MAX_PLAYERS][pInfo];
new maintimer;
new speedotimer;
new savetimer;
new SaveVehicleIndex;
new RefuelTime[MAX_PLAYERS];
new TrackCar[MAX_PLAYERS];
new DialogReturn[MAX_PLAYERS];
new Text:SpeedoText[MAX_PLAYERS];
new Float:Fuel[MAX_VEHICLES] = {100.0, ...};
new VehicleSecurity[MAX_VEHICLES];
new VehicleCreated[MAX_DVEHICLES];
new VehicleID[MAX_DVEHICLES];
new VehicleModel[MAX_DVEHICLES];
new Float:VehiclePos[MAX_DVEHICLES][4];
new VehicleColor[MAX_DVEHICLES][2];
new VehicleInterior[MAX_DVEHICLES];
new VehicleWorld[MAX_DVEHICLES];
new VehicleOwner[MAX_DVEHICLES][MAX_PLAYER_NAME];
new VehicleNumberPlate[MAX_DVEHICLES][16];
new VehicleValue[MAX_DVEHICLES];
new VehicleLock[MAX_DVEHICLES];
new VehicleAlarm[MAX_DVEHICLES];
new VehicleTrunk[MAX_DVEHICLES][5][2];
new VehicleMods[MAX_DVEHICLES][14];
new VehiclePaintjob[MAX_DVEHICLES] = {255, ...};
new BackupCP[MAX_PLAYERS];
new Text3D:VehicleLabel[MAX_DVEHICLES];
new DealershipCreated[MAX_DEALERSHIPS];
new Float:DealershipPos[MAX_DEALERSHIPS][3];
new Text3D:DealershipLabel[MAX_DEALERSHIPS];
new FuelStationCreated[MAX_FUEL_STATIONS];
new Float:FuelStationPos[MAX_FUEL_STATIONS][3];
new Text3D:FuelStationLabel[MAX_FUEL_STATIONS];
new breakin[MAX_PLAYERS];
new Timer[MAX_PLAYERS];
new hotwire[MAX_PLAYERS];
new RVID[MAX_PLAYERS];
new repair[MAX_PLAYERS];
new TimerRepair[MAX_PLAYERS];
new fish[MAX_PLAYERS];
new chop[MAX_PLAYERS];
new shopwork[MAX_PLAYERS];
new TreeChopped[MAX_PLAYERS];
new TimerChop[MAX_PLAYERS];
new TimerFish[MAX_PLAYERS];
new TimerShop[MAX_PLAYERS];
new AttachWorm[MAX_PLAYERS];
new TimerAttachWorm[MAX_PLAYERS];
new RodObject;
new Timer2[MAX_PLAYERS];
new Timer3[MAX_PLAYERS];
new gate0, gate1;
new
        door0, door1, door2, door3;

new
        cell0, cell1, cell2, cell3, cell4, cell5, cell6, cell7;
new females = mS_INVALID_LISTID;
new males = mS_INVALID_LISTID;
new VehicleNames[][] = {
	"Landstalker", "Bravura", "Buffalo", "Linerunner", "Perennial", "Sentinel", "Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus", 
	"Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam", "Esperanto", "Taxi", "Washington", "Bobcat", "Mr Whoopee", "BF Injection", 
	"Hunter", "Premier", "Enforcer", "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach", "Cabbie", 
	"Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder", 
	"Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair", "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", 
	"Glendale", "Oceanic", "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR3 50", "Walton", "Regina", 
	"Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher", "FBI Rancher", "Virgo", "Greenwood", 
	"Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick", "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", 
	"Bloodring Banger", "Rancher", "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropdust", "Stunt", "Tanker", "RoadTrain", 
	"Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck", "Fortune", "Cadrona", "FBI Truck", 
	"Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent", "Bullet", "Clover", 
	"Sadler", "Firetruck", "Hustler", "Intruder", "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster A", 
	"Monster B", "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito", "Freight", "Trailer", 
	"Kart", "Mower", "Duneride", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400", "Newsvan", "Tug", "Trailer A", "Emperor", 
	"Wayfarer", "Euros", "Hotdog", "Club", "Trailer B", "Trailer C", "Andromada", "Dodo", "RC Cam", "Launch", "Police Car (SJPD)", "Police Car (SFPD)", 
	"Police Car (LVPD)", "Police Ranger", "Picador", "S.W.A.T. Van", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage Trailer A", "Luggage Trailer B", 
	"Stair Trailer", "Boxville", "Farm Plow", "Utility Trailer"
};

new carradio[MAX_PLAYERS];

enum MainZone
{
	Zone_Name[28], 
	Float:Zone_Area[6]
}

static const SanAndreasZones[][MainZone] = {

	{"The Big Ear", 	                {-410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00}}, 
	{"Aldea Malvada",               {-1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00}}, 
	{"Angel Pine",                  {-2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00}}, 
	{"Arco del Oeste",              {-901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00}}, 
	{"Avispa Country Club",         {-2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00}}, 
	{"Avispa Country Club",         {-2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00}}, 
	{"Avispa Country Club",         {-2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00}}, 
	{"Avispa Country Club",         {-2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10}}, 
	{"Avispa Country Club",         {-2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10}}, 
	{"Avispa Country Club",         {-2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70}}, 
	{"Back o Beyond",               {-1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00}}, 
	{"Battery Point",               {-2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00}}, 
	{"Bayside",                     {-2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00}}, 
	{"Bayside Marina",              {-2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00}}, 
	{"Beacon Hill",                 {-399.60, -1075.50, -1.40, -319.00, -977.50, 198.50}}, 
	{"Blackfield",                  {964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90}}, 
	{"Blackfield",                  {964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90}}, 
	{"Blackfield Chapel",           {1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90}}, 
	{"Blackfield Chapel",           {1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90}}, 
	{"Blackfield Intersection",     {1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90}}, 
	{"Blackfield Intersection",     {1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90}}, 
	{"Blackfield Intersection",     {1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90}}, 
	{"Blackfield Intersection",     {1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90}}, 
	{"Blueberry",                   {104.50, -220.10, 2.30, 349.60, 152.20, 200.00}}, 
	{"Blueberry",                   {19.60, -404.10, 3.80, 349.60, -220.10, 200.00}}, 
	{"Blueberry Acres",             {-319.60, -220.10, 0.00, 104.50, 293.30, 200.00}}, 
	{"Caligula's Palace",           {2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90}}, 
	{"Caligula's Palace",           {2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90}}, 
	{"Calton Heights",              {-2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00}}, 
	{"Chinatown",                   {-2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00}}, 
	{"City Hall",                   {-2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00}}, 
	{"Come-A-Lot",                  {2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90}}, 
	{"Commerce",                    {1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90}}, 
	{"Commerce",                    {1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90}}, 
	{"Commerce",                    {1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90}}, 
	{"Commerce",                    {1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90}}, 
	{"Commerce",                    {1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90}}, 
	{"Commerce",                    {1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90}}, 
	{"Conference Center",           {1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90}}, 
	{"Conference Center",           {1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90}}, 
	{"Cranberry Station",           {-2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00}}, 
	{"Creek",                       {2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90}}, 
	{"Dillimore",                   {580.70, -674.80, -9.50, 861.00, -404.70, 200.00}}, 
	{"Doherty",                     {-2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00}}, 
	{"Doherty",                     {-2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00}}, 
	{"Downtown",                    {-1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00}}, 
	{"Downtown",                    {-1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00}}, 
	{"Downtown",                    {-1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00}}, 
	{"Downtown",                    {-1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00}}, 
	{"Downtown",                    {-2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00}}, 
	{"Downtown",                    {-1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00}}, 
	{"Downtown Los Santos",         {1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90}}, 
	{"Downtown Los Santos",         {1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90}}, 
	{"Downtown Los Santos",         {1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90}}, 
	{"Downtown Los Santos",         {1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90}}, 
	{"Downtown Los Santos",         {1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90}}, 
	{"Downtown Los Santos",         {1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90}}, 
	{"Downtown Los Santos",         {1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90}}, 
	{"Downtown Los Santos",         {1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90}}, 
	{"Downtown Los Santos",         {1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90}}, 
	{"East Beach",                  {2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90}}, 
	{"East Beach",                  {2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90}}, 
	{"East Beach",                  {2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90}}, 
	{"East Beach",                  {2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90}}, 
	{"East Los Santos",             {2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90}}, 
	{"East Los Santos",             {2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90}}, 
	{"East Los Santos",             {2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90}}, 
	{"East Los Santos",             {2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90}}, 
	{"East Los Santos",             {2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90}}, 
	{"East Los Santos",             {2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90}}, 
	{"East Los Santos",             {2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90}}, 
	{"Easter Basin",                {-1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00}}, 
	{"Easter Basin",                {-1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00}}, 
	{"Easter Bay Airport",          {-1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00}}, 
	{"Easter Bay Airport",          {-1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00}}, 
	{"Easter Bay Airport",          {-1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00}}, 
	{"Easter Bay Airport",          {-1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00}}, 
	{"Easter Bay Airport",          {-1213.90, -50.00, -4.50, -947.90, 578.30, 200.00}}, 
	{"Easter Bay Airport",          {-1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40}}, 
	{"Easter Bay Airport",          {-1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40}}, 
	{"Easter Bay Airport",          {-1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40}}, 
	{"Easter Bay Chemicals",        {-1132.80, -768.00, 0.00, -956.40, -578.10, 200.00}}, 
	{"Easter Bay Chemicals",        {-1132.80, -787.30, 0.00, -956.40, -768.00, 200.00}}, 
	{"El Castillo del Diablo",      {-464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00}}, 
	{"El Castillo del Diablo",      {-208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00}}, 
	{"El Castillo del Diablo",      {-208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00}}, 
	{"El Corona",                   {1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90}}, 
	{"El Corona",                   {1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90}}, 
	{"El Quebrados",                {-1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00}}, 
	{"Esplanade East",              {-1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00}}, 
	{"Esplanade East",              {-1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00}}, 
	{"Esplanade East",              {-1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30}}, 
	{"Esplanade North",             {-2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00}}, 
	{"Esplanade North",             {-1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00}}, 
	{"Esplanade North",             {-1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00}}, 
	{"Fallen Tree",                 {-792.20, -698.50, -5.30, -452.40, -380.00, 200.00}}, 
	{"Fallow Bridge",               {434.30, 366.50, 0.00, 603.00, 555.60, 200.00}}, 
	{"Fern Ridge",                  {508.10, -139.20, 0.00, 1306.60, 119.50, 200.00}}, 
	{"Financial",                   {-1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00}}, 
	{"Fisher's Lagoon",             {1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00}}, 
	{"Flint Intersection",          {-187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90}}, 
	{"Flint Range",                 {-594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00}}, 
	{"Fort Carson",                 {-376.20, 826.30, -3.00, 123.70, 1220.40, 200.00}}, 
	{"Foster Valley",               {-2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00}}, 
	{"Foster Valley",               {-2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00}}, 
	{"Foster Valley",               {-2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00}}, 
	{"Foster Valley",               {-2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00}}, 
	{"Frederick Bridge",            {2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00}}, 
	{"Gant Bridge",                 {-2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00}}, 
	{"Gant Bridge",                 {-2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00}}, 
	{"Ganton",                      {2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90}}, 
	{"Ganton",                      {2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90}}, 
	{"Garcia",                      {-2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00}}, 
	{"Garcia",                      {-2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00}}, 
	{"Garver Bridge",               {-1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90}}, 
	{"Garver Bridge",               {-1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90}}, 
	{"Garver Bridge",               {-1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30}}, 
	{"Glen Park",                   {1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90}}, 
	{"Glen Park",                   {1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90}}, 
	{"Glen Park",                   {1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90}}, 
	{"Green Palms",                 {176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00}}, 
	{"Greenglass College",          {964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90}}, 
	{"Greenglass College",          {964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90}}, 
	{"Hampton Barns",               {603.00, 264.30, 0.00, 761.90, 366.50, 200.00}}, 
	{"Hankypanky Point",            {2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00}}, 
	{"Harry Gold Parkway",          {1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90}}, 
	{"Hashbury",                    {-2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00}}, 
	{"Hilltop Farm",                {967.30, -450.30, -3.00, 1176.70, -217.90, 200.00}}, 
	{"Hunter Quarry",               {337.20, 710.80, -115.20, 860.50, 1031.70, 203.70}}, 
	{"Idlewood",                    {1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90}}, 
	{"Idlewood",                    {1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90}}, 
	{"Idlewood",                    {1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90}}, 
	{"Idlewood",                    {1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90}}, 
	{"Idlewood",                    {2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90}}, 
	{"Idlewood",                    {1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90}}, 
	{"Jefferson",                   {1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90}}, 
	{"Jefferson",                   {2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90}}, 
	{"Jefferson",                   {2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90}}, 
	{"Jefferson",                   {2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90}}, 
	{"Jefferson",                   {2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90}}, 
	{"Jefferson",                   {2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90}}, 
	{"Julius Thruway East",         {2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90}}, 
	{"Julius Thruway East",         {2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90}}, 
	{"Julius Thruway East",         {2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90}}, 
	{"Julius Thruway East",         {2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90}}, 
	{"Julius Thruway North",        {2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90}}, 
	{"Julius Thruway North",        {2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90}}, 
	{"Julius Thruway North",        {2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90}}, 
	{"Julius Thruway North",        {1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90}}, 
	{"Julius Thruway North",        {1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90}}, 
	{"Julius Thruway North",        {1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90}}, 
	{"Julius Thruway North",        {1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90}}, 
	{"Julius Thruway North",        {1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90}}, 
	{"Julius Thruway South",        {1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90}}, 
	{"Julius Thruway South",        {2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90}}, 
	{"Julius Thruway West",         {1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90}}, 
	{"Julius Thruway West",         {1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90}}, 
	{"Juniper Hill",                {-2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00}}, 
	{"Juniper Hollow",              {-2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00}}, 
	{"K.A.C.C. Military Fuels",     {2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90}}, 
	{"Kincaid Bridge",              {-1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90}}, 
	{"Kincaid Bridge",              {-1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90}}, 
	{"Kincaid Bridge",              {-1087.90, 855.30, -89.00, -961.90, 986.20, 110.90}}, 
	{"King's",                      {-2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00}}, 
	{"King's",                      {-2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00}}, 
	{"King's",                      {-2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00}}, 
	{"LVA Freight Depot",           {1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90}}, 
	{"LVA Freight Depot",           {1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90}}, 
	{"LVA Freight Depot",           {1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90}}, 
	{"LVA Freight Depot",           {1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90}}, 
	{"LVA Freight Depot",           {1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90}}, 
	{"Las Barrancas",               {-926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00}}, 
	{"Las Brujas",                  {-365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00}}, 
	{"Las Colinas",                 {1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90}}, 
	{"Las Colinas",                 {2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90}}, 
	{"Las Colinas",                 {2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90}}, 
	{"Las Colinas",                 {2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90}}, 
	{"Las Colinas",                 {2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90}}, 
	{"Las Colinas",                 {2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90}}, 
	{"Las Colinas",                 {2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90}}, 
	{"Las Payasadas",               {-354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00}}, 
	{"Las Venturas Airport",        {1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90}}, 
	{"Las Venturas Airport",        {1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90}}, 
	{"Las Venturas Airport",        {1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90}}, 
	{"Las Venturas Airport",        {1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50}}, 
	{"Last Dime Motel",             {1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90}}, 
	{"Leafy Hollow",                {-1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00}}, 
	{"Liberty City",                {-1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00}}, 
	{"Lil' Probe Inn",              {-90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00}}, 
	{"Linden Side",                 {2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90}}, 
	{"Linden Station",              {2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90}}, 
	{"Linden Station",              {2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40}}, 
	{"Little Mexico",               {1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90}}, 
	{"Little Mexico",               {1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90}}, 
	{"Los Flores",                  {2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90}}, 
	{"Los Flores",                  {2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90}}, 
	{"Los Santos International",    {1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90}}, 
	{"Los Santos International",    {1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90}}, 
	{"Los Santos International",    {1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90}}, 
	{"Los Santos International",    {1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90}}, 
	{"Los Santos International",    {1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90}}, 
	{"Los Santos International",    {2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90}}, 
	{"Marina",                      {647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90}}, 
	{"Marina",                      {647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90}}, 
	{"Marina",                      {807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90}}, 
	{"Market",                      {787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90}}, 
	{"Market",                      {952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90}}, 
	{"Market",                      {1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90}}, 
	{"Market",                      {926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90}}, 
	{"Market Station",              {787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80}}, 
	{"Martin Bridge",               {-222.10, 293.30, 0.00, -122.10, 476.40, 200.00}}, 
	{"Missionary Hill",             {-2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00}}, 
	{"Montgomery",                  {1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00}}, 
	{"Montgomery",                  {1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00}}, 
	{"Montgomery Intersection",     {1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00}}, 
	{"Montgomery Intersection",     {1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00}}, 
	{"Mulholland",                  {1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90}}, 
	{"Mulholland",                  {1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90}}, 
	{"Mulholland",                  {1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90}}, 
	{"Mulholland",                  {1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90}}, 
	{"Mulholland",                  {1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90}}, 
	{"Mulholland",                  {1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90}}, 
	{"Mulholland",                  {768.60, -954.60, -89.00, 952.60, -860.60, 110.90}}, 
	{"Mulholland",                  {687.80, -860.60, -89.00, 911.80, -768.00, 110.90}}, 
	{"Mulholland",                  {737.50, -768.00, -89.00, 1142.20, -674.80, 110.90}}, 
	{"Mulholland",                  {1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90}}, 
	{"Mulholland",                  {952.60, -937.10, -89.00, 1096.40, -860.60, 110.90}}, 
	{"Mulholland",                  {911.80, -860.60, -89.00, 1096.40, -768.00, 110.90}}, 
	{"Mulholland",                  {861.00, -674.80, -89.00, 1156.50, -600.80, 110.90}}, 
	{"Mulholland Intersection",     {1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90}}, 
	{"North Rock",                  {2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00}}, 
	{"Ocean Docks",                 {2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90}}, 
	{"Ocean Docks",                 {2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90}}, 
	{"Ocean Docks",                 {2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90}}, 
	{"Ocean Docks",                 {2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90}}, 
	{"Ocean Docks",                 {2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90}}, 
	{"Ocean Docks",                 {2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90}}, 
	{"Ocean Docks",                 {2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90}}, 
	{"Ocean Flats",                 {-2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00}}, 
	{"Ocean Flats",                 {-2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00}}, 
	{"Ocean Flats",                 {-2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00}}, 
	{"Octane Springs",              {338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00}}, 
	{"Old Venturas Strip",          {2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90}}, 
	{"Palisades",                   {-2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00}}, 
	{"Palomino Creek",              {2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00}}, 
	{"Paradiso",                    {-2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00}}, 
	{"Pershing Square",             {1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90}}, 
	{"Pilgrim",                     {2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90}}, 
	{"Pilgrim",                     {2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90}}, 
	{"Pilson Intersection",         {1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90}}, 
	{"Pirates in Men's Pants",      {1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90}}, 
	{"Playa del Seville",           {2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90}}, 
	{"Prickle Pine",                {1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90}}, 
	{"Prickle Pine",                {1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90}}, 
	{"Prickle Pine",                {1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90}}, 
	{"Prickle Pine",                {1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90}}, 
	{"Queens",                      {-2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00}}, 
	{"Queens",                      {-2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00}}, 
	{"Queens",                      {-2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00}}, 
	{"Randolph Industrial",         {1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90}}, 
	{"Redsands East",               {1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90}}, 
	{"Redsands East",               {1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90}}, 
	{"Redsands East",               {1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90}}, 
	{"Redsands West",               {1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90}}, 
	{"Redsands West",               {1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90}}, 
	{"Redsands West",               {1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90}}, 
	{"Redsands West",               {1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90}}, 
	{"Regular Tom",                 {-405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00}}, 
	{"Richman",                     {647.50, -1118.20, -89.00, 787.40, -954.60, 110.90}}, 
	{"Richman",                     {647.50, -954.60, -89.00, 768.60, -860.60, 110.90}}, 
	{"Richman",                     {225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90}}, 
	{"Richman",                     {225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90}}, 
	{"Richman",                     {72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90}}, 
	{"Richman",                     {72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90}}, 
	{"Richman",                     {321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90}}, 
	{"Richman",                     {321.30, -1044.00, -89.00, 647.50, -860.60, 110.90}}, 
	{"Richman",                     {321.30, -860.60, -89.00, 687.80, -768.00, 110.90}}, 
	{"Richman",                     {321.30, -768.00, -89.00, 700.70, -674.80, 110.90}}, 
	{"Robada Intersection",         {-1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90}}, 
	{"Roca Escalante",              {2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90}}, 
	{"Roca Escalante",              {2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90}}, 
	{"Rockshore East",              {2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90}}, 
	{"Rockshore West",              {1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90}}, 
	{"Rockshore West",              {2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90}}, 
	{"Rodeo",                       {72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90}}, 
	{"Rodeo",                       {72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90}}, 
	{"Rodeo",                       {225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90}}, 
	{"Rodeo",                       {225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90}}, 
	{"Rodeo",                       {334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90}}, 
	{"Rodeo",                       {312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90}}, 
	{"Rodeo",                       {422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90}}, 
	{"Rodeo",                       {558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90}}, 
	{"Rodeo",                       {466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90}}, 
	{"Rodeo",                       {422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90}}, 
	{"Rodeo",                       {466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90}}, 
	{"Rodeo",                       {334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90}}, 
	{"Royal Casino",                {2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90}}, 
	{"San Andreas Sound",           {2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00}}, 
	{"Santa Flora",                 {-2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00}}, 
	{"Santa Maria Beach",           {342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90}}, 
	{"Santa Maria Beach",           {72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90}}, 
	{"Shady Cabin",                 {-1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00}}, 
	{"Shady Creeks",                {-1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00}}, 
	{"Shady Creeks",                {-2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00}}, 
	{"Sobell Rail Yards",           {2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90}}, 
	{"Spinybed",                    {2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90}}, 
	{"Starfish Casino",             {2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90}}, 
	{"Starfish Casino",             {2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90}}, 
	{"Starfish Casino",             {2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90}}, 
	{"Temple",                      {1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90}}, 
	{"Temple",                      {1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90}}, 
	{"Temple",                      {1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90}}, 
	{"Temple",                      {952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90}}, 
	{"Temple",                      {1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90}}, 
	{"Temple",                      {1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90}}, 
	{"The Camel's Toe",             {2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90}}, 
	{"The Clown's Pocket",          {2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90}}, 
	{"The Emerald Isle",            {2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90}}, 
	{"The Farm",                    {-1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90}}, 
	{"Four Dragons Casino",         {1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90}}, 
	{"The High Roller",             {1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90}}, 
	{"The Mako Span",               {1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00}}, 
	{"The Panopticon",              {-947.90, -304.30, -1.10, -319.60, 327.00, 200.00}}, 
	{"The Pink Swan",               {1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90}}, 
	{"The Sherman Dam",             {-968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00}}, 
	{"The Strip",                   {2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90}}, 
	{"The Strip",                   {2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90}}, 
	{"The Strip",                   {2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90}}, 
	{"The Strip",                   {2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90}}, 
	{"The Visage",                  {1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90}}, 
	{"The Visage",                  {1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90}}, 
	{"Unity Station",               {1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50}}, 
	{"Valle Ocultado",              {-936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00}}, 
	{"Verdant Bluffs",              {930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90}}, 
	{"Verdant Bluffs",              {1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90}}, 
	{"Verdant Bluffs",              {1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90}}, 
	{"Verdant Meadows",             {37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00}}, 
	{"Verona Beach",                {647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90}}, 
	{"Verona Beach",                {930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90}}, 
	{"Verona Beach",                {851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90}}, 
	{"Verona Beach",                {1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90}}, 
	{"Verona Beach",                {1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90}}, 
	{"Vinewood",                    {787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90}}, 
	{"Vinewood",                    {787.40, -1130.80, -89.00, 952.60, -954.60, 110.90}}, 
	{"Vinewood",                    {647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90}}, 
	{"Vinewood",                    {647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90}}, 
	{"Whitewood Estates",           {883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90}}, 
	{"Whitewood Estates",           {1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90}}, 
	{"Willowfield",                 {1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90}}, 
	{"Willowfield",                 {2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90}}, 
	{"Willowfield",                 {2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90}}, 
	{"Willowfield",                 {2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90}}, 
	{"Willowfield",                 {2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90}}, 
	{"Willowfield",                 {2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90}}, 
	{"Willowfield",                 {2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90}}, 
	{"Yellow Bell Station",         {1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00}}, 
	// Citys Zones
	{"Los Santos",                  {44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00}}, 
	{"Las Venturas",                {869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00}}, 
	{"Bone County",                 {-480.50, 596.30, -242.90, 869.40, 2993.80, 900.00}}, 
	{"Tierra Robada",               {-2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00}}, 
	{"Tierra Robada",               {-1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00}}, 
	{"San Fierro",                  {-2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00}}, 
	{"Red County",                  {-1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00}}, 
	{"Flint County",                {-1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00}}, 
	{"Whetstone",                   {-2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}}
};

public LoadUser_data(playerid, name[], value[])
{
	INI_Int("Password", PlayerInfo[playerid][pPass]);
    INI_Int("Cash", PlayerInfo[playerid][pCash]);
    INI_Int("Admin", PlayerInfo[playerid][pAdmin]);
    INI_Int("Kills", PlayerInfo[playerid][pKills]);
    INI_Int("Deaths", PlayerInfo[playerid][pDeaths]);
    INI_Int("BizID", PlayerInfo[playerid][BizID]);
    INI_Int("LSD", PlayerInfo[playerid][dLSD]);
    INI_Int("Cocaine", PlayerInfo[playerid][dCocaine]);
    INI_Int("Marijuana", PlayerInfo[playerid][dMarijuana]);
    INI_Int("Meth", PlayerInfo[playerid][dMeth]);
    INI_Int("Ecstasy", PlayerInfo[playerid][dEcstasy]);
    INI_Int("Respect", PlayerInfo[playerid][pRespect]);
    INI_Int("Cigarettes", PlayerInfo[playerid][pCigarettes]);
    INI_Int("Beer", PlayerInfo[playerid][pBeer]);
    INI_Int("BankAccount", PlayerInfo[playerid][pBankAccount]);
    INI_Int("Datasaved", PlayerInfo[playerid][pAccountdata]);
    INI_Int("Number", PlayerInfo[playerid][pNumber]);
    INI_Int("Level", PlayerInfo[playerid][pLevel]);
    INI_Int("Skin", PlayerInfo[playerid][pSkin]);
    INI_Int("HouseID", PlayerInfo[playerid][HouseID]);
    INI_Int("Weapon1", PlayerInfo[playerid][pWeapon1]);
    INI_Int("Weapon2", PlayerInfo[playerid][pWeapon2]);
    INI_Int("Weapon3", PlayerInfo[playerid][pWeapon3]);
    INI_Int("Weapon4", PlayerInfo[playerid][pWeapon4]);
    INI_Int("Weapon5", PlayerInfo[playerid][pWeapon5]);
    INI_Int("Weapon6", PlayerInfo[playerid][pWeapon6]);
    INI_Int("Weapon7", PlayerInfo[playerid][pWeapon7]);
    INI_Int("Weapon8", PlayerInfo[playerid][pWeapon8]);
    INI_Int("Weapon9", PlayerInfo[playerid][pWeapon9]);
    INI_Int("Weapon10", PlayerInfo[playerid][pWeapon10]);
    INI_Int("Weapon11", PlayerInfo[playerid][pWeapon11]);
    INI_Int("Weapon12", PlayerInfo[playerid][pWeapon12]);
    INI_Int("Weapon13", PlayerInfo[playerid][pWeapon13]);
    INI_Int("Weapon14", PlayerInfo[playerid][pWeapon14]);
    INI_Int("Ammo1", PlayerInfo[playerid][pAmmo1]);
    INI_Int("Ammo2", PlayerInfo[playerid][pAmmo2]);
    INI_Int("Ammo3", PlayerInfo[playerid][pAmmo3]);
    INI_Int("Ammo4", PlayerInfo[playerid][pAmmo4]);
    INI_Int("Ammo5", PlayerInfo[playerid][pAmmo5]);
    INI_Int("Ammo6", PlayerInfo[playerid][pAmmo6]);
    INI_Int("Ammo7", PlayerInfo[playerid][pAmmo7]);
    INI_Int("Ammo8", PlayerInfo[playerid][pAmmo8]);
    INI_Int("Ammo9", PlayerInfo[playerid][pAmmo9]);
    INI_Int("Ammo10", PlayerInfo[playerid][pAmmo10]);
    INI_Int("Ammo11", PlayerInfo[playerid][pAmmo11]);
    INI_Int("Ammo12", PlayerInfo[playerid][pAmmo12]);
    INI_Int("Ammo13", PlayerInfo[playerid][pAmmo13]);
    INI_Int("Ammo14", PlayerInfo[playerid][pAmmo14]);
    INI_Float("Health", PlayerInfo[playerid][pHealth]);
	INI_Int("BusinessMoney", PlayerInfo[playerid][BusinessMoney]);
	INI_Int("DriverLicense", PlayerInfo[playerid][pDriverLicense]);
	INI_Int("Age", PlayerInfo[playerid][pAge]);
	INI_Int("Gender", PlayerInfo[playerid][pGender]);
	INI_Int("InJail", PlayerInfo[playerid][pInJail]);
	INI_Int("InJailTime", PlayerInfo[playerid][pInJailTime]);
	INI_Int("Mask", PlayerInfo[playerid][pMask]);
	INI_Int("FightingStyle", PlayerInfo[playerid][pFightingStyle]);
	INI_Int("Boombox", PlayerInfo[playerid][pBoombox]);
	INI_Float("XPos", PlayerInfo[playerid][pXPos]);
	INI_Float("YPos", PlayerInfo[playerid][pYPos]);
	INI_Float("ZPos", PlayerInfo[playerid][pZPos]);
	INI_Int("Interior", PlayerInfo[playerid][pInterior]);
	INI_Int("VirtualWorld", PlayerInfo[playerid][pVirtualWorld]);
	INI_Int("Banned", PlayerInfo[playerid][pBanned]);
	INI_Int("Experience", PlayerInfo[playerid][pExperience]);
	INI_Int("Seeds", PlayerInfo[playerid][dSeeds]);
	INI_Int("Water", PlayerInfo[playerid][dWater]);
	INI_Int("Crashed", PlayerInfo[playerid][pCrashed]);
	INI_Float("CrashX", PlayerInfo[playerid][pCrashX]);
	INI_Float("CrashY", PlayerInfo[playerid][pCrashY]);
	INI_Float("CrashZ", PlayerInfo[playerid][pCrashZ]);
	INI_Int("CrashInt", PlayerInfo[playerid][pCrashInt]);
	INI_Int("CrashWorld", PlayerInfo[playerid][pCrashWorld]);
	INI_Int("PlayerOwnsHouse", PlayerInfo[playerid][pPlayerOwnsHouse]);
	INI_Int("WepLicense", PlayerInfo[playerid][pWepLicense]);
	INI_Int("Phone", PlayerInfo[playerid][pPhone]);
	INI_Int("Faction", PlayerInfo[playerid][pFaction]);
	INI_Int("Rank", PlayerInfo[playerid][fRank]);
	INI_Int("Fishes", PlayerInfo[playerid][pFishes]);
	INI_Int("Worms", PlayerInfo[playerid][pWorms]);
	INI_Int("FishingRod", PlayerInfo[playerid][pFishingRod]);
	INI_Int("PlayingHours", PlayerInfo[playerid][pPlayingHours]);
	INI_Int("Job", PlayerInfo[playerid][pJob]);
	INI_Int("Banned", PlayerInfo[playerid][pBanned]);
	INI_Int("TutorialDone", PlayerInfo[playerid][pTutorialDone]);
	INI_Int("GunRights", PlayerInfo[playerid][pGunRights]);
	INI_String("Note1", PlayerInfo[playerid][pNote1], 128);
	INI_String("Note2", PlayerInfo[playerid][pNote2], 128);
	INI_String("Note3", PlayerInfo[playerid][pNote3], 128);
	INI_String("Note4", PlayerInfo[playerid][pNote4], 128);
	INI_String("BannedIP", PlayerInfo[playerid][BannedIP], 22);
	INI_Int("Seeds", PlayerInfo[playerid][pSeeds]);
	INI_Int("Caller", PlayerInfo[playerid][pCaller]);
	INI_Int("Number", PlayerInfo[playerid][pNumber]);
	INI_Int("Year", PlayerInfo[playerid][pYear]);
	INI_Int("Month", PlayerInfo[playerid][pMonth]);
	INI_Int("Day", PlayerInfo[playerid][pDay]);
	INI_Int("Donator", PlayerInfo[playerid][pDonator]);
	INI_Int("BlockPM", PlayerInfo[playerid][pBlockPM]);
	INI_String("ForumName", PlayerInfo[playerid][pForumName], 46);
	INI_Int("Fname", PlayerInfo[playerid][pFname]);
	INI_Int("Jailed", PlayerInfo[playerid][pJailed]);
	INI_Int("Heroin", PlayerInfo[playerid][dHeroin]);
	INI_Int("Crack", PlayerInfo[playerid][dCrack]);
	INI_String("ActiveOffense", PlayerInfo[playerid][pActiveOffense], 128);
	INI_Int("ActiveOffenses", PlayerInfo[playerid][pActiveOffense]);
	INI_Int("UnActiveOffenses", PlayerInfo[playerid][pUnActiveOffenses]);
	INI_Int("Plate1", PlayerInfo[playerid][pPlate1]);
	INI_Int("Plate2", PlayerInfo[playerid][pPlate2]);
	INI_Int("Plate3", PlayerInfo[playerid][pPlate3]);
	INI_String("Name", PlayerInfo[playerid][pName], 24);
	INI_String("TicketReason1", PlayerInfo[playerid][pTicketReason1], 128);
	INI_String("TicketReason2", PlayerInfo[playerid][pTicketReason2], 128);
	INI_Int("Ticket1", PlayerInfo[playerid][pTicket1]);
	INI_Int("Ticket2", PlayerInfo[playerid][pTicket2]);
	INI_Int("TicketPrice1", PlayerInfo[playerid][pTicketPrice1]);
	INI_Int("TicketPrice2", PlayerInfo[playerid][pTicketPrice2]);
	INI_Int("Welfare", PlayerInfo[playerid][pWelfare]);
	INI_Int("WalkStyle", PlayerInfo[playerid][pWalkStyle]);
    return 1;
}


public LoadIP_data(playerid, name[], value[])
{
    INI_String("Ip", PlayerInfo[ playerid ][ BannedIP ], 33);
    return 1;
}

public loadbiz_data(idx, name[], value[])
{
    INI_Int("bOwned", BusinessInfo[idx][bOwned]);
    INI_Int("bPrice", BusinessInfo[idx][bPrice]);
    INI_String("bOwner", BusinessInfo[idx][bOwner], 24);
    INI_Int("bType", BusinessInfo[idx][bType]);
    INI_Int("bLocked", BusinessInfo[idx][bLocked]);
    INI_Int("bMoney", BusinessInfo[idx][bMoney]);
    INI_Float("bEntranceX", BusinessInfo[idx][bEntranceX]);
    INI_Float("bEntranceY", BusinessInfo[idx][bEntranceY]);
    INI_Float("bEntranceZ", BusinessInfo[idx][bEntranceZ]);
    INI_Float("bEntranceA", BusinessInfo[idx][bEntranceA]);
    INI_Float("bExitX", BusinessInfo[idx][bExitX]);
    INI_Float("bExitY", BusinessInfo[idx][bExitY]);
    INI_Float("bExitZ", BusinessInfo[idx][bExitZ]);
    INI_Float("bExitA", BusinessInfo[idx][bExitA]);
    INI_Int("bInt", BusinessInfo[idx][bInt]);
    INI_Int("bWorld", BusinessInfo[idx][bWorld]);
    INI_Int("bInsideInt", BusinessInfo[idx][bInsideInt]);
    INI_Int("bInsideWorld", BusinessInfo[idx][bInsideWorld]);
    INI_String("bName", BusinessInfo[idx][bName], 128);
    return 1;
}

public loadhouse_data(idx, name[], value[])
{
    INI_Int("hOwned", HouseInfo[idx][hOwned]);
    INI_Int("hPrice", HouseInfo[idx][hPrice]);
    INI_String("hOwner", HouseInfo[idx][hOwner], 24);
    INI_Int("hLocked", HouseInfo[idx][hLocked]);
    INI_Int("hMoney", HouseInfo[idx][hMoney]);
    INI_Float("hEntranceX", HouseInfo[idx][hEntranceX]);
    INI_Float("hEntranceY", HouseInfo[idx][hEntranceY]);
    INI_Float("hEntranceZ", HouseInfo[idx][hEntranceZ]);
    INI_Float("hEntranceA", HouseInfo[idx][hEntranceA]);
    INI_Float("hExitX", HouseInfo[idx][hExitX]);
    INI_Float("hExitY", HouseInfo[idx][hExitY]);
    INI_Float("hExitZ", HouseInfo[idx][hExitZ]);
    INI_Float("hExitA", HouseInfo[idx][hExitA]);
    INI_Int("hInt", HouseInfo[idx][hInt]);
    INI_Int("hWorld", HouseInfo[idx][hWorld]);
    INI_Int("hInsideInt", HouseInfo[idx][hInsideInt]);
    INI_Int("hInsideWorld", HouseInfo[idx][hInsideWorld]);
    INI_Int("hWeapon1", HouseInfo[idx][hWeapon1]);
    INI_Int("hWeapon2", HouseInfo[idx][hWeapon2]);
    INI_Int("hWeapon3", HouseInfo[idx][hWeapon3]);
    INI_Int("hWeapon4", HouseInfo[idx][hWeapon4]);
    INI_Int("hWeapon5", HouseInfo[idx][hWeapon5]);
    INI_Int("hWeapon6", HouseInfo[idx][hWeapon6]);
    INI_Int("hWeapon7", HouseInfo[idx][hWeapon7]);
    INI_Int("hWeapon8", HouseInfo[idx][hWeapon8]);
    INI_Int("hWeapon9", HouseInfo[idx][hWeapon9]);
    INI_Int("hWeapon10", HouseInfo[idx][hWeapon10]);
    INI_Int("hAmmo1", HouseInfo[idx][hAmmo1]);
    INI_Int("hAmmo2", HouseInfo[idx][hAmmo2]);
    INI_Int("hAmmo3", HouseInfo[idx][hAmmo3]);
    INI_Int("hAmmo4", HouseInfo[idx][hAmmo4]);
    INI_Int("hAmmo5", HouseInfo[idx][hAmmo5]);
    INI_Int("hAmmo6", HouseInfo[idx][hAmmo6]);
    INI_Int("hAmmo7", HouseInfo[idx][hAmmo7]);
    INI_Int("hAmmo8", HouseInfo[idx][hAmmo8]);
    INI_Int("hAmmo9", HouseInfo[idx][hAmmo9]);
    INI_Int("hAmmo10", HouseInfo[idx][hAmmo10]);
    INI_Int("hOutsideInt", HouseInfo[idx][hOutsideInt]);
    INI_Int("hOutsideWorld", HouseInfo[idx][hOutsideWorld]);
    INI_Int("hLSD", HouseInfo[idx][hLSD]);
    INI_Int("hCocaine", HouseInfo[idx][hCocaine]);
    INI_Int("hMarijuana", HouseInfo[idx][hMarijuana]);
    INI_Int("hMeth", HouseInfo[idx][hMeth]);
    INI_Int("hEcstasy", HouseInfo[idx][hEcstasy]);
    INI_Int("hHouseCP", HouseInfo[idx][HouseCP]);
    return 1;
}

public loadfaction_data(idx, name[], value[])
{
    INI_Int("Members", FactionInfo[idx][fMembers]);
    INI_Int("ID", FactionInfo[idx][fID]);
    INI_String("Leader", FactionInfo[idx][fLeader], 24);
    INI_String("Name", FactionInfo[idx][fName], 128);
    INI_String("Information", FactionInfo[idx][fInformation], 256);
    INI_String("Rank1", FactionInfo[idx][fRank1], 64);
    INI_String("Rank2", FactionInfo[idx][fRank2], 64);
    INI_String("Rank3", FactionInfo[idx][fRank3], 64);
    INI_String("Rank4", FactionInfo[idx][fRank4], 64);
    INI_String("Rank5", FactionInfo[idx][fRank5], 64);
    INI_String("Rank6", FactionInfo[idx][fRank6], 64);
    INI_Int("Type", FactionInfo[idx][fType]);
    return 1;
}

main()
{
	print(" _____________________");
	print(" San Jose Roleplay");
	print(" scripted by chrillzen");
	print(" ");
}

public OnGameModeInit()
{
	SetGameModeText("SJ-RP 1.1 r_4");
	DisableInteriorEnterExits();
	ShowPlayerMarkers(0);
	ManualVehicleEngineAndLights();
 	FadeInit();
	SetNameTagDrawDistance(18.0);
	ShowNameTags(1);
	EnableStuntBonusForAll(0);
	SetTimer("MoneyTimer", 2500, 1);
 	SetTimer("paytime", 60000, 1);
	SetTimer("JailTimer", 1000, 1);
	SetTimer("DMVTimer", 2500, 1);
	SetTimer("BUSTimer", 2500, 1);
	SetTimer("PizzaTimer", 2000, 1);
	SetTimer("GlobalSavery", 300000, 1);
	
	maintimer = SetTimer("MainTimer", 1000, true);
	speedotimer = SetTimer("Speedometer", 555, true);
	savetimer = SetTimer("SaveTimer", 2222, true);

	UpdateTimeAndWeather();
	SetTimer("UpdateTimeAndWeather", 1000 * 60, 1);
 	LimitGlobalChatRadius(20.0);
 	
 	// SJPD gates
 	
 	gate0 = CreateObject(968, 1544.69177, -1630.98474, 13.17190,   2.16000, 90.06000, 90.96000);
 	gate1 = CreateObject(971, 1588.60095, -1637.98071, 12.94264,   0.00000, 0.00000, -0.06000);

	Textdraw19 = TextDrawCreate(185.000000, 307.000000, "San Jose Role Play");
	TextDrawBackgroundColor(Textdraw19, 255);
	TextDrawFont(Textdraw19, 0);
	TextDrawLetterSize(Textdraw19, 1.020000, 3.699999);
	TextDrawColor(Textdraw19, -1);
	TextDrawSetOutline(Textdraw19, 1);
	TextDrawSetProportional(Textdraw19, 1);

 	txtTimeDisp = TextDrawCreate(605.0, 25.0, "00:00");
	TextDrawUseBox(txtTimeDisp, 0);
	TextDrawFont(txtTimeDisp, 3);
	TextDrawSetShadow(txtTimeDisp, 0);
    TextDrawSetOutline(txtTimeDisp, 2);
    TextDrawBackgroundColor(txtTimeDisp, 0x000000FF);
    TextDrawColor(txtTimeDisp, 0xFFFFFFFF);
    TextDrawAlignment(txtTimeDisp, 3);
	TextDrawLetterSize(txtTimeDisp, 0.5, 1.5);

	males = LoadModelSelectionMenu("males.txt");
	females = LoadModelSelectionMenu("females.txt");

	LoadVehicles();
	LoadDealerships();
	LoadFuelStations();
	
	for(new i=1; i < MAX_DVEHICLES; i++)
	{
		if(VehicleCreated[i] == 2)
		{
			VehicleWorld[i] = 100;
			SetVehiclePos(VehicleID[i], 154.8577, 213.5532, -0.4741);
			SaveVehicle(i);
		}
	}
	
	for(new i= 0; i < MAX_VEHICLES; i++)
	{
	    for(new ii = 0; ii < MAX_WINDOWS; ii++)
	    {
	        windows[i][ii] = 0;
	    }
	}
	
	for(new n = 0; n < MAX_OBJ; n++) dGunData[n][ObjID] = -1;
	
	new File:file = fopen("DroppedGuns.ini", io_read);
    if(file)
    {
        new buffer[256], FileCoords[7][20];
        for(new g = 0; g < MAX_OBJ; g++)
        {
            fread(file, buffer);
            split(buffer, FileCoords, ',');
            dGunData[g][ObjPos][0] = floatstr(FileCoords[0]);
			dGunData[g][ObjPos][1] = floatstr(FileCoords[1]);
			dGunData[g][ObjPos][2] = floatstr(FileCoords[2]);
			dGunData[g][ObjData][0] = strval(FileCoords[3]);
			dGunData[g][ObjData][1] = strval(FileCoords[4]);
			dGunData[g][ObjInt] = strval(FileCoords[5]);
			dGunData[g][ObjWorld] = strval(FileCoords[6]);
			if(dGunData[g][ObjData][0] > 0 && dGunData[g][ObjData][1] != 0 && dGunData[g][ObjPos][0] != 0)
			{
				dGunData[g][ObjID] = CreateDynamicObject(GunObjects[dGunData[g][ObjData][0]], dGunData[g][ObjPos][0], dGunData[g][ObjPos][1], dGunData[g][ObjPos][2]-1, 93.7, 120.0, 120.0, dGunData[g][ObjWorld], dGunData[g][ObjInt], -1, 200.0, 0.0);
				printf("* %s loaded: %f, %f, %f, ", GunNames[dGunData[g][ObjData][0]], dGunData[g][ObjPos][0], dGunData[g][ObjPos][1], dGunData[g][ObjPos][2]-1);
			}
        }
    }

	for(new i=1; i < MAX_DEALERSHIPS; i++)
	{
		UpdateDealership(i, 0);
	}
	for(new i=1; i < MAX_FUEL_STATIONS; i++)
	{
		UpdateFuelStation(i, 0);
	}

	for(new i=1; i < MAX_DVEHICLES; i++)
	{
		UpdateVehicle(i, 0);
		SetVehicleVirtualWorld(VehicleID[i], 100);
	}

	AddPlayerClass(26, 1742.9600, -1861.4019, 13.5776, 0.2426, 0, 0, 0, 0, 0, 0); // Civilian Spawn

	Textdraw0 = TextDrawCreate(650.000000, 80.000000, "asd");
	TextDrawBackgroundColor(Textdraw0, 255);
	TextDrawFont(Textdraw0, 1);
	TextDrawLetterSize(Textdraw0, 0.800000, -16.000000);
	TextDrawColor(Textdraw0, -1);
	TextDrawSetOutline(Textdraw0, 0);
	TextDrawSetProportional(Textdraw0, 1);
	TextDrawSetShadow(Textdraw0, 1);
	TextDrawUseBox(Textdraw0, 1);
	TextDrawBoxColor(Textdraw0, 255);
	TextDrawTextSize(Textdraw0, -50.000000, 0.000000);

	Textdraw1 = TextDrawCreate(650.000000, 524.000000, "asd");
	TextDrawBackgroundColor(Textdraw1, 255);
	TextDrawFont(Textdraw1, 1);
	TextDrawLetterSize(Textdraw1, 0.800000, -16.000000);
	TextDrawColor(Textdraw1, -1);
	TextDrawSetOutline(Textdraw1, 0);
	TextDrawSetProportional(Textdraw1, 1);
	TextDrawSetShadow(Textdraw1, 1);
	TextDrawUseBox(Textdraw1, 1);
	TextDrawBoxColor(Textdraw1, 255);
	TextDrawTextSize(Textdraw1, -50.000000, 0.000000);

	Textdraw2 = TextDrawCreate(6.000000, 391.000000, "Welcome to San Jose. This is where you'll be staying.");
	TextDrawBackgroundColor(Textdraw2, 255);
	TextDrawFont(Textdraw2, 1);
	TextDrawLetterSize(Textdraw2, 0.500000, 1.000000);
	TextDrawColor(Textdraw2, -1);
	TextDrawSetOutline(Textdraw2, 0);
	TextDrawSetProportional(Textdraw2, 1);
	TextDrawSetShadow(Textdraw2, 1);

	Textdraw3 = TextDrawCreate(5.000000, 405.000000, "This is your chance to find new friends, make money and maybe seek fame?");
	TextDrawBackgroundColor(Textdraw3, 255);
	TextDrawFont(Textdraw3, 1);
	TextDrawLetterSize(Textdraw3, 0.500000, 1.000000);
	TextDrawColor(Textdraw3, -1);
	TextDrawSetOutline(Textdraw3, 0);
	TextDrawSetProportional(Textdraw3, 1);
	TextDrawSetShadow(Textdraw3, 1);

	Textdraw4 = TextDrawCreate(6.000000, 419.000000, "Whatever you are looking for, you can find here.");
	TextDrawBackgroundColor(Textdraw4, 255);
	TextDrawFont(Textdraw4, 1);
	TextDrawLetterSize(Textdraw4, 0.500000, 1.000000);
	TextDrawColor(Textdraw4, -1);
	TextDrawSetOutline(Textdraw4, 0);
	TextDrawSetProportional(Textdraw4, 1);
	TextDrawSetShadow(Textdraw4, 1);

	Textdraw9 = TextDrawCreate(6.000000, 391.000000, "This is the bank of San Jose.");
	TextDrawBackgroundColor(Textdraw9, 255);
	TextDrawFont(Textdraw9, 1);
	TextDrawLetterSize(Textdraw9, 0.500000, 1.000000);
	TextDrawColor(Textdraw9, -1);
	TextDrawSetOutline(Textdraw9, 0);
	TextDrawSetProportional(Textdraw9, 1);
	TextDrawSetShadow(Textdraw9, 1);

	Textdraw10 = TextDrawCreate(5.000000, 405.000000, "We've already set up a bank account for you so you can use the bank.");
	TextDrawBackgroundColor(Textdraw10, 255);
	TextDrawFont(Textdraw10, 1);
	TextDrawLetterSize(Textdraw10, 0.500000, 1.000000);
	TextDrawColor(Textdraw10, -1);
	TextDrawSetOutline(Textdraw10, 0);
	TextDrawSetProportional(Textdraw10, 1);
	TextDrawSetShadow(Textdraw10, 1);

	Textdraw11 = TextDrawCreate(6.000000, 419.000000, "You will also find various ATM's that are located around San Jose.");
	TextDrawBackgroundColor(Textdraw11, 255);
	TextDrawFont(Textdraw11, 1);
	TextDrawLetterSize(Textdraw11, 0.500000, 1.000000);
	TextDrawColor(Textdraw11, -1);
	TextDrawSetOutline(Textdraw11, 0);
	TextDrawSetProportional(Textdraw11, 1);
	TextDrawSetShadow(Textdraw11, 1);

	Textdraw5 = TextDrawCreate(6.000000, 391.000000, "San Jose is not an innocent city. It's filled with illegal organizations.");
	TextDrawBackgroundColor(Textdraw5, 255);
	TextDrawFont(Textdraw5, 1);
	TextDrawLetterSize(Textdraw5, 0.500000, 1.000000);
	TextDrawColor(Textdraw5, -1);
	TextDrawSetOutline(Textdraw5, 0);
	TextDrawSetProportional(Textdraw5, 1);
	TextDrawSetShadow(Textdraw5, 1);

	Textdraw12 = TextDrawCreate(5.000000, 405.000000, "If you feel like working as a postman doesn't pay you enough, maybe");
	TextDrawBackgroundColor(Textdraw12, 255);
	TextDrawFont(Textdraw12, 1);
	TextDrawLetterSize(Textdraw12, 0.500000, 1.000000);
	TextDrawColor(Textdraw12, -1);
	TextDrawSetOutline(Textdraw12, 0);
	TextDrawSetProportional(Textdraw12, 1);
	TextDrawSetShadow(Textdraw12, 1);

	Textdraw13 = TextDrawCreate(6.000000, 419.000000, "you should consider taking contact with one of the associates.");
	TextDrawBackgroundColor(Textdraw13, 255);
	TextDrawFont(Textdraw13, 1);
	TextDrawLetterSize(Textdraw13, 0.500000, 1.000000);
	TextDrawColor(Textdraw13, -1);
	TextDrawSetOutline(Textdraw13, 0);
	TextDrawSetProportional(Textdraw13, 1);
	TextDrawSetShadow(Textdraw13, 1);

	Textdraw6 = TextDrawCreate(6.000000, 391.000000, "This is not just the city of angels, but also the city of broken souls.");
	TextDrawBackgroundColor(Textdraw6, 255);
	TextDrawFont(Textdraw6, 1);
	TextDrawLetterSize(Textdraw6, 0.500000, 1.000000);
	TextDrawColor(Textdraw6, -1);
	TextDrawSetOutline(Textdraw6, 0);
	TextDrawSetProportional(Textdraw6, 1);
	TextDrawSetShadow(Textdraw6, 1);

	Textdraw14 = TextDrawCreate(5.000000, 405.000000, "Out on the cold streets of L.A, people fall for drugs everyday.");
	TextDrawBackgroundColor(Textdraw14, 255);
	TextDrawFont(Textdraw14, 1);
	TextDrawLetterSize(Textdraw14, 0.500000, 1.000000);
	TextDrawColor(Textdraw14, -1);
	TextDrawSetOutline(Textdraw14, 0);
	TextDrawSetProportional(Textdraw14, 1);
	TextDrawSetShadow(Textdraw14, 1);

	Textdraw15 = TextDrawCreate(6.000000, 419.000000, "Will you become a victim of the drug or the one that hands it out?");
	TextDrawBackgroundColor(Textdraw15, 255);
	TextDrawFont(Textdraw15, 1);
	TextDrawLetterSize(Textdraw15, 0.500000, 1.000000);
	TextDrawColor(Textdraw15, -1);
	TextDrawSetOutline(Textdraw15, 0);
	TextDrawSetProportional(Textdraw15, 1);
	TextDrawSetShadow(Textdraw15, 1);

	Textdraw7 = TextDrawCreate(6.000000, 391.000000, "Just be careful, because you don't want to get caught by the police.");
	TextDrawBackgroundColor(Textdraw7, 255);
	TextDrawFont(Textdraw7, 1);
	TextDrawLetterSize(Textdraw7, 0.500000, 1.000000);
	TextDrawColor(Textdraw7, -1);
	TextDrawSetOutline(Textdraw7, 0);
	TextDrawSetProportional(Textdraw7, 1);
	TextDrawSetShadow(Textdraw7, 1);

	Textdraw16 = TextDrawCreate(5.000000, 405.000000, "You will find the Los Angeles Police patrol the streets 24/7.");
	TextDrawBackgroundColor(Textdraw16, 255);
	TextDrawFont(Textdraw16, 1);
	TextDrawLetterSize(Textdraw16, 0.500000, 1.000000);
	TextDrawColor(Textdraw16, -1);
	TextDrawSetOutline(Textdraw16, 0);
	TextDrawSetProportional(Textdraw16, 1);
	TextDrawSetShadow(Textdraw16, 1);

	Textdraw8 = TextDrawCreate(6.000000, 391.000000, "If you feel like getting a job then you should look for this building.");
	TextDrawBackgroundColor(Textdraw8, 255);
	TextDrawFont(Textdraw8, 1);
	TextDrawLetterSize(Textdraw8, 0.500000, 1.000000);
	TextDrawColor(Textdraw8, -1);
	TextDrawSetOutline(Textdraw8, 0);
	TextDrawSetProportional(Textdraw8, 1);
	TextDrawSetShadow(Textdraw8, 1);

	Textdraw17 = TextDrawCreate(5.000000, 405.000000, "This is Los Angeles's city hall, also home to the L.A court.");
	TextDrawBackgroundColor(Textdraw17, 255);
	TextDrawFont(Textdraw17, 1);
	TextDrawLetterSize(Textdraw17, 0.500000, 1.000000);
	TextDrawColor(Textdraw17, -1);
	TextDrawSetOutline(Textdraw17, 0);
	TextDrawSetProportional(Textdraw17, 1);
	TextDrawSetShadow(Textdraw17, 1);

	Textdraw18 = TextDrawCreate(6.000000, 419.000000, "This is the end of this introduction, we hope you enjoy your stay.");
	TextDrawBackgroundColor(Textdraw18, 255);
	TextDrawFont(Textdraw18, 1);
	TextDrawLetterSize(Textdraw18, 0.500000, 1.000000);
	TextDrawColor(Textdraw18, -1);
	TextDrawSetOutline(Textdraw18, 0);
	TextDrawSetProportional(Textdraw18, 1);
	TextDrawSetShadow(Textdraw18, 1);

	DMVcar[0] = AddStaticVehicleEx(405, 2052.4636, -1903.5298, 13.4219, 180.0858, 1, 1, 3600);
	DMVcar[1] = AddStaticVehicleEx(405, 2055.9736, -1903.4503, 13.4219, 180.6985, 1, 1, 3600);
	DMVcar[2] = AddStaticVehicleEx(405, 2059.2312, -1903.4906, 13.4219, 180.3023, 1, 1, 3600);
	DMVcar[3] = AddStaticVehicleEx(405, 2062.3936, -1903.4205, 13.4219, 180.2440, 1, 1, 3600);
	
	PizzaBoys[0] = AddStaticVehicleEx(448, 2106.5293, -1785.1632, 12.9860, 0.0407, 3, 6, 3600);
	PizzaBoys[1] = AddStaticVehicleEx(448, 2108.7112, -1785.1719, 12.9848, 358.1101, 3, 6, 3600);
	PizzaBoys[2] = AddStaticVehicleEx(448, 2111.2722, -1785.1394, 12.9855, 358.5421, 3, 6, 3600);
	PizzaBoys[3] = AddStaticVehicleEx(448, 2113.6055, -1785.1903, 12.9856, 1.0052, 3, 6, 3600);
	PizzaBoys[5] = AddStaticVehicleEx(448, 2116.1965, -1785.1897, 12.9862, 359.5552, 3, 6, 3600);
	PizzaBoys[6] = AddStaticVehicleEx(448, 2118.5806, -1785.2245, 12.9859, 0.3241, 3, 6, 3600);
	PizzaBoys[7] = AddStaticVehicleEx(448, 2121.2708, -1785.2086, 12.9850, 2.2487, 3, 6, 3600);

	JunkCar[0] = AddStaticVehicleEx(583, -1868.4041, -1608.0137, 21.3034, 182.1034, 0, 0, 3600);
	JunkCar[1] = AddStaticVehicleEx(583, -1863.4543, -1607.8223, 21.2983, 182.1892, 0, 0, 3600);
	JunkCar[2] = AddStaticVehicleEx(583, -1857.8374, -1607.6409, 21.3015, 180.8902, 0, 0, 3600);
	JunkCar[3] = AddStaticVehicleEx(583, -1851.1421, -1607.2748, 21.3014, 180.3037, 0, 0, 3600);
	JunkCar[4] = AddStaticVehicleEx(583, -1845.0913, -1614.2767, 21.3546, 92.7879, 0, 0, 3600);

	LumberCar[0] = AddStaticVehicleEx(478, -1996.1658, -2419.7610, 30.6128, 136.9073, 3, 3, 3600);
	LumberCar[1] = AddStaticVehicleEx(478, -1991.6777, -2423.6794, 30.6188, 136.7324, 3, 3, 3600);
	LumberCar[2] = AddStaticVehicleEx(478, -2014.7926, -2400.8118, 30.6159, 135.7548, 3, 3, 3600);
	LumberCar[3] = AddStaticVehicleEx(478, -1979.3551, -2424.3438, 30.6143, 225.2413, 3, 3, 3600);
	LumberCar[4] = AddStaticVehicleEx(478, -1974.0999, -2419.0122, 30.6123, 226.5291, 3, 3, 3600);
	
	GovCar[0] = AddStaticVehicleEx(409, 1456.6636, -1737.9438, 13.2600, 89.9706, 0, 0, 9999);
	GovCar[1] = AddStaticVehicleEx(421, 1467.6697, -1737.8412, 13.3417, 89.9079, 0, 0, 9999);
	GovCar[2] = AddStaticVehicleEx(490, 1479.1978, -1737.8795, 13.5891, 89.6892, 0, 0, 9999);
	GovCar[3] = AddStaticVehicleEx(490, 1489.9441, -1737.8263, 13.5885, 89.5790, 0, 0, 9999);
	GovCar[4] = AddStaticVehicleEx(411, 1501.0159, -1737.9515, 13.1890, 90.1078, 0, 0, 9999);

	PoliceCar[0] = AddStaticVehicleEx(596, 1587.5999800, -1710.0999800, 5.7000000, 0.0000000, 0, 1, 9999);
	PoliceCar[1] = AddStaticVehicleEx(596, 1583.0999800, -1709.9000200, 5.7000000, 0.0000000, 0, 1, 9999);
	PoliceCar[2] = AddStaticVehicleEx(596, 1578.4000200, -1709.6999500, 5.7000000, 0.0000000, 0, 1, 9999);
	PoliceCar[3] = AddStaticVehicleEx(596, 1574.5999800, -1710.0000000, 5.7000000, 0.0000000, 0, 1, 9999);
	PoliceCar[4] = AddStaticVehicleEx(596, 1570.4000200, -1709.8000500, 5.7000000, 0.0000000, 0, 1, 9999);
	PoliceCar[5] = AddStaticVehicleEx(596, 1559.0999800, -1709.5000000, 5.7000000, 0.0000000, 0, 1, 9999);
	PoliceCar[6] = AddStaticVehicleEx(427, 1543.0999800, -1655.0999800, 6.1000000, 90.0000000, 0, 1, 9999);
	PoliceCar[7] = AddStaticVehicleEx(523, 1586.8000500, -1680.6999500, 5.6000000, 259.9970000, 0, 1, 9999);
	PoliceCar[8] = AddStaticVehicleEx(523, 1587.0999800, -1678.0999800, 5.6000000, 259.9970000, 0, 1, 9999);
	PoliceCar[9] = AddStaticVehicleEx(596, 1591.5907, -1709.9507, 5.5418, 359.4343, 0, 1, 9999);
	PoliceCar[10] = AddStaticVehicleEx(597, 1595.6378, -1709.8231, 5.5896, 359.1721, 0, 1, 9999);
	PoliceCar[11] = AddStaticVehicleEx(597, 1601.8177, -1704.2489, 5.5896, 89.7676, 0, 1, 9999);
	PoliceCar[12] = AddStaticVehicleEx(597, 1601.6654, -1699.9897, 5.5892, 90.2941, 0, 1, 9999);
	PoliceCar[13] = AddStaticVehicleEx(597, 1601.5029, -1695.9509, 5.5896, 90.2484, 0, 1, 9999);
	PoliceCar[14] = AddStaticVehicleEx(525, 1601.7522, -1691.9392, 5.7621, 89.4434, 0, 1, 9999);
	PoliceCar[15] = AddStaticVehicleEx(525, 1601.8499, -1687.8292, 5.7691, 90.5176, 0, 1, 9999);
	PoliceCar[16] = AddStaticVehicleEx(490, 1601.9525, -1684.0092, 6.0180, 90.0773, 0, 0, 9999);
	PoliceCar[17] = AddStaticVehicleEx(490, 1601.9918, -1680.0156, 6.0180, 89.7418, 0, 0, 9999);
	PoliceCar[18] = AddStaticVehicleEx(490, 1602.0511, -1676.0481, 6.0181, 89.2224, 0, 0, 9999);
	PoliceCar[19] = AddStaticVehicleEx(490, 1602.1724, -1672.2495, 6.0209, 90.1867, 0, 0, 9999);
	PoliceCar[20] = AddStaticVehicleEx(599, 1527.7064, -1688.0886, 5.6992, 270.2528, 0, 1, 9999);
	PoliceCar[21] = AddStaticVehicleEx(599, 1527.7754, -1684.1202, 5.6994, 271.0569, 0, 1, 9999);
	PoliceCar[22] = AddStaticVehicleEx(599, 1527.5170, -1680.3099, 5.6998, 270.4409, 0, 1, 9999);
	PoliceCar[23] = AddStaticVehicleEx(599, 1527.3956, -1675.9982, 5.6989, 269.5003, 0, 1, 9999);
	PoliceCar[24] = AddStaticVehicleEx(426, 1526.6014, -1644.1724, 5.5443, 180.2435, 0, 0, 9999);
	PoliceCar[25] = AddStaticVehicleEx(426, 1530.3910, -1644.2627, 5.5458, 180.2151, 0, 0, 9999);
	PoliceCar[26] = AddStaticVehicleEx(560, 1534.6333, -1644.0167, 5.5954, 180.3756, 0, 0, 9999);
	PoliceCar[27] = AddStaticVehicleEx(560, 1538.6215, -1644.1488, 5.5953, 180.0531, 125, 125, 9999);
	PoliceCar[28] = AddStaticVehicleEx(415, 1546.3361, -1658.9797, 5.6603, 89.9763, 125, 125, 9999);
	PoliceCar[29] = AddStaticVehicleEx(541, 1546.3945, -1663.0026, 5.5154, 90.3709, 125, 125, 9999);
	PoliceCar[30] = AddStaticVehicleEx(601, 1546.1940, -1667.8892, 5.6494, 89.4596, 1, 1, 9999);
	PoliceCar[31] = AddStaticVehicleEx(427, 1543.1169, -1651.2930, 6.0226, 89.8087, 0, 1, 9999);

	LumberTree[0] = CreateObject(618, -2219.23193, -2165.13379, 41.66151,   0.00000, 0.00000, 0.00000);
	LumberTree[1] = CreateObject(618, -2215.63647, -2154.07959, 43.49667,   0.00000, 0.00000, 0.00000);
	LumberTree[2] = CreateObject(618, -2209.71729, -2142.16846, 45.55535,   0.00000, 0.00000, 0.00000);
	LumberTree[3] = CreateObject(618, -2197.78564, -2154.36914, 45.55535,   0.00000, 0.00000, 0.00000);
	LumberTree[4] = CreateObject(618, -2192.93359, -2141.94360, 47.62198,   0.00000, 0.00000, 0.00000);

	Pickup[0] = CreatePickup(1239, 1, 2045.0383, -1907.9384, 13.5469, -1);
	Pickup[1] = CreatePickup(1239, 1, 1684.4441, -1343.2681, 17.4371, -1);
	Pickup[2] = CreatePickup(1239, 1, 2316.6206, -15.2233, 26.7422, -1);
	Pickup[3] = CreatePickup(1239, 1, 772.2167, 5.2337, 1000.7802, -1);
	Pickup[4] = CreatePickup(1239, 1, 759.2585, -59.2561, 1000.7802, -1);
	Pickup[5] = CreatePickup(1274, 1, -23.5424, -55.6289, 1003.5469, -1);
	Pickup[6] = CreatePickup(1274, 1, -31.0680, -29.0295, 1003.5573, -1);
	Pickup[7] = CreatePickup(1274, 1, -22.2473, -138.6266, 1003.5469, -1);
	Pickup[8] = CreatePickup(1274, 1, -28.2207, -89.9549, 1003.5469, -1);
	Pickup[9] = CreatePickup(1239, 1, -2237.1465, 130.1773, 1035.4141, -1);
	Pickup[10] = CreatePickup(1239, 1, -1863.3596, -1623.5951, 21.9313, -1);
	Pickup[11] = CreatePickup(1239, 1, -2006.9303, -2400.5645, 34.9708, -1);
	Pickup[12] = CreatePickup(1239, 1, -2168.3079, -2324.6526, 30.6250, -1);
	Pickup[13] = CreatePickup(1239, 1, 331.8448, 1288.8008, 452.9749, -1);
	Pickup[14] = CreatePickup(1239, 1, -30.2784, -57.0121, 1003.5469, -1);
	Pickup[15] = CreatePickup(1239, 1, 442.3555, -105.1734, 999.5183, -1);
	Pickup[16] = CreatePickup(1239, 1, -2057.6660, -2464.8567, 31.1797, -1);
	Pickup[17] = CreatePickup(1239, 1, -2372.1272, -2824.8713, 6.9097, -1);
	Pickup[18] = CreatePickup(1239, 1, 1771.6489, -1909.2965, 13.5544, -1);
	Pickup[19] = CreatePickup(1239, 1, 388.1848, -2088.7964, 7.8359, -1);
	Pickup[20] = CreatePickup(1239, 1, 2109.7109, -1789.9832, 13.5547, -1);
	Pickup[21] = CreatePickup(1239, 1, 207.8300, -102.2150, 1005.2578, -1);
	Pickup[22] = CreatePickup(1239, 1, 1921.2236, -1863.3606, 13.5604, -1);
	
 	downtownbus = AddStaticVehicleEx(431, 1800.7993, -1930.7727, 13.4921, 359.2698, 75, 59, 3600);
    vehicle3Dtext[ downtownbus ] = Create3DTextLabel( ""COL_WHITE"Downtown Route", 0xFFFFFF, 0.0, 0.0, 0.0, 35.0, 0, 1 );
    //Creating the Vehicle
    //Attaching Text Label To Vehicle
    Attach3DTextLabelToVehicle( vehicle3Dtext[ downtownbus ] , downtownbus, 0.0, 6.4, 0.0);
    
   	southbus = AddStaticVehicleEx(431, 1787.7228, -1930.4010, 13.4879, 359.8754, 47, 74, 3600);
    vehicle3Dtext2[ southbus ] = Create3DTextLabel( ""COL_WHITE"South Suburban Route", 0xFFFFFF, 0.0, 0.0, 0.0, 35.0, 0, 1 );
    //Creating the Vehicle
    //Attaching Text Label To Vehicle
    Attach3DTextLabelToVehicle( vehicle3Dtext2[ southbus ] , southbus, 0.0, 6.4, 0.0);
    
   	westbus = AddStaticVehicleEx(431, 1794.1512, -1930.7767, 13.4919, 359.2610, 92, 72, 3600);
    vehicle3Dtext3[ westbus ] = Create3DTextLabel( ""COL_WHITE"East Suburban Route", 0xFFFFFF, 0.0, 0.0, 0.0, 35.0, 0, 1 );
    //Creating the Vehicle
    //Attaching Text Label To Vehicle
    Attach3DTextLabelToVehicle( vehicle3Dtext3[ westbus ] , westbus, 0.0, 6.4, 0.0);

	StoresRobbed[0] = 0;
	StoresRobbed[1] = 0;
	StoresRobbed[2] = 0;

	new fstring[256];

 	for(new idf = 1; idf < sizeof(FactionInfo); idf++)
    {
        format(fstring, sizeof(fstring), FPATH, idf);
        INI_ParseFile(fstring, "loadfaction_%s", .bExtra = true, .extra = idf );
	}

	new string[256];
 	new biztext[128];

    for(new idx = 1; idx < sizeof(BusinessInfo); idx++)
    {
	    format(string, sizeof(string), BPATH, idx);//formats the file path, with the biz ID
	    INI_ParseFile(string, "loadbiz_%s", .bExtra = true, .extra = idx );//This is very hard to explain, but it basically loads the info from the file(More in Y_Less y_ini tutorial.)
	    //BusinessInfo[idx][bOutsideIcon] = CreateDynamicPickup(1239, 1, BusinessInfo[idx][bEntranceX], BusinessInfo[idx][bEntranceY], BusinessInfo[idx][bEntranceZ], BusinessInfo[idx][bWorld]); //Creates a pickup at the business entrance.

		switch(BusinessInfo[idx][bType])
	 	{
		        	case 25: biztext = "Betting Shop";
		        	case 24: biztext = "Advertisement Center";
		            case 23: biztext = "Brothel";
		        	case 22: biztext = "Garage";
		            case 21: biztext = "Apartment Complex";
		 			case 20: biztext = "Dealership";
		 			case 19: biztext = "Electronic Store";
		   			case 18: biztext = "Ammu-Nation";
		   			case 17: biztext = "Gym";
		   			case 16: biztext = "Hotel";
		   			case 15: biztext = "Motel";
		   			case 14: biztext = "Diner";
		         	case 13: biztext = "Tattoo Shop";
		         	case 12: biztext = "Barbershop";
		            case 11: biztext = "Flower Store";
		           	case 10: biztext = "98 Cents";
		    		case 9: biztext = "69 Cents";
		            case 8: biztext = "Liqour Store";
			    	case 7: biztext = "Restaurant";
			    	case 6: biztext = "Bank";
			    	case 5: biztext = "Hospital";
			        case 4: biztext = "Police Station";
			        case 3: biztext = "24/7";
			        case 2: biztext = "Club";
			        case 1: biztext = "Bar";
			        case 0: biztext = "Clothes Shop";
	  	}
	    if(BusinessInfo[idx][bOwned] == 0)
	    {
	        format(string, sizeof(string), ""COL_WHITE"For Sale!\n"COL_BROWN"Price: "COL_WHITE"$%d\n"COL_BROWN"Type: "COL_WHITE"%s\n"COL_BROWN"Street Number: "COL_WHITE"%d", BusinessInfo[idx][bPrice], biztext, idx);
	        BusinessInfo[idx][DLabel] = Create3DTextLabel(string, 0xFFFFFF, BusinessInfo[idx][bEntranceX], BusinessInfo[idx][bEntranceY], BusinessInfo[idx][bEntranceZ], 25.0, 0, 1);
	    }
	    else if(BusinessInfo[idx][bOwned] == 1)
	    {
	        format(string, sizeof(string), ""COL_BROWN"Name: "COL_WHITE"%s\n"COL_BROWN"Type: "COL_WHITE"%s\n"COL_BROWN"Street Number: "COL_WHITE"%d", BusinessInfo[idx][bName], biztext, idx);
	        BusinessInfo[idx][DLabel] = Create3DTextLabel(string, 0xFFFFFF,  BusinessInfo[idx][bEntranceX], BusinessInfo[idx][bEntranceY], BusinessInfo[idx][bEntranceZ], 25.0, 0, 1);
	    }
	}

	for(new idz = 1; idz < sizeof(HouseInfo); idz++)
    {
	    format(string, sizeof(string), HPATH, idz);
	    INI_ParseFile(string, "loadhouse_%s", .bExtra = true, .extra = idz );

	    if(HouseInfo[idz][hOwned] == 0)
	    {
	        format(string, sizeof(string), ""COL_WHITE"For Sale!\n"COL_BROWN"Price: "COL_WHITE"$%d\n"COL_BROWN"Number: "COL_WHITE"%d", HouseInfo[idz][hPrice], idz);
	        HouseInfo[idz][hDLabel] = Create3DTextLabel(string, 0xFFFFFF, HouseInfo[idz][hEntranceX], HouseInfo[idz][hEntranceY], HouseInfo[idz][hEntranceZ], 25.0, HouseInfo[idz][hWorld], 1);
    	    //HouseInfo[idz][hOutsideIcon] = CreateDynamicPickup(1273, 1, HouseInfo[idz][hEntranceX], HouseInfo[idz][hEntranceY], HouseInfo[idz][hEntranceZ], HouseInfo[idz][hWorld]);
	    }
     	else if(HouseInfo[idz][hOwned] == 1)
	    {
	        format(string, sizeof(string), " ", idz);
	        HouseInfo[idz][hDLabel] = Create3DTextLabel(string, 0xFFFFFF,  HouseInfo[idz][hEntranceX], HouseInfo[idz][hEntranceY], HouseInfo[idz][hEntranceZ], 25.0, HouseInfo[idz][hWorld], 1);
    	    //HouseInfo[idz][hOutsideIcon] = CreateDynamicPickup(1272, 1, HouseInfo[idz][hEntranceX], HouseInfo[idz][hEntranceY], HouseInfo[idz][hEntranceZ], HouseInfo[idz][hWorld]);
	    }
	}
	
	// Dealership
	CreateDynamicObject(8435, 332.0908800, 1299.9794900, 448.4752500, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19353, 344.5591400, 1296.7412100, 453.6435900, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19353, 344.5537100, 1293.5379600, 453.6435900, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19353, 344.5331100, 1290.3773200, 453.6435900, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19353, 344.5293300, 1287.2370600, 453.6435900, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19353, 344.5254500, 1284.1368400, 453.6435900, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19353, 344.5182500, 1280.9965800, 453.6435900, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19353, 342.8738400, 1279.8029800, 453.6435900, 0.0000000, 0.0000000, -90.0000000); //
	CreateDynamicObject(19353, 339.6969600, 1279.8075000, 453.6435900, 0.0000000, 0.0000000, -90.0000000); //
	CreateDynamicObject(19353, 336.6169100, 1279.7817400, 453.6435900, 0.0000000, 0.0000000, -90.0000000); //
	CreateDynamicObject(19353, 333.5164500, 1279.8159200, 453.6435900, 0.0000000, 0.0000000, -90.0000000); //
	CreateDynamicObject(19353, 330.3436300, 1279.8071300, 453.6435900, 0.0000000, 0.0000000, -90.0000000); //
	CreateDynamicObject(19353, 328.8477800, 1281.4768100, 453.6435900, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19353, 328.8603800, 1284.5858200, 453.6435900, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19353, 328.8415500, 1287.7310800, 453.6435900, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19353, 328.8581800, 1290.7725800, 453.6435900, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19353, 328.8305400, 1296.6348900, 453.6435900, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19383, 328.8436000, 1293.6720000, 453.6401400, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1556, 328.7863200, 1292.9444600, 451.8860200, 0.0000000, 0.0000000, 90.2400100); //
	CreateDynamicObject(3281, 328.9873400, 1287.8029800, 454.6429100, 0.0000000, 0.0000000, 90.5400000); //
	CreateDynamicObject(3465, 331.7112400, 1280.4271200, 453.2884200, 0.0000000, 0.0000000, 89.2799900); //
	CreateDynamicObject(3465, 335.9934700, 1280.4139400, 453.2884200, 0.0000000, 0.0000000, 89.2799900); //
	CreateDynamicObject(2914, 344.2162200, 1289.5054900, 454.0192000, 0.0000000, 0.0000000, 89.1000200); //
	CreateDynamicObject(2914, 344.3797300, 1286.7127700, 454.0192000, 0.0000000, 0.0000000, 89.1000200); //
	CreateDynamicObject(2403, 339.0202600, 1285.2000700, 451.9643900, 0.0000000, 0.0000000, -90.5999500); //
	CreateDynamicObject(2467, 343.9333500, 1289.5247800, 451.9665500, 0.0000000, 0.0000000, 267.7199100); //
	CreateDynamicObject(2620, 331.2359300, 1290.1842000, 452.7216500, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2620, 329.1922900, 1296.4688700, 452.7216500, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2698, 333.8948100, 1280.9885300, 452.8956900, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1840, 329.3793000, 1280.0295400, 454.7537500, 0.0000000, 0.0000000, -90.8000000); //
	CreateDynamicObject(1840, 343.3932800, 1282.3037100, 454.7962300, 0.0000000, 0.0000000, -43.8800100); //
	CreateDynamicObject(1840, 342.3751200, 1281.0704300, 454.7962300, 0.0000000, 0.0000000, -62.1800100); //
	CreateDynamicObject(1840, 341.6473700, 1280.6140100, 454.7962300, 0.0000000, 0.0000000, -68.6600000); //
	CreateDynamicObject(1840, 342.8822000, 1281.7282700, 454.7962300, 0.0000000, 0.0000000, -50.3000100); //
	CreateDynamicObject(19353, 342.9647500, 1296.4022200, 453.6435900, 0.0000000, 0.0000000, -90.0000000); //
	CreateDynamicObject(19383, 341.4519300, 1298.0756800, 453.6401400, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2739, 344.0070200, 1299.2033700, 451.9693000, 0.0000000, 0.0000000, -92.3400500); //
	CreateDynamicObject(2738, 344.0344500, 1297.1661400, 452.5477300, 0.0000000, 0.0000000, -88.5600100); //
	CreateDynamicObject(19353, 343.1228600, 1299.5806900, 453.6435900, 0.0000000, 0.0000000, -90.0000000); //
	CreateDynamicObject(2713, 344.0693100, 1299.3138400, 452.0888400, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2852, 342.6175200, 1298.1356200, 451.9703400, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1491, 341.4795500, 1297.3302000, 451.9673200, 0.0000000, 0.0000000, 89.7000400); //
	CreateDynamicObject(1008, 343.8312400, 1289.1439200, 452.9765600, 0.0000000, 0.0000000, 92.9400000); //
	CreateDynamicObject(1010, 343.7824400, 1289.2622100, 452.5804400, 0.0000000, 0.0000000, 89.5200300); //
	CreateDynamicObject(1116, 344.4490700, 1291.5689700, 454.1434600, 0.0000000, 0.0000000, 88.5000000); //
	CreateDynamicObject(1115, 344.3876600, 1293.8831800, 454.1235000, 0.0000000, 0.0000000, 90.2399800); //
	CreateDynamicObject(1139, 343.2495100, 1283.7943100, 452.8186600, 0.0000000, 0.0000000, 69.4799900); //
	CreateDynamicObject(1138, 341.6160600, 1281.4753400, 452.8452800, 0.0000000, 0.0000000, 32.4599900); //
	CreateDynamicObject(1166, 343.9069200, 1283.3808600, 455.0475200, 0.0000000, 0.0000000, 66.9600100); //
	CreateDynamicObject(1840, 340.8423800, 1280.1989700, 454.7962300, 0.0000000, 0.0000000, -66.6799900); //
	CreateDynamicObject(1238, 331.1434900, 1289.4174800, 453.2226600, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2467, 343.8900500, 1291.8049300, 451.9665500, 0.0000000, 0.0000000, 268.4398800); //
	CreateDynamicObject(2467, 343.8224500, 1294.0831300, 451.9665500, 0.0000000, 0.0000000, 268.4398800); //
	CreateDynamicObject(2412, 329.1032700, 1293.0611600, 451.9706400, 0.0000000, 0.0000000, 89.8200000); //
	CreateDynamicObject(2412, 328.9962500, 1295.0084200, 451.9706400, 0.0000000, 0.0000000, 89.8200000); //
	CreateDynamicObject(2376, 336.5206600, 1288.1937300, 451.9204700, 0.0000000, 0.0000000, 270.6599700); //
	CreateDynamicObject(2491, 329.6375100, 1298.1927500, 451.9709500, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2626, 331.0559700, 1288.6943400, 452.3713100, 0.0000000, 0.0000000, 88.1400000); //
	CreateDynamicObject(1215, 336.7837800, 1288.4957300, 452.7261700, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1215, 336.8479900, 1285.6383100, 452.7261700, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19448, 342.8298300, 1284.5354000, 455.4490100, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19448, 339.3296500, 1284.5415000, 455.4490100, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19448, 335.8698400, 1284.5489500, 455.4490100, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19448, 332.3696900, 1284.5750700, 455.4490100, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19448, 328.8687100, 1284.5820300, 455.4490100, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19448, 328.9167200, 1294.2227800, 455.4490100, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19448, 332.4024700, 1294.2142300, 455.4490100, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19448, 335.8826900, 1294.2100800, 455.4490100, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19448, 339.3827200, 1294.2061800, 455.4490100, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19448, 342.8828100, 1294.2225300, 455.4490100, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19448, 342.8798500, 1303.8475300, 455.4490100, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19448, 339.3769200, 1303.8459500, 455.4490100, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19448, 335.8903200, 1303.8413100, 455.4490100, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19448, 332.4101900, 1303.8343500, 455.4490100, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19448, 328.9100600, 1303.8540000, 455.4490100, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19353, 339.8038000, 1299.6651600, 453.6435900, 0.0000000, 0.0000000, -90.0000000); //
	CreateDynamicObject(19353, 336.6466700, 1299.6700400, 453.6435900, 0.0000000, 0.0000000, -90.0000000); //
	CreateDynamicObject(19353, 333.4669800, 1299.6694300, 453.6435900, 0.0000000, 0.0000000, -90.0000000); //
	CreateDynamicObject(19353, 330.4586800, 1299.6812700, 453.6435900, 0.0000000, 0.0000000, -90.0000000); //
	CreateDynamicObject(19353, 344.5618300, 1299.8924600, 453.6435900, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19353, 328.8273900, 1299.8359400, 453.6435900, 0.0000000, 0.0000000, 0.0000000); //

	// Jefferson Motel

	CreateDynamicObject(3029, 2243.0302700, -1160.5687300, 1028.4548300, 0.0000000, 0.0000000, -0.1200000); //
	CreateDynamicObject(3029, 2239.3723100, -1158.8997800, 1028.4548300, 0.0000000, 0.0000000, -179.5800200); //
	CreateDynamicObject(3029, 2242.9633800, -1160.5305200, 1028.4548300, 0.0000000, 0.0000000, 183.3599700); //
	CreateDynamicObject(3029, 2239.4497100, -1158.9626500, 1028.4548300, 0.0000000, 0.0000000, 1.1400000); //
	CreateDynamicObject(3029, 2239.3264200, -1169.9389600, 1028.4548300, 0.0000000, 0.0000000, 180.5999500); //
	CreateDynamicObject(3029, 2239.3496100, -1170.1763900, 1028.4548300, 0.0000000, 0.0000000, 360.1800500); //
	CreateDynamicObject(3029, 2226.4074700, -1186.8375200, 1028.4572800, 0.0000000, 0.0000000, 88.6200600); //
	CreateDynamicObject(3029, 2226.3662100, -1186.8772000, 1028.4572800, 0.0000000, 0.0000000, 268.8600200); //
	CreateDynamicObject(3029, 2208.7299800, -1190.5177000, 1028.3612100, 0.0000000, 0.0000000, -91.0800100); //
	CreateDynamicObject(3029, 2209.4084500, -1190.4642300, 1028.3612100, 0.0000000, 0.0000000, 90.0600000); //
	CreateDynamicObject(3029, 2195.0620100, -1173.8420400, 1028.3165300, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(3029, 2195.0283200, -1173.5815400, 1028.3165300, 0.0000000, 0.0000000, 178.6200300); //
	CreateDynamicObject(3029, 2191.3176300, -1156.1649200, 1028.3769500, 0.0000000, 0.0000000, 179.8799300); //
	CreateDynamicObject(3029, 2191.3740200, -1156.6237800, 1028.3769500, 0.0000000, 0.0000000, 359.9998200); //
	CreateDynamicObject(3029, 2195.0493200, -1157.8230000, 1028.3962400, 0.0000000, 0.0000000, -0.5400000); //
	CreateDynamicObject(3029, 2195.0075700, -1157.4436000, 1028.3962400, 0.0000000, 0.0000000, 178.0200700); //


	// Apartment Complex
	CreateDynamicObject(19340, 257.3740500, 1722.6127900, 381.5542000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19340, 259.9447000, 1759.2327900, 394.0711400, 180.2398500, 2.4600000, -94.1400500); //
	CreateDynamicObject(3943, 218.8687100, 1810.9188200, 389.7990100, 0.0000000, 0.0000000, -179.9400600); //
	CreateDynamicObject(1349, 211.7506100, 1810.2641600, 386.9936500, 0.0000000, 0.0000000, 113.7600200); //
	CreateDynamicObject(1265, 211.2954900, 1813.8129900, 386.7881500, 0.0000000, 0.0000000, 77.4600000); //
	CreateDynamicObject(1347, 212.2411300, 1815.2043500, 387.0468100, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19437, 217.4177600, 1805.7771000, 386.6796000, 0.0000000, 0.0000000, -3.9000000); //
	CreateDynamicObject(19437, 217.3082000, 1804.2423100, 386.6796000, 0.0000000, 0.0000000, -3.9000000); //
	CreateDynamicObject(19437, 216.3852200, 1803.5379600, 386.6796000, 0.0000000, 0.0000000, -93.4199900); //
	CreateDynamicObject(19437, 219.4436500, 1805.6607700, 386.6796000, 0.0000000, 0.0000000, 1.2600000); //
	CreateDynamicObject(19437, 219.4477500, 1804.0628700, 386.6796000, 0.0000000, 0.0000000, -0.4800000); //
	CreateDynamicObject(19437, 220.2902800, 1803.3692600, 386.6796000, 0.0000000, 0.0000000, 92.6399900); //
	CreateDynamicObject(19437, 215.4802100, 1802.7230200, 386.6796000, 0.0000000, 0.0000000, -2.7000000); //
	CreateDynamicObject(19437, 215.3977800, 1801.1776100, 386.6796000, 0.0000000, 0.0000000, -2.7000000); //
	CreateDynamicObject(19437, 215.3279700, 1799.5784900, 386.6796000, 0.0000000, 0.0000000, -2.7000000); //
	CreateDynamicObject(19437, 215.2522600, 1797.9790000, 386.6796000, 0.0000000, 0.0000000, -2.7000000); //
	CreateDynamicObject(19437, 215.1921700, 1796.3886700, 386.6796000, 0.0000000, 0.0000000, -2.7000000); //
	CreateDynamicObject(19437, 215.1299300, 1794.8239700, 386.6796000, 0.0000000, 0.0000000, -2.7000000); //
	CreateDynamicObject(19437, 221.1387300, 1802.5161100, 386.6796000, 0.0000000, 0.0000000, 0.9000000); //
	CreateDynamicObject(19437, 221.1794400, 1800.9357900, 386.6796000, 0.0000000, 0.0000000, 0.9000000); //
	CreateDynamicObject(19437, 221.1955000, 1799.3388700, 386.6796000, 0.0000000, 0.0000000, 0.9000000); //
	CreateDynamicObject(19437, 221.2398700, 1797.7584200, 386.6796000, 0.0000000, 0.0000000, 0.9000000); //
	CreateDynamicObject(19437, 222.0206600, 1797.0700700, 386.6796000, 0.0000000, 0.0000000, 90.2399900); //
	CreateDynamicObject(19437, 223.6176300, 1797.0843500, 386.6796000, 0.0000000, 0.0000000, 90.2399900); //
	CreateDynamicObject(19437, 225.1863900, 1797.0964400, 386.6796000, 0.0000000, 0.0000000, 90.2399900); //
	CreateDynamicObject(19437, 226.7657600, 1797.1081500, 386.6796000, 0.0000000, 0.0000000, 90.2399900); //
	CreateDynamicObject(19437, 227.4797800, 1796.2554900, 386.6796000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19437, 227.4769300, 1794.6995800, 386.6796000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19437, 227.4681900, 1794.1400100, 386.6796000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19437, 226.5679900, 1793.4101600, 386.6796000, 0.0000000, 0.0000000, 89.8799800); //
	CreateDynamicObject(19437, 225.0648000, 1793.4028300, 386.6796000, 0.0000000, 0.0000000, 90.3599800); //
	CreateDynamicObject(19437, 223.4755200, 1793.3715800, 386.6796000, 0.0000000, 0.0000000, 90.3599800); //
	CreateDynamicObject(19437, 221.8970300, 1793.3662100, 386.6796000, 0.0000000, 0.0000000, 90.3599800); //
	CreateDynamicObject(1498, 221.0653500, 1802.2747800, 385.3396900, 0.0000000, 0.0000000, 270.8999900); //
	CreateDynamicObject(1498, 221.1143000, 1799.6058300, 385.3396900, 0.0000000, 0.0000000, 270.4800100); //
	CreateDynamicObject(1498, 227.4138500, 1796.0136700, 385.3396900, 0.0000000, 0.0000000, 269.8800400); //
	CreateDynamicObject(1498, 223.5983600, 1793.4257800, 385.3396900, 0.0000000, 0.0000000, 179.5799900); //
	CreateDynamicObject(1498, 224.0554700, 1797.0305200, 385.3396900, 0.0000000, 0.0000000, 0.6600000); //
	CreateDynamicObject(630, 226.4596400, 1793.8267800, 386.2939100, 0.0000000, 0.0000000, 30.8400000); //
	CreateDynamicObject(1338, 224.2803200, 1793.9929200, 385.9936500, 0.0000000, 0.0000000, 184.2599900); //
	CreateDynamicObject(1347, 222.0004400, 1796.5644500, 385.8358800, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1440, 216.3195600, 1801.7941900, 385.8148200, 0.0000000, 0.0000000, 86.1600100); //
	CreateDynamicObject(1415, 215.9336900, 1799.0964400, 385.3215900, 0.0000000, 0.0000000, 87.4800100); //
	CreateDynamicObject(1498, 212.8176900, 1817.8737800, 386.5834000, 0.0000000, 0.0000000, 363.0595700); //
	CreateDynamicObject(1498, 214.5808400, 1812.7343800, 386.4421100, 0.0000000, 0.0000000, 270.1799000); //
	CreateDynamicObject(19437, 220.3054000, 1793.3485100, 386.6796000, 0.0000000, 0.0000000, 90.3599800); //
	CreateDynamicObject(19437, 218.7159400, 1793.3276400, 386.6796000, 0.0000000, 0.0000000, 90.3599800); //
	CreateDynamicObject(19437, 217.1496700, 1793.3227500, 386.6796000, 0.0000000, 0.0000000, 90.3599800); //
	CreateDynamicObject(19437, 215.5958100, 1793.3378900, 386.6796000, 0.0000000, 0.0000000, 89.2800100); //
	CreateDynamicObject(19437, 215.0922100, 1793.3082300, 386.6796000, 0.0000000, 0.0000000, -0.1800000); //
	CreateDynamicObject(1498, 215.3252300, 1795.2175300, 385.3396900, 0.0000000, 0.0000000, 88.3200000); //
	CreateDynamicObject(5374, 229.5968900, 1799.7640400, 395.6853000, 0.0000000, 0.0000000, -90.0600300); //
	CreateDynamicObject(5374, 186.0025600, 1803.8795200, 396.2558300, 0.0000000, 0.0000000, -92.3400500); //
	CreateDynamicObject(5374, 246.7700500, 1832.6452600, 394.4044800, 0.0000000, 0.0000000, 85.8599900); //
	CreateDynamicObject(19437, 217.4549000, 1806.3696300, 386.6796000, 0.0000000, 0.0000000, -3.9000000); //
	CreateDynamicObject(19437, 219.4082500, 1807.1872600, 386.6796000, 0.0000000, 0.0000000, 1.2600000); //
	CreateDynamicObject(19437, 219.3724700, 1808.7600100, 386.6796000, 0.0000000, 0.0000000, 1.2600000); //
	CreateDynamicObject(19437, 219.3390800, 1810.1567400, 386.6796000, 0.0000000, 0.0000000, 1.2600000); //
	CreateDynamicObject(19437, 218.3991500, 1809.5609100, 386.6796000, 0.0000000, 0.0000000, 90.5400200); //
	CreateDynamicObject(19437, 219.9608000, 1809.5957000, 386.6796000, 0.0000000, 0.0000000, 90.5400200); //
	CreateDynamicObject(19377, 222.7504600, 1807.4428700, 388.3694500, 2.4000000, 90.9000100, 177.7802000); //
	CreateDynamicObject(3943, 222.0890200, 1815.1873800, 394.1896100, 0.0000000, 0.0000000, -451.6797200); //
	CreateDynamicObject(19437, 223.1580400, 1812.8035900, 391.4076500, 0.0000000, 0.0000000, -91.4400700); //
	CreateDynamicObject(1498, 220.4083700, 1810.8890400, 390.9189100, 0.0000000, 0.0000000, 719.1596700); //
	CreateDynamicObject(1498, 214.9223900, 1810.8743900, 390.9189100, 0.0000000, 0.0000000, 809.6996500); //
	CreateDynamicObject(1347, 222.9074600, 1807.5260000, 391.4030500, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(854, 225.1658600, 1808.4118700, 391.0083300, 0.0000000, 0.0000000, 9.2400000); //
	CreateDynamicObject(1438, 216.1674000, 1808.9954800, 390.8339800, 0.0000000, 0.0000000, -275.7003500); //
	CreateDynamicObject(1264, 219.1369000, 1807.6770000, 391.1793200, 0.0000000, 0.0000000, -102.1200000); //
	CreateDynamicObject(1429, 216.8537900, 1808.9206500, 391.6258900, 0.0000000, 0.0000000, 109.8000100); //
	CreateDynamicObject(1338, 216.0303000, 1821.6202400, 394.7470400, 0.0000000, 0.0000000, 336.2400800); //
	CreateDynamicObject(1496, 219.8911100, 1806.7431600, 390.9064600, 0.0000000, 0.0000000, -4.0200000); //
	CreateDynamicObject(3943, 218.4357300, 1818.9126000, 398.5694300, 0.0000000, 0.0000000, -361.2602200); //
	CreateDynamicObject(19437, 220.3124500, 1822.9631300, 395.8359100, 0.0000000, 0.0000000, -2.6400800); //
	CreateDynamicObject(19437, 212.2531000, 1817.1650400, 400.1673000, 0.0000000, 0.0000000, -91.0800700); //
	CreateDynamicObject(19437, 213.2296300, 1817.1445300, 400.1673000, 0.0000000, 0.0000000, -91.0800700); //
	CreateDynamicObject(1496, 211.6406600, 1817.0449200, 398.4552300, 0.0000000, 0.0000000, -1.0800100); //
	CreateDynamicObject(1369, 226.0438700, 1819.3653600, 395.8085000, 0.0000000, 0.0000000, -3.7200000); //
	CreateDynamicObject(1415, 221.0738400, 1815.0064700, 395.2978500, 0.0000000, 0.0000000, -1.6200000); //
	CreateDynamicObject(1498, 225.2928900, 1814.1013200, 395.2525600, 0.0000000, 0.0000000, 629.2795400); //
	CreateDynamicObject(1498, 223.8034100, 1811.7465800, 395.3464100, 0.0000000, 0.0000000, 539.2194200); //
	CreateDynamicObject(1498, 222.7621600, 1817.1849400, 395.2525600, 0.0000000, 0.0000000, 808.7398100); //
	CreateDynamicObject(1572, 223.2081900, 1816.3166500, 395.7973600, 0.0000000, 0.0000000, -0.5400000); //
	CreateDynamicObject(2690, 225.9329500, 1815.5106200, 396.1645200, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2690, 224.1140100, 1808.2456100, 392.1947000, 0.0000000, 0.0000000, -6.0599900); //
	CreateDynamicObject(1726, 211.8712600, 1812.2706300, 398.4176900, 0.0000000, 0.0000000, 88.5600000); //
	CreateDynamicObject(633, 211.7607400, 1815.0518800, 399.4139400, 0.0000000, 0.0000000, 0.0000000); //


	// Caravan Fix

	CreateDynamicObject(971, -0.1341600, 4.1799200, 998.3842800, 90.2999900, 34.3800000, -34.9199900); //
	CreateDynamicObject(971, -0.2002200, -2.9703000, 998.3842800, 90.2999900, 34.3800000, -34.9199900); //
	CreateDynamicObject(971, -676.9613600, -8454.0839800, -4528.1577100, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(971, -1.9582300, -2.3012800, 998.3838500, 0.0000000, 0.0000000, 89.5799800); //
	CreateDynamicObject(971, -1.8794900, 6.6003300, 998.3838500, 0.0000000, 0.0000000, 89.5799800); //
	CreateDynamicObject(971, -0.7628800, 9.3525600, 998.3838500, 0.0000000, 0.0000000, 89.5799800); //
	CreateDynamicObject(971, 0.4124900, 7.5379400, 998.3838500, 0.0000000, 0.0000000, 0.2999800); //
	CreateDynamicObject(971, 2.4554300, 5.9351000, 998.3838500, 0.0000000, 0.0000000, -88.2000200); //
	CreateDynamicObject(971, -0.8051400, -6.2949300, 998.3838500, 0.0000000, 0.0000000, -179.8199600); //
	CreateDynamicObject(971, 2.4799500, -2.0798000, 998.3838500, 0.0000000, 0.0000000, -90.2400100); //
	CreateDynamicObject(971, -5.2174900, 5.4391400, 998.3838500, 0.0000000, 0.0000000, 0.2999800); //
	
	// Gant Bridge Caf� fix

	CreateDynamicObject(969, 452.5762600, -111.7280000, 998.5183100, -90.8400300, 2.2200100, 2.2200000); //
	CreateDynamicObject(969, 452.6145900, -108.5784000, 998.4803500, -90.0600300, 1.8000100, 2.2200000); //
	CreateDynamicObject(969, 452.6023600, -105.3908200, 998.4803500, -90.0600300, 1.8000100, 2.2200000); //
	CreateDynamicObject(969, 443.7336700, -105.4658400, 998.4803500, -90.0600300, 1.8000100, 2.2200000); //
	CreateDynamicObject(969, 434.8947800, -105.5277800, 998.4803500, -90.0600300, 1.8000100, 2.2200000); //
	CreateDynamicObject(969, 443.7084000, -111.7858700, 998.5183100, -90.8400300, 2.2200100, 2.2200000); //
	CreateDynamicObject(969, 434.8173200, -111.7847500, 998.5183100, -90.8400300, 2.2200100, 2.2200000); //
	CreateDynamicObject(969, 443.7536900, -108.7343500, 998.4803500, -90.0600300, 1.8000100, 2.2200000); //
	CreateDynamicObject(969, 434.8877600, -108.6875300, 998.4803500, -90.0600300, 1.8000100, 2.2200000); //
	CreateDynamicObject(971, 456.7905300, -111.7041900, 1001.1347700, 0.0000000, 0.0000000, -0.3600000); //
	CreateDynamicObject(971, 447.9525100, -111.6732300, 1001.1347700, 0.0000000, 0.0000000, -0.3600000); //
	CreateDynamicObject(971, 439.0686000, -111.6279900, 1001.1347700, 0.0000000, 0.0000000, -0.3600000); //
	CreateDynamicObject(971, 441.8540000, -107.5155300, 1001.1347700, 0.0000000, 0.0000000, -89.2200200); //
	CreateDynamicObject(971, 446.0572800, -103.4736300, 1001.1347700, 0.0000000, 0.0000000, -0.3600000); //
	CreateDynamicObject(971, 454.9293200, -103.4835100, 1001.1347700, 0.0000000, 0.0000000, -0.3600000); //
	CreateDynamicObject(971, 463.8055400, -103.5331700, 1001.1347700, 0.0000000, 0.0000000, -0.3600000); //
	CreateDynamicObject(971, 461.0814800, -107.4232100, 1001.1347700, 0.0000000, 0.0000000, -89.2200200); //

	// Toilet

	CreateObject(2924, 362.70569, -63.92817, 1001.80206,   0.00000, 0.00000, 180.71994);

	// Secret Diner fix

	CreateDynamicObject(971, 438.7062100, -54.2110300, 1000.8848900, 0.0000000, 0.0000000, 89.8800000); //
	CreateDynamicObject(971, 438.7022100, -63.0373700, 1000.8848900, 0.0000000, 0.0000000, 89.8800000); //
	CreateDynamicObject(971, 438.6922600, -71.7800800, 1000.8848900, 0.0000000, 0.0000000, 89.8800000); //
	CreateDynamicObject(971, 442.4201700, -69.1065300, 1000.8848900, 0.0000000, 0.0000000, 179.8798200); //
	CreateDynamicObject(971, 451.2525900, -69.1006600, 1000.8848900, 0.0000000, 0.0000000, 180.2998000); //
	CreateDynamicObject(971, 451.9600500, -65.1942700, 1000.8848900, 0.0000000, 0.0000000, 89.8800000); //
	CreateDynamicObject(971, 451.9297500, -56.3758300, 1000.8848900, 0.0000000, 0.0000000, 89.8800000); //
	CreateDynamicObject(971, 453.5439100, -54.0148500, 1000.8848900, 0.0000000, 0.0000000, 179.5198200); //
	CreateDynamicObject(971, 449.1220400, -49.5481500, 1000.8848900, 0.0000000, 0.0000000, 90.3600000); //
	CreateDynamicObject(971, 445.2034900, -49.1163800, 1000.8848900, 0.0000000, 0.0000000, 179.7598300); //
	CreateDynamicObject(971, 436.5132400, -49.1141400, 1000.8848900, 0.0000000, 0.0000000, 179.9998200); //
	CreateDynamicObject(971, 439.6303700, -45.3506200, 1000.8848900, 0.0000000, 0.0000000, 89.8800000); //
	CreateDynamicObject(971, 435.2276600, -49.7179100, 1000.8848900, 0.0000000, 0.0000000, 179.9998200); //
	CreateDynamicObject(971, 442.2188100, -51.4072900, 998.5958300, 89.9400000, -47.7600000, 138.1798400); //
	CreateDynamicObject(971, 449.3598300, -51.3030800, 998.5945400, 89.8800100, -47.1600000, 138.1798400); //
	CreateDynamicObject(971, 449.7899500, -60.1773800, 998.6161500, 89.8800100, -47.1600000, 136.4399000); //
	CreateDynamicObject(971, 449.6567400, -69.0871300, 998.6300000, 89.8800100, -47.1600000, 136.4399000); //
	CreateDynamicObject(971, 440.1019900, -60.3007400, 998.4604500, 89.8800100, -47.1600000, 137.2798800); //
	CreateDynamicObject(971, 442.5505400, -72.1156000, 998.6149300, 89.8800100, -47.1600000, 137.2798800); //
	CreateDynamicObject(971, 442.6407500, -63.3321600, 998.6204200, 89.8800100, -47.1600000, 137.2798800); //
	CreateDynamicObject(971, 435.4663400, -71.9723700, 998.7276600, 89.8800100, -47.1600000, 137.2798800); //
	CreateDynamicObject(971, 435.4920000, -68.1311000, 998.7276600, 89.8800100, -47.1600000, 137.2798800); //
	CreateDynamicObject(971, 443.8093000, -59.1672300, 995.8714600, 89.8800100, -47.1600000, 136.4399000); //
	CreateDynamicObject(971, 444.3646500, -59.2106300, 995.9413500, 54.2999900, -89.6999400, 177.5999000); //
	CreateDynamicObject(1780, 451.4006000, -68.4925200, 998.6798700, 0.0000000, 0.0000000, 270.1800500); //
	CreateDynamicObject(971, 443.5193500, -60.2370200, 1000.8848900, 0.0000000, 0.0000000, 89.8800000); //
	CreateDynamicObject(971, 443.5254500, -69.1418300, 1000.8848900, 0.0000000, 0.0000000, 89.8800000); //

	// Hairdresser Fix

	CreateObject(8546, 428.89999, -73.64268, 1000.84851,   -94.92002, -19.49999, 71.40001);

	// One Room Apartment - Medium fix - motel inn

	CreateDynamicObject(971, 457.2041300, 514.2632400, 1000.3532700, -89.7000100, 7.0200000, 7.8000000); //
	CreateDynamicObject(971, 457.5122700, 511.5203900, 1000.4127800, 0.0000000, 0.0000000, 0.0600000); //
	CreateDynamicObject(971, 458.0252400, 513.2009900, 1000.4127800, 0.0000000, 0.0000000, 90.1800000); //
	CreateDynamicObject(971, 455.5782800, 516.3536400, 1000.4127800, 0.0000000, 0.0000000, 179.5799100); //
	CreateDynamicObject(971, 453.0577400, 507.1539600, 1000.4127800, 0.0000000, 0.0000000, 90.3000000); //
	CreateDynamicObject(971, 442.4856000, 510.2699900, 1000.4127800, 0.0000000, 0.0000000, 90.3000000); //
	CreateDynamicObject(971, 439.4590800, 509.3562000, 1000.3731700, -89.2801100, -36.4199700, 53.0400300); //


	// Hospital Fix

	CreateDynamicObject(3055, 378.4507100, 161.2948300, 1020.8487500, 0.0000000, 0.0000000, 1.5600000); //
	CreateDynamicObject(1771, 351.6485600, 197.9792000, 1019.4746100, 0.0000000, 0.0000000, -2.2800000); //
	CreateDynamicObject(1771, 355.7873800, 197.9916100, 1019.4746100, 0.0000000, 0.0000000, -1.5000000); //
	CreateDynamicObject(1771, 359.7295800, 197.9325900, 1019.4746100, 0.0000000, 0.0000000, -1.2600000); //
	CreateDynamicObject(1808, 366.8373700, 192.6991300, 1018.9823000, 0.0000000, 0.0000000, -88.4400000); //
	CreateDynamicObject(16377, 358.1336400, 188.0234400, 1019.9837000, 0.0000000, 0.0000000, -2.1600000); //
	CreateDynamicObject(3055, 371.8426800, 161.2281300, 1020.8487500, 0.0000000, 0.0000000, 0.1200000); //
	
	// San Jose
	
	CreateDynamicObject(656, 1676.0861800, -2139.2187500, 12.6879200, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(620, 1812.5590800, -2123.6127900, 11.7812500, 356.8584000, 0.0000000, 3.1415900); //
	CreateDynamicObject(620, 1768.5739700, -2123.7221700, 11.7812500, 356.8584000, 0.0000000, 3.1415900); //
	CreateDynamicObject(620, 1722.1707800, -2123.7407200, 11.7812500, 356.8584000, 0.0000000, 3.1415900); //
	CreateDynamicObject(656, 1810.3653600, -2080.8205600, 12.6879200, 0.0000000, 0.0000000, 132.6599900); //
	CreateDynamicObject(620, 1849.9334700, -1961.7017800, 9.6718800, 3.1415900, 0.0000000, 2.3207700); //
	CreateDynamicObject(620, 1810.2735600, -1961.5867900, 9.6718800, 3.1415900, 0.0000000, 2.3207700); //
	CreateDynamicObject(620, 1902.7175300, -1961.5681200, 9.6718800, 3.1415900, 0.0000000, 2.3207700); //
	CreateDynamicObject(620, 1951.6722400, -1961.6287800, 9.6718800, 3.1415900, 0.0000000, 2.3207700); //
	CreateDynamicObject(656, 1834.2097200, -1914.7187500, 14.0906500, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(656, 1929.8204300, -1926.7656300, 12.6449500, 0.0000000, 0.0000000, 88.9799900); //
	CreateDynamicObject(656, 1919.5660400, -2041.2495100, 12.6449500, 0.0000000, 0.0000000, 160.9200000); //
	CreateDynamicObject(620, 1834.4289600, -2041.5189200, 9.6718800, 3.1415900, 0.0000000, 127.0607500); //
	CreateDynamicObject(620, 1869.8726800, -2042.3438700, 9.6718800, 3.1415900, 0.0000000, 182.6807700); //
	CreateDynamicObject(700, 1823.9085700, -1944.6395300, 11.4453100, 3.1415900, 0.0000000, 2.6179900); //
	CreateDynamicObject(700, 1830.7531700, -1944.4840100, 11.4453100, 3.1415900, 0.0000000, -42.7420000); //
	CreateDynamicObject(700, 1838.2076400, -1944.5637200, 11.4453100, 3.1415900, 0.0000000, 2.6179900); //
	CreateDynamicObject(700, 1845.6440400, -1944.4421400, 11.4453100, 3.1415900, 0.0000000, 65.7979900); //
	CreateDynamicObject(620, 2073.6640600, -1943.0561500, 10.8046900, 356.8584000, 0.0000000, 3.1415900); //
	CreateDynamicObject(620, 2070.6135300, -1880.9591100, 10.8046900, 356.8584000, 0.0000000, 125.9615900); //
	CreateDynamicObject(656, 2117.5810500, -1918.5653100, 12.6785500, 0.0000000, 0.0000000, 160.9200000); //
	CreateDynamicObject(620, 2036.6312300, -1881.4470200, 10.8046900, 356.8584000, 0.0000000, 125.9615900); //
	CreateDynamicObject(620, 2030.6550300, -1918.4953600, 10.8046900, 356.8584000, 0.0000000, 125.9615900); //
	CreateDynamicObject(620, 2095.2590300, -1784.3852500, 8.8617200, 356.8584000, 0.0000000, 62.3615900); //
	CreateDynamicObject(620, 2098.0151400, -1771.3652300, 8.8617200, 356.8584000, 0.0000000, 132.3215800); //
	CreateDynamicObject(620, 2094.9196800, -1701.2258300, 10.8046900, 356.8584000, 0.0000000, 73.1015900); //
	CreateDynamicObject(620, 2095.2927200, -1666.8791500, 10.8046900, 356.8584000, 0.0000000, 151.8815600); //
	CreateDynamicObject(620, 2095.2556200, -1627.1612500, 10.8046900, 356.8584000, 0.0000000, 207.9215500); //
	CreateDynamicObject(740, 2050.3059100, -1477.2641600, 12.6750000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(620, 1925.5719000, -1479.1999500, 9.9296900, 356.8584000, 0.0000000, -1.5708000); //
	CreateDynamicObject(656, 1965.0943600, -1354.9751000, 20.8751500, 0.0000000, 0.0000000, 66.1800000); //
	CreateDynamicObject(620, 2009.6774900, -1352.6247600, 22.2500000, 3.1415900, 0.0000000, 1.5708000); //
	CreateDynamicObject(700, 2122.4411600, -1412.6616200, 24.6154400, 356.8584000, 0.0000000, -1.5708000); //
	CreateDynamicObject(700, 2122.4509300, -1395.6792000, 24.6154400, 356.8584000, 0.0000000, -1.5708000); //
	CreateDynamicObject(700, 2122.4248000, -1435.2751500, 24.6154400, 356.8584000, 0.0000000, -1.5708000); //
	CreateDynamicObject(700, 2122.3513200, -1449.3852500, 24.6154400, 356.8584000, 0.0000000, -1.5708000); //
	CreateDynamicObject(700, 2122.6362300, -1471.6602800, 24.6154400, 356.8584000, 0.0000000, -1.5708000); //
	CreateDynamicObject(700, 2122.6684600, -1486.2528100, 24.6154400, 356.8584000, 0.0000000, -1.5708000); //
	CreateDynamicObject(645, 2193.1262200, -1522.0451700, 22.5564900, 356.8584000, 0.0000000, -2.2863800); //
	CreateDynamicObject(645, 2176.8222700, -1515.7092300, 22.5564900, 356.8584000, 0.0000000, -2.2863800); //
	CreateDynamicObject(645, 2225.2780800, -1496.1695600, 22.8032200, 356.8584000, 0.0000000, -2.2863800); //
	CreateDynamicObject(645, 2244.4289600, -1495.5831300, 22.8032200, 356.8584000, 0.0000000, -2.2863800); //
	CreateDynamicObject(713, 2257.2614700, -1513.2888200, 19.8222400, 0.0000000, 0.0000000, 80.5200000); //
	CreateDynamicObject(620, 2304.9316400, -1505.5761700, 23.9710700, 356.8584000, 0.0000000, -1.5708000); //
	CreateDynamicObject(620, 2331.8129900, -1553.1939700, 21.7079600, 356.8584000, 0.0000000, -1.5708000); //
	CreateDynamicObject(620, 2332.2243700, -1525.7520800, 21.7079600, 356.8584000, 0.0000000, 46.4292100); //
	CreateDynamicObject(620, 2331.9187000, -1494.6022900, 21.7079600, 356.8584000, 0.0000000, 91.1291900); //
	CreateDynamicObject(620, 2407.5168500, -1372.1330600, 21.7079600, 356.8584000, 0.0000000, 91.1291900); //
	CreateDynamicObject(620, 2406.8994100, -1335.9403100, 21.7079600, 356.8584000, 0.0000000, 229.1891600); //
	CreateDynamicObject(620, 2439.1745600, -1348.8874500, 22.5603500, 356.8584000, 0.0000000, 262.9091200); //
	CreateDynamicObject(620, 2405.9995100, -1272.0075700, 22.7265600, 356.8584000, 0.0000000, -1.3962600); //
	CreateDynamicObject(656, 2618.4758300, -1244.9414100, 48.4364200, 0.0000000, 0.0000000, -33.3600000); //
	CreateDynamicObject(620, 2582.7897900, -1245.1390400, 44.8694500, 356.8584000, 0.0000000, 51.5837400); //
	CreateDynamicObject(620, 2607.2426800, -1245.4719200, 44.3537900, 356.8584000, 0.0000000, 51.5837400); //
	CreateDynamicObject(656, 2564.2924800, -1107.6066900, 64.0721700, 0.0000000, 0.0000000, -33.3600000); //
	CreateDynamicObject(656, 2592.6787100, -1035.3543700, 69.1527000, 3.1415900, 0.0000000, 1.8849600); //
	CreateDynamicObject(706, 2417.8955100, -962.4781500, 77.2042000, 0.0000000, 0.0000000, 32.5800000); //
	CreateDynamicObject(656, 2474.5905800, -949.0803800, 79.1119500, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(656, 2542.9067400, -975.6605200, 80.9314600, 0.0000000, 0.0000000, 143.5799900); //
	CreateDynamicObject(700, 1916.0660400, -1622.7365700, 15.2536300, 356.8584000, 0.0000000, -1.5708000); //
	CreateDynamicObject(700, 1930.8522900, -1622.7852800, 15.2536300, 356.8584000, 0.0000000, -1.5708000); //
	CreateDynamicObject(700, 1930.9107700, -1635.3486300, 15.2536300, 356.8584000, 0.0000000, -1.5708000); //
	CreateDynamicObject(700, 1930.9904800, -1646.3643800, 15.2536300, 356.8584000, 0.0000000, -1.5708000); //
	CreateDynamicObject(700, 1930.9633800, -1656.8343500, 15.2536300, 356.8584000, 0.0000000, -1.5708000); //
	CreateDynamicObject(700, 1930.9735100, -1695.3667000, 15.2536300, 356.8584000, 0.0000000, -1.5708000); //
	CreateDynamicObject(700, 1930.9388400, -1707.5703100, 15.2536300, 356.8584000, 0.0000000, -1.5708000); //
	CreateDynamicObject(700, 1931.0628700, -1720.0670200, 15.2536300, 356.8584000, 0.0000000, -1.5708000); //
	CreateDynamicObject(700, 1930.9427500, -1731.8303200, 15.2536300, 356.8584000, 0.0000000, -1.5708000); //
	CreateDynamicObject(700, 1915.8452100, -1741.4506800, 15.2536300, 356.8584000, 0.0000000, -1.5708000); //
	CreateDynamicObject(700, 1930.7740500, -1741.4227300, 15.2536300, 356.8584000, 0.0000000, -1.5708000); //
	CreateDynamicObject(620, 1903.4001500, -1763.4605700, 10.8046900, 356.8584000, 0.0000000, 55.4015900); //
	CreateDynamicObject(620, 1903.0744600, -1788.9633800, 10.8046900, 356.8584000, 0.0000000, 105.7416000); //
	CreateDynamicObject(620, 1923.0576200, -1797.9565400, 10.8046900, 356.8584000, 0.0000000, 105.7416000); //
	CreateDynamicObject(620, 1946.9345700, -1798.8189700, 10.8046900, 356.8584000, 0.0000000, 198.3215900); //
	CreateDynamicObject(620, 1950.9361600, -1827.0863000, 10.8046900, 356.8584000, 0.0000000, 335.0015900); //
	CreateDynamicObject(620, 1976.4166300, -1830.2694100, 10.8046900, 356.8584000, 0.0000000, 502.9415900); //
	CreateDynamicObject(620, 2003.7260700, -1825.0647000, 10.8046900, 356.8584000, 0.0000000, 582.0216100); //
	CreateDynamicObject(620, 2038.2332800, -1833.9002700, 10.8046900, 356.8584000, 0.0000000, 680.4216900); //
	CreateDynamicObject(1764, 1983.2447500, -1802.8094500, 12.5411500, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1481, 1986.7036100, -1803.4769300, 13.2584000, 0.0000000, 0.0000000, -66.3600000); //
	CreateDynamicObject(3061, 1989.1934800, -1802.3665800, 13.7594700, 0.0000000, 0.0000000, 89.7000000); //
	CreateDynamicObject(3061, 1995.8252000, -1802.3493700, 13.7594700, 0.0000000, 0.0000000, 89.7000000); //
	CreateDynamicObject(3061, 2007.7528100, -1802.3769500, 13.7594700, 0.0000000, 0.0000000, 89.7000000); //
	CreateDynamicObject(1712, 2008.8646200, -1802.8647500, 12.5409100, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1518, 2011.6937300, -1802.7590300, 13.3747700, 0.0000000, 0.0000000, -68.5799900); //
	CreateDynamicObject(1438, 2012.7403600, -1803.4903600, 12.5483400, 0.0000000, 0.0000000, -1.0200000); //
	CreateDynamicObject(620, 2034.4709500, -1740.8763400, 10.8046900, 356.8584000, 0.0000000, 629.1216400); //
	CreateDynamicObject(620, 2036.0418700, -1723.3748800, 10.8046900, 356.8584000, 0.0000000, 733.8216600); //
	CreateDynamicObject(620, 2035.3543700, -1694.1713900, 10.8046900, 356.8584000, 0.0000000, 836.4215100); //
	CreateDynamicObject(620, 2047.0803200, -1709.3054200, 10.8046900, 356.8584000, 0.0000000, 913.7014800); //
	CreateDynamicObject(620, 2047.8375200, -1723.3441200, 10.8046900, 356.8584000, 0.0000000, 1041.9215100); //
	CreateDynamicObject(620, 2070.8547400, -1725.0241700, 10.8046900, 356.8584000, 0.0000000, 1162.6418500); //
	CreateDynamicObject(620, 2036.1956800, -1659.7966300, 10.0078100, 356.8584000, 0.0000000, 50.6616000); //
	CreateDynamicObject(620, 2047.9718000, -1624.4226100, 10.0078100, 356.8584000, 0.0000000, 186.0216200); //
	CreateDynamicObject(620, 2049.0598100, -1661.3757300, 10.0078100, 356.8584000, 0.0000000, 272.9616400); //
	CreateDynamicObject(678, 2093.9497100, -1701.4755900, 12.6076500, 0.0000000, 0.0000000, 17.7600100); //
	CreateDynamicObject(682, 2092.7893100, -1711.9837600, 12.5363700, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(682, 2093.3264200, -1705.9022200, 12.5363700, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(682, 2094.1899400, -1696.1435500, 12.5363700, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(682, 2092.4526400, -1684.9193100, 12.5363700, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(682, 2095.6228000, -1670.4200400, 12.5363700, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(682, 2099.8291000, -1681.4121100, 12.5363700, 0.0000000, 0.0000000, 16.1400000); //
	CreateDynamicObject(682, 2099.5595700, -1652.9964600, 12.5363700, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(677, 2071.0979000, -1726.3535200, 12.5398100, 0.0000000, 0.0000000, -13.6200000); //
	CreateDynamicObject(677, 2098.5434600, -1771.4305400, 12.5484600, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(677, 2095.1655300, -1784.3825700, 12.5383500, 0.0000000, 0.0000000, 21.5400000); //
	CreateDynamicObject(820, 2036.4370100, -1829.1699200, 12.5344300, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(820, 2004.4517800, -1827.1989700, 12.5344300, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(761, 1922.8448500, -1800.2436500, 12.5279300, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(761, 1948.1033900, -1814.5566400, 12.5279300, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(761, 1946.3557100, -1799.0532200, 12.5279300, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(761, 1949.4660600, -1825.3869600, 12.5279300, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(653, 1943.9614300, -1806.5477300, 12.9960300, 0.0000000, 0.0000000, 113.0399900); //
	CreateDynamicObject(650, 1925.1131600, -1806.2185100, 12.7466800, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(650, 1941.1009500, -1816.2263200, 12.7466800, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(650, 1929.4233400, -1818.0184300, 12.7466800, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(651, 1933.8177500, -1810.9202900, 12.5264300, 0.0000000, 0.0000000, 64.6800000); //
	CreateDynamicObject(761, 1939.6672400, -1816.5460200, 12.5279300, 0.0000000, 0.0000000, 3.8400000); //
	CreateDynamicObject(761, 1948.1033900, -1814.5566400, 12.5279300, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(761, 1934.2657500, -1810.2453600, 12.5279300, 0.0000000, 0.0000000, -61.5600000); //
	CreateDynamicObject(761, 1928.1160900, -1818.5118400, 12.5279300, 0.0000000, 0.0000000, -54.5999900); //
	CreateDynamicObject(761, 1923.7751500, -1806.2719700, 12.5279300, 0.0000000, 0.0000000, -4.5599900); //
	CreateDynamicObject(692, 1943.1262200, -1806.2999300, 12.5400900, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(653, 1909.0603000, -1804.2601300, 12.9960300, 0.0000000, 0.0000000, 214.7399900); //
	CreateDynamicObject(653, 1917.9443400, -1816.3416700, 12.9960300, 0.0000000, 0.0000000, 100.3799800); //
	CreateDynamicObject(761, 1910.4956100, -1805.2210700, 12.5279300, 0.0000000, 0.0000000, -14.0400000); //
	CreateDynamicObject(761, 1916.6252400, -1816.1790800, 12.5279300, 0.0000000, 0.0000000, 27.1800000); //
	CreateDynamicObject(755, 1933.9741200, -1803.0640900, 12.5350100, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(755, 1935.9075900, -1817.5019500, 12.5350100, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(755, 1920.8070100, -1816.6947000, 12.5350100, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(870, 1928.3529100, -1739.3438700, 12.5352200, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(870, 1925.6214600, -1739.2901600, 12.5352200, 0.0000000, 0.0000000, 54.3000000); //
	CreateDynamicObject(870, 1922.2679400, -1739.4451900, 12.5352200, 0.0000000, 0.0000000, 103.2599900); //
	CreateDynamicObject(870, 1928.5073200, -1736.1220700, 12.5352200, 0.0000000, 0.0000000, 32.4600000); //
	CreateDynamicObject(870, 1928.8087200, -1732.6491700, 12.5352200, 0.0000000, 0.0000000, 101.2800100); //
	CreateDynamicObject(870, 1929.0183100, -1729.4853500, 12.5352200, 0.0000000, 0.0000000, 146.2800600); //
	CreateDynamicObject(870, 1928.9300500, -1725.7204600, 12.5352200, 0.0000000, 0.0000000, 219.9600200); //
	CreateDynamicObject(870, 1928.8460700, -1722.4232200, 12.5352200, 0.0000000, 0.0000000, 234.0600600); //
	CreateDynamicObject(870, 1928.6113300, -1719.5183100, 12.5352200, 0.0000000, 0.0000000, 283.0800500); //
	CreateDynamicObject(870, 1928.8064000, -1716.3963600, 12.5352200, 0.0000000, 0.0000000, 387.6001000); //
	CreateDynamicObject(869, 1928.9458000, -1712.2767300, 12.5364900, 0.0000000, 0.0000000, 64.2000000); //
	CreateDynamicObject(869, 1928.9144300, -1708.3396000, 12.5364900, 0.0000000, 0.0000000, 46.3799900); //
	CreateDynamicObject(869, 1928.9812000, -1703.6715100, 12.5364900, 0.0000000, 0.0000000, 81.2999900); //
	CreateDynamicObject(869, 1928.8182400, -1699.9720500, 12.5364900, 0.0000000, 0.0000000, 259.7999300); //
	CreateDynamicObject(869, 1929.1254900, -1696.0511500, 12.5364900, 0.0000000, 0.0000000, 430.5597500); //
	CreateDynamicObject(1597, 1924.8071300, -1762.4124800, 15.1215000, 0.0000000, 0.0000000, -89.7599900); //
	CreateDynamicObject(1232, 1955.3249500, -1760.3372800, 15.1825200, 0.0000000, 0.0000000, -25.9200000); //
	CreateDynamicObject(1232, 1949.1870100, -1780.9146700, 15.1825200, 0.0000000, 0.0000000, -182.6399800); //
	CreateDynamicObject(1232, 1935.4650900, -1793.0938700, 15.1825200, 0.0000000, 0.0000000, -316.0199000); //
	CreateDynamicObject(1597, 1941.7446300, -1795.2481700, 15.1215000, 0.0000000, 0.0000000, 89.5200200); //
	CreateDynamicObject(1226, 1967.7253400, -1758.5437000, 16.3203100, 356.8584000, 0.0000000, -25.7184100); //
	CreateDynamicObject(620, 2095.6430700, -1829.4942600, 8.8617200, 356.8584000, 0.0000000, 4.1015900); //
	CreateDynamicObject(620, 2125.6809100, -1831.3123800, 8.8617200, 356.8584000, 0.0000000, -54.8184100); //
	CreateDynamicObject(1308, 2074.9355500, -1777.0954600, 12.7031300, 356.8584000, 0.0000000, -3.1415900); //
	CreateDynamicObject(1308, 2063.4851100, -1806.7513400, 12.7031300, 356.8584000, 0.0000000, -3.1415900); //
	CreateDynamicObject(620, 1988.8645000, -1738.7561000, 14.4843800, 356.8584000, 0.0000000, 146.9615800); //
	CreateDynamicObject(620, 2192.5654300, -1715.7872300, 12.0937500, 356.8584000, 0.0000000, 66.0815900); //
	CreateDynamicObject(620, 2194.3176300, -1685.7089800, 12.0937500, 356.8584000, 0.0000000, 107.3016000); //
	CreateDynamicObject(620, 2199.8579100, -1660.0786100, 12.0937500, 356.8584000, 0.0000000, 155.0615800); //
	CreateDynamicObject(3948, 1800.8671900, -1846.2147200, 21.3417800, 0.0000000, 0.0000000, -23.4000000); //
	CreateDynamicObject(653, 1894.0172100, -1849.6081500, 12.9960300, 0.0000000, 0.0000000, -22.2000200); //
	CreateDynamicObject(650, 1870.9754600, -1870.9392100, 12.7466800, 0.0000000, 0.0000000, -49.0200000); //
	CreateDynamicObject(651, 1876.2127700, -1849.8599900, 12.5264300, 0.0000000, 0.0000000, 136.7400100); //
	CreateDynamicObject(761, 1877.0864300, -1850.7191200, 12.5279300, 0.0000000, 0.0000000, 60.4800000); //
	CreateDynamicObject(761, 1872.0122100, -1871.3620600, 12.5279300, 0.0000000, 0.0000000, 72.3000000); //
	CreateDynamicObject(692, 1888.0288100, -1869.3085900, 12.5440500, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(692, 1895.1225600, -1858.4853500, 12.5440500, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(692, 1900.4837600, -1878.7681900, 12.5440500, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(692, 1863.2595200, -1859.7834500, 12.5440500, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(761, 1894.8258100, -1850.6514900, 12.5279300, 0.0000000, 0.0000000, 54.9000000); //
	CreateDynamicObject(754, 1891.9967000, -1865.6563700, 12.5390200, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(754, 1869.0466300, -1853.7366900, 12.5390200, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(3061, 2091.6272000, -1882.0665300, 13.7488800, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1712, 2091.0935100, -1877.6375700, 12.5379200, 0.0000000, 0.0000000, -89.6399700); //
	CreateDynamicObject(1438, 2095.4965800, -1885.0101300, 12.5383400, 0.0000000, 0.0000000, -1.5000000); //
	CreateDynamicObject(620, 2107.8371600, -1906.0208700, 10.8046900, 356.8584000, 0.0000000, 125.9615900); //
	CreateDynamicObject(620, 2127.3608400, -1906.2209500, 10.8046900, 356.8584000, 0.0000000, 125.9615900); //
	CreateDynamicObject(620, 2117.8012700, -1933.8875700, 10.8046900, 356.8584000, 0.0000000, 125.9615900); //
	CreateDynamicObject(820, 2110.9162600, -1871.8287400, 12.5344300, 0.0000000, 0.0000000, 10.3200000); //
	CreateDynamicObject(820, 2067.8793900, -1878.8474100, 12.5344300, 0.0000000, 0.0000000, 34.2600000); //
	CreateDynamicObject(650, 2066.5849600, -1866.3797600, 12.7466800, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(761, 2066.3728000, -1866.3193400, 12.5279300, 0.0000000, 0.0000000, -54.5999900); //
	CreateDynamicObject(653, 2046.5184300, -1875.6900600, 12.9960300, 0.0000000, 0.0000000, 100.3799800); //
	CreateDynamicObject(755, 2047.6773700, -1875.1918900, 12.5372500, 0.0000000, 0.0000000, -18.7800000); //
	CreateDynamicObject(761, 2047.0831300, -1876.0014600, 12.5279300, 0.0000000, 0.0000000, -54.5999900); //
	CreateDynamicObject(761, 2059.7329100, -1872.1320800, 12.5279300, 0.0000000, 0.0000000, -54.5999900); //
	CreateDynamicObject(656, 2140.9096700, -1869.1010700, 12.6785500, 0.0000000, 0.0000000, 160.9200000); //
	CreateDynamicObject(620, 2132.4287100, -1788.7369400, 8.8617200, 356.8584000, 0.0000000, -54.8184100); //
	CreateDynamicObject(682, 2092.3945300, -1867.8051800, 12.5310200, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(677, 2072.0429700, -1922.0958300, 12.5458400, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(677, 2089.5590800, -1942.7031300, 12.5428000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(677, 1922.0905800, -2062.1569800, 12.5430200, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(677, 1951.8731700, -1863.2227800, 12.5436900, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1280, 1928.5543200, -1784.0560300, 12.9355500, 0.0000000, 0.0000000, 179.4599800); //
	CreateDynamicObject(1280, 1928.5660400, -1780.0666500, 12.9355500, 0.0000000, 0.0000000, 179.9399600); //
	CreateDynamicObject(677, 1929.1752900, -1762.7334000, 12.6044600, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1280, 1928.5640900, -1768.5941200, 12.9355500, 0.0000000, 0.0000000, 179.9399600); //
	CreateDynamicObject(677, 1923.6286600, -2042.4693600, 12.5468300, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(677, 1952.1773700, -1944.9355500, 12.5476100, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(869, 2096.7656300, -1781.5014600, 12.8848600, 0.0000000, 0.0000000, 60.7800000); //
	CreateDynamicObject(869, 2098.5542000, -1774.5251500, 12.7542600, 0.0000000, 0.0000000, 66.5400000); //
	CreateDynamicObject(869, 2097.6377000, -1778.0318600, 12.8848500, 0.0000000, 0.0000000, 66.5400000); //
	CreateDynamicObject(869, 2099.2060500, -1771.0716600, 12.6090400, 0.0000000, 0.0000000, 66.5400000); //
	CreateDynamicObject(869, 2099.9851100, -1767.6643100, 12.5490300, 0.0000000, 0.0000000, 66.5400000); //
	CreateDynamicObject(869, 2100.8640100, -1764.3680400, 12.5490300, 0.0000000, 0.0000000, 66.5400000); //
	CreateDynamicObject(869, 2095.7343800, -1785.0828900, 12.8051200, 0.0000000, 0.0000000, 66.7799900); //
	CreateDynamicObject(869, 2094.9135700, -1788.5180700, 12.8482200, 0.0000000, 0.0000000, 66.5400000); //
	CreateDynamicObject(869, 2093.4558100, -1824.3048100, 12.9020800, 0.0000000, 0.0000000, 71.2200100); //
	CreateDynamicObject(869, 2093.4577600, -1828.8785400, 12.9020800, 0.0000000, 0.0000000, 73.6799900); //
	CreateDynamicObject(869, 2103.3574200, -1763.6787100, 12.5490300, 0.0000000, 0.0000000, 163.2000700); //
	CreateDynamicObject(869, 2097.6984900, -1788.3769500, 12.8482200, 0.0000000, 0.0000000, 34.1999900); //
	CreateDynamicObject(869, 2096.8366700, -1824.2623300, 12.9020800, 0.0000000, 0.0000000, -5.6999900); //
	CreateDynamicObject(761, 1832.8144500, -1888.2639200, 12.4025700, 0.0000000, 0.0000000, -27.6000000); //
	CreateDynamicObject(761, 1840.6593000, -1888.1290300, 12.4025700, 0.0000000, 0.0000000, -27.6000000); //
	CreateDynamicObject(761, 1850.6206100, -1888.0793500, 12.4025700, 0.0000000, 0.0000000, -45.7799900); //
	CreateDynamicObject(761, 1862.5030500, -1888.4968300, 12.4025700, 0.0000000, 0.0000000, -34.7399800); //
	CreateDynamicObject(761, 1872.1543000, -1888.5686000, 12.4025700, 0.0000000, 0.0000000, -26.3999700); //
	CreateDynamicObject(761, 1891.6430700, -1888.6579600, 12.4025700, 0.0000000, 0.0000000, -33.3599700); //
	CreateDynamicObject(761, 1901.3877000, -1888.4453100, 12.4025700, 0.0000000, 0.0000000, -9.1799700); //
	CreateDynamicObject(761, 1904.9387200, -1888.4008800, 12.4025700, 0.0000000, 0.0000000, -41.3999800); //
	CreateDynamicObject(761, 1914.4140600, -1888.4228500, 12.4025700, 0.0000000, 0.0000000, -28.7999700); //
	CreateDynamicObject(761, 1921.7255900, -1888.4069800, 12.4025700, 0.0000000, 0.0000000, -28.7999700); //
	CreateDynamicObject(761, 1929.6538100, -1888.1103500, 12.4025700, 0.0000000, 0.0000000, -28.7999700); //
	CreateDynamicObject(761, 1939.5579800, -1888.1650400, 12.4025700, 0.0000000, 0.0000000, 47.0400400); //
	CreateDynamicObject(761, 1859.9719200, -1888.6886000, 12.4025700, 0.0000000, 0.0000000, -79.1999700); //
	CreateDynamicObject(761, 1852.4951200, -1888.6374500, 12.4025700, 0.0000000, 0.0000000, 40.5000100); //
	CreateDynamicObject(761, 1838.7041000, -1888.7121600, 12.4025700, 0.0000000, 0.0000000, 3.6600000); //
	CreateDynamicObject(806, 1831.7854000, -1880.2390100, 15.7419300, 0.0000000, 0.0000000, 115.6799900); //
	CreateDynamicObject(872, 1865.5098900, -1876.4422600, 12.4115000, 0.0000000, 0.0000000, 19.5000000); //
	CreateDynamicObject(806, 1838.6886000, -1880.5664100, 15.7419400, 0.0000000, 0.0000000, 268.8000200); //
	CreateDynamicObject(3802, 1927.5002400, -1765.5907000, 14.7684900, 0.0000000, 0.0000000, 86.5800300); //
	CreateDynamicObject(8623, 2218.1506300, -1663.8928200, 14.2362800, 0.0000000, 0.0000000, 74.4000100); //
	CreateDynamicObject(8623, 2212.3230000, -1688.8975800, 13.4650000, 0.0000000, 0.0000000, 79.7400000); //
	CreateDynamicObject(8623, 2209.6091300, -1714.9442100, 13.1946100, 0.0000000, 0.0000000, 82.5600000); //
	CreateDynamicObject(8623, 2192.7402300, -1715.2291300, 13.1946100, 0.0000000, 0.0000000, 86.5200000); //
	CreateDynamicObject(8623, 2194.9008800, -1686.2894300, 13.4650000, 0.0000000, 0.0000000, 79.7400000); //
	CreateDynamicObject(8623, 2200.3867200, -1661.1312300, 14.2362800, 0.0000000, 0.0000000, 74.9400000); //
	CreateDynamicObject(759, 2160.5803200, -1688.4069800, 13.8864800, 0.0000000, 0.0000000, 27.0600000); //
	CreateDynamicObject(759, 2169.1640600, -1707.3475300, 13.8864800, 0.0000000, 0.0000000, 91.6799900); //
	CreateDynamicObject(759, 2164.9934100, -1675.4423800, 13.8864800, 0.0000000, 0.0000000, 10.2599800); //
	CreateDynamicObject(801, 2168.8317900, -1686.5380900, 13.6903700, 0.0000000, 0.0000000, 39.0000000); //
	CreateDynamicObject(801, 2168.3193400, -1690.7074000, 13.6903700, 0.0000000, 0.0000000, 118.3200000); //
	CreateDynamicObject(801, 2167.9072300, -1695.1734600, 13.6903700, 0.0000000, 0.0000000, 207.7200000); //
	CreateDynamicObject(862, 2154.5363800, -1586.9238300, 13.3334100, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(862, 2142.0817900, -1593.5966800, 13.3334100, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(862, 2161.5112300, -1600.5662800, 13.3334100, 0.0000000, 0.0000000, 0.0000000); //
	
	// El Corona
	
	CreateDynamicObject(947, 1981.6877400, -2069.3244600, 14.5864800, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2114, 1981.9174800, -2064.1223100, 12.5284300, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(3819, 1991.8972200, -2065.6328100, 13.3766100, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1728, 1923.9964600, -2076.6757800, 12.5565200, 0.0000000, 0.0000000, 180.9400500); //
	CreateDynamicObject(1829, 1802.8098100, -2136.7668500, 13.0114000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2596, 1805.6879900, -2138.7509800, 14.8134600, 0.0000000, 0.0000000, 272.0000000); //
	CreateDynamicObject(1728, 1801.1010700, -2139.8193400, 12.5468800, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(1729, 1802.6121800, -2140.6677200, 12.5468800, 0.0000000, 0.0000000, 218.0000000); //
	CreateDynamicObject(2315, 1802.6445300, -2137.8161600, 12.5468800, 0.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(2768, 1802.4212600, -2137.8393600, 13.0848200, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2837, 1802.5722700, -2139.2658700, 13.0425100, 0.0000000, 0.0000000, 0.0000000); //

	
	// More San Jose
	
	CreateDynamicObject(1257, 1968.1098600, -1768.1069300, 13.8260700, 0.0000000, 0.0000000, 0.2500000); //
	CreateDynamicObject(910, 2170.9533700, -1786.5306400, 13.7901600, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(852, 2168.1967800, -1787.5806900, 12.5203200, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(850, 2167.8835400, -1788.3780500, 12.6310500, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1306, 2148.6970200, -1741.1007100, 24.7350600, 0.0000000, 0.0000000, 358.2500000); //
	CreateDynamicObject(1465, 2145.5842300, -1743.4425000, 13.7138300, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1465, 2148.4641100, -1743.4016100, 13.7124300, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1465, 2151.3327600, -1743.3051800, 13.7110300, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1466, 2145.5871600, -1743.4268800, 16.0320900, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1466, 2151.3501000, -1743.3013900, 16.0320900, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1428, 2148.2197300, -1744.5153800, 13.2658300, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1428, 2149.6098600, -1743.2525600, 16.3644900, 0.0000000, 0.0000000, 268.0000000); //
	CreateDynamicObject(970, 1746.3562000, -1862.1001000, 13.1294700, 0.0000000, 0.0000000, 269.7500000); //
	CreateDynamicObject(970, 1739.6283000, -1862.0430900, 13.1294700, 0.0000000, 0.0000000, 270.2473100); //
	CreateDynamicObject(638, 1739.1992200, -1862.6602800, 13.2811400, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(638, 1739.2028800, -1861.4282200, 13.2811400, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(638, 1746.7408400, -1861.3875700, 13.2811400, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(638, 1746.7457300, -1862.8167700, 13.2811400, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1215, 1745.9244400, -1864.5090300, 13.1985700, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1215, 1740.0368700, -1864.5822800, 13.1185600, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1280, 1736.9160200, -1863.5643300, 12.9774900, 0.0000000, 0.0000000, 270.5000000); //
	CreateDynamicObject(1280, 1749.1251200, -1863.6458700, 12.9774900, 0.0000000, 0.0000000, 270.4998800); //
	CreateDynamicObject(970, 1826.9801000, -1857.8912400, 13.1294700, 0.0000000, 0.0000000, 269.9971900); //
	CreateDynamicObject(970, 1826.9676500, -1853.6599100, 13.1294700, 0.0000000, 0.0000000, 270.4945100); //
	CreateDynamicObject(970, 1826.9545900, -1849.4621600, 13.1294700, 0.0000000, 0.0000000, 270.4943800); //
	CreateDynamicObject(970, 1826.9466600, -1841.0406500, 13.1294700, 0.0000000, 0.0000000, 269.7443800); //
	CreateDynamicObject(970, 1826.9487300, -1836.8215300, 13.1294700, 0.0000000, 0.0000000, 270.4890100); //
	CreateDynamicObject(970, 1826.9372600, -1832.6104700, 13.1294700, 0.0000000, 0.0000000, 269.9888900); //
	CreateDynamicObject(970, 1829.1540500, -1859.9666700, 13.1294700, 0.0000000, 0.0000000, 359.9945100); //
	CreateDynamicObject(638, 1827.3437500, -1858.5820300, 13.2811400, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(638, 1827.3381300, -1855.9531300, 13.2811400, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(638, 1827.3496100, -1853.2939500, 13.2811400, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(638, 1827.3518100, -1850.6582000, 13.2811400, 0.0000000, 0.0000000, 359.7500000); //
	CreateDynamicObject(638, 1827.3551000, -1848.7843000, 13.2811400, 0.0000000, 0.0000000, 359.7473100); //
	CreateDynamicObject(638, 1827.3479000, -1841.7644000, 13.2811400, 0.0000000, 0.0000000, 0.4973100); //
	CreateDynamicObject(638, 1827.3521700, -1840.3889200, 13.2811400, 0.0000000, 0.0000000, 359.7443800); //
	CreateDynamicObject(638, 1827.3634000, -1838.0893600, 13.2811400, 0.0000000, 0.0000000, 359.7418200); //
	CreateDynamicObject(638, 1827.3679200, -1835.7901600, 13.2811400, 0.0000000, 0.0000000, 359.7418200); //
	CreateDynamicObject(638, 1827.3741500, -1833.1137700, 13.2811400, 0.0000000, 0.0000000, 359.7418200); //
	CreateDynamicObject(638, 1827.3797600, -1831.8512000, 13.2811400, 0.0000000, 0.0000000, 0.2418200); //
	CreateDynamicObject(638, 1828.9910900, -1859.5584700, 13.2811400, 0.0000000, 0.0000000, 270.7500000); //
	CreateDynamicObject(638, 1829.8490000, -1859.5214800, 13.2811400, 0.0000000, 0.0000000, 269.9970700); //
	CreateDynamicObject(638, 1828.4588600, -1859.5418700, 13.2811400, 0.0000000, 0.0000000, 270.7470700); //
	CreateDynamicObject(1215, 1831.5341800, -1859.6435500, 13.1424500, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1215, 1833.3564500, -1845.3027300, 13.1424500, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1215, 1833.3330100, -1840.1113300, 13.1424500, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1280, 1833.2270500, -1847.5811800, 12.9794800, 0.0000000, 0.0000000, 0.5000000); //
	CreateDynamicObject(1280, 1833.2496300, -1837.7846700, 12.9794800, 0.0000000, 0.0000000, 0.2500000); //
	CreateDynamicObject(1257, 1829.9316400, -1824.9477500, 13.8316600, 0.0000000, 0.0000000, -0.5400000); //
	CreateDynamicObject(1257, 1917.3626700, -1765.0957000, 13.7202100, 0.0000000, 0.0000000, -90.1200200); //
	CreateDynamicObject(1257, 2075.7334000, -1761.0327100, 13.7202100, 0.0000000, 0.0000000, -90.1200200); //
	CreateDynamicObject(1257, 2255.1125500, -1739.9249300, 13.7202100, 0.0000000, 0.0000000, -89.4000500); //
	CreateDynamicObject(1257, 2400.8750000, -1738.5449200, 13.7202100, 0.0000000, 0.0000000, -89.6400500); //
	CreateDynamicObject(1257, 2439.9819300, -1520.6167000, 24.2576700, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1257, 2459.9365200, -1301.0286900, 24.2230700, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1257, 2651.5939900, -1232.8448500, 50.2455600, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1257, 2519.4663100, -1038.8840300, 69.7930400, 0.0000000, 0.0000000, 90.2400100); //
	CreateDynamicObject(1257, 2165.4397000, -996.2256500, 63.2352100, 0.0000000, 0.0000000, 79.0199800); //
	CreateDynamicObject(1257, 1961.2612300, -1196.1512500, 26.0738100, 0.0000000, 0.0000000, 182.1599900); //
	CreateDynamicObject(1257, 1700.0360100, -1292.0212400, 13.8570500, 0.0000000, 0.0000000, 89.7599800); //
	CreateDynamicObject(1257, 1463.6876200, -1262.6141400, 13.7724000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1257, 1230.6453900, -1271.9382300, 13.7780000, 0.0000000, 0.0000000, 90.1800200); //
	CreateDynamicObject(1257, 1044.6975100, -1303.7022700, 13.7780000, 0.0000000, 0.0000000, 179.7600100); //
	CreateDynamicObject(1257, 828.1542400, -1311.3920900, 13.8216400, 0.0000000, 0.0000000, 89.7599900); //
	CreateDynamicObject(1257, 489.7825000, -1340.8009000, 16.7164300, 7.3800000, 1.0800000, 114.1799900); //
	CreateDynamicObject(1257, 433.6299100, -1510.1843300, 31.2358400, 0.0000000, 0.0000000, 187.5600400); //
	CreateDynamicObject(1257, 261.6500900, -1565.6970200, 33.3603600, 0.0000000, 0.0000000, 75.4200100); //
	CreateDynamicObject(1257, 149.6986500, -1538.8415500, 10.4480500, -4.5600000, 5.5200000, 142.3199500); //
	CreateDynamicObject(1257, 421.4231600, -1779.6466100, 5.7726800, 0.0000000, 0.0000000, -90.7799900); //
	CreateDynamicObject(1257, 657.1143200, -1760.9542200, 13.6810300, 0.0000000, 0.0000000, -102.7800400); //
	CreateDynamicObject(1257, 926.4853500, -1634.9755900, 13.8284600, 0.0000000, 0.0000000, 0.3000000); //
	CreateDynamicObject(1257, 926.6082800, -1424.9638700, 13.6838600, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1257, 1158.3394800, -1414.8676800, 13.8841900, 0.0000000, 0.0000000, -89.5200100); //
	CreateDynamicObject(1257, 1380.7511000, -1414.9543500, 13.7234500, 0.0000000, 0.0000000, -90.4799900); //
	CreateDynamicObject(1257, 1753.9220000, -1451.8035900, 13.7670700, 0.0000000, 0.0000000, -100.0200300); //
	CreateDynamicObject(1257, 1992.6232900, -1474.6999500, 13.7875500, 0.0000000, 0.0000000, -89.3399700); //
	CreateDynamicObject(1257, 2094.6594200, -1716.6293900, 13.7962700, 0.0000000, 0.0000000, 163.0799400); //
	CreateDynamicObject(1257, 1967.7602500, -1743.6119400, 13.7367300, 0.0000000, 0.0000000, 90.1200100); //
	CreateDynamicObject(1257, 1837.3601100, -1743.4063700, 13.6708600, 0.0000000, 0.0000000, 88.8000100); //
	CreateDynamicObject(1257, 1811.7172900, -1876.6684600, 13.7215300, 0.0000000, 0.0000000, 180.2399600); //
	CreateDynamicObject(1257, 1953.1114500, -1914.4344500, 13.6784300, 0.0000000, 0.0000000, -180.4200100); //
	CreateDynamicObject(1257, 2118.8689000, -1903.3459500, 13.8118900, 0.0000000, 0.0000000, -89.2200000); //
	CreateDynamicObject(1257, 2304.9646000, -1922.8187300, 13.7912600, 0.0000000, 0.0000000, 178.7400100); //
	CreateDynamicObject(1257, 2476.7077600, -1941.2559800, 13.6732600, 0.0000000, 0.0000000, 269.5200500); //
	CreateDynamicObject(1257, 2765.6367200, -2003.4080800, 13.7764200, 0.0000000, 0.0000000, -90.6000000); //
	CreateDynamicObject(1257, 2738.4321300, -1881.6701700, 11.2793300, 0.0000000, 0.0000000, 89.7600100); //
	CreateDynamicObject(1257, 2456.9018600, -1723.4176000, 13.8170400, 0.0000000, 0.0000000, 89.8800200); //
	CreateDynamicObject(1257, 2274.4079600, -1722.7613500, 13.6945600, 0.0000000, 0.0000000, 90.0600300); //
	CreateDynamicObject(1257, 2233.9892600, -1669.9023400, 15.1114600, 0.0000000, 0.0000000, -15.1200000); //
	CreateDynamicObject(1257, 2221.5212400, -1499.6763900, 24.2029200, 0.0000000, 0.0000000, 0.1800000); //
	CreateDynamicObject(1257, 2176.3252000, -1276.4499500, 24.2014500, 0.0000000, 0.0000000, -1.9800000); //
	CreateDynamicObject(1257, 2183.9856000, -1151.4299300, 24.7373300, 0.0000000, 0.0000000, 0.6600000); //
	CreateDynamicObject(1257, 2121.6364700, -1100.9364000, 25.5118200, 0.0000000, 0.0000000, 72.5399900); //
	CreateDynamicObject(1257, 2058.1076700, -1181.3363000, 24.0459800, 0.0000000, 0.0000000, 180.5399000); //
	CreateDynamicObject(1257, 2058.1352500, -1320.3925800, 24.1972400, 0.0000000, 0.0000000, 180.0601300); //
	CreateDynamicObject(1257, 1868.3809800, -1332.0391800, 13.6804000, 0.0000000, 0.0000000, 90.4199800); //
	CreateDynamicObject(1257, 1812.8070100, -1589.9565400, 13.7689200, 0.0000000, 0.0000000, 179.9999800); //
	CreateDynamicObject(1257, 1525.3480200, -1583.2554900, 13.7922300, 0.0000000, 0.0000000, 90.4799800); //
	CreateDynamicObject(1257, 1380.1618700, -1848.2374300, 13.7072500, 0.0000000, 0.0000000, 180.4199200); //
	CreateDynamicObject(1257, 1577.0159900, -1881.1964100, 13.7976500, 0.0000000, 0.0000000, -89.5199800); //
	CreateDynamicObject(1257, 1805.3000500, -1841.1228000, 13.7913100, 0.0000000, 0.0000000, -90.5400200); //
	
	// SF
	
	CreateDynamicObject(19868, -2756.8691400, 88.8821600, 6.0860000, 0.0000000, 0.0000000, 181.0000000); //
	CreateDynamicObject(19868, -2753.3493700, 88.9393200, 6.0860000, 0.0000000, 0.0000000, 181.0000000); //
	CreateDynamicObject(19868, -2748.8671900, 88.9903000, 5.3842300, 0.0000000, -17.2000000, 179.0000000); //
	CreateDynamicObject(19868, -2759.3046900, 91.5301700, 6.0860000, 0.0000000, 0.0000000, 87.0000000); //
	CreateDynamicObject(1622, -2735.3212900, 87.6691600, 8.0829200, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1616, -2735.2844200, 87.6590500, 9.0436100, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1616, -2735.3020000, 122.9236900, 9.0436100, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(3934, -2725.5251500, 97.2125000, 14.6739000, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(1616, -2720.5893600, 132.3332700, 10.8607800, 0.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(638, -2715.5666500, 133.7839100, 3.9991500, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(638, -2715.5793500, 121.6698800, 3.9991500, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1233, -2711.1774900, 101.4173900, 4.8719700, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(1233, -2711.2207000, 119.4535300, 4.8719700, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(1233, -2711.1958000, 142.9274700, 4.8719700, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(3265, -2734.2419400, 87.5277500, 2.8451600, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(8674, -2743.1821300, 104.5589400, 7.0977700, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(8674, -2743.1774900, 114.8491800, 7.0977700, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(8674, -2743.1779800, 125.1400000, 7.0978000, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(966, -2742.0705600, 88.8525300, 3.4618500, 0.0000000, -2.0000000, 170.0000000); //
	CreateDynamicObject(6959, -2739.5222200, 119.6942400, 3.5785400, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(6959, -2747.0815400, 79.7123100, 2.8800000, 2.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2949, -2734.9326200, 132.9563800, 3.5442000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19868, -2759.0312500, 96.7892800, 6.0860000, 0.0000000, 0.0000000, 87.0000000); //
	CreateDynamicObject(19868, -2758.5122100, 102.0416300, 6.0860000, 0.0000000, 0.0000000, 82.0000000); //
	CreateDynamicObject(19868, -2757.7314500, 107.2774000, 6.0860000, 0.0000000, 0.0000000, 81.0000000); //
	CreateDynamicObject(19868, -2756.8662100, 112.4882000, 6.0860000, 0.0000000, 0.0000000, 80.0000000); //
	CreateDynamicObject(19868, -2755.9948700, 117.7031500, 6.0860000, 0.0000000, 0.0000000, 81.0000000); //
	CreateDynamicObject(19868, -2755.2502400, 122.9215100, 6.0860000, 0.0000000, 0.0000000, 83.0000000); //
	CreateDynamicObject(19868, -2754.6340300, 128.1708700, 6.0860000, 0.0000000, 0.0000000, 84.0000000); //
	CreateDynamicObject(19868, -2754.1337900, 133.4255400, 6.0860000, 0.0000000, 0.0000000, 85.0000000); //
	CreateDynamicObject(19868, -2753.7644000, 138.6932200, 6.0860000, 0.0000000, 0.0000000, 87.0000000); //
	CreateDynamicObject(19868, -2753.4755900, 143.9692200, 6.0860000, 0.0000000, 0.0000000, 87.0000000); //
	CreateDynamicObject(1616, -2750.4929200, 148.1123200, 10.7828200, 0.0000000, 0.0000000, -90.0000000); //
	CreateDynamicObject(16096, -2737.9648400, 138.9177200, 16.4837800, 0.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(1694, -2740.9267600, 139.5269200, 23.1855000, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(1687, -2739.7773400, 144.6448700, 15.3828000, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(8674, -2741.2741700, 141.9431900, 16.0900400, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(1215, -2728.8808600, 93.2721600, 14.6831000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1215, -2728.8952600, 100.9627800, 14.6831000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1215, -2722.0332000, 100.9256400, 14.6831000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1215, -2722.0483400, 93.2483500, 14.6831000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(3265, -2750.3630400, 147.6746700, 6.1048500, 0.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(11236, -2712.3325200, 121.1480300, 13.6475200, 0.0000000, 0.0000000, -90.0000000); //
	CreateDynamicObject(2633, -2733.1879900, 138.9316100, 13.6140600, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2633, -2728.9074700, 138.9315000, 13.6141000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2633, -2725.5805700, 144.5841700, 13.6141000, 0.0000000, 0.0000000, -90.0000000); //
	CreateDynamicObject(8417, -2469.3259300, -187.4470100, 24.5808600, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(8417, -2469.3535200, -181.8553900, 24.4709400, 0.0000000, 0.5000000, 90.0000000); //
	CreateDynamicObject(8674, -2491.2522000, -189.0923200, 26.0735600, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(8674, -2491.2600100, -178.7920100, 26.0735600, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(1216, -2491.6709000, -180.8759800, 25.3011000, 0.0000000, 0.0000000, -90.0000000); //
	CreateDynamicObject(2673, -2492.1711400, -181.0992700, 24.7026800, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(4227, -2475.7351100, -192.8804800, 26.0977200, 0.0000000, 0.0000000, -90.0000000); //
	CreateDynamicObject(946, -2483.6430700, -169.1401100, 26.7812600, 0.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(946, -2483.5451700, -198.3352200, 26.7813000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(3398, -2476.3205600, -183.4464600, 24.3244600, 0.0000000, 0.0000000, -90.0000000); //
	CreateDynamicObject(1368, -2476.3994100, -178.7205800, 25.2981000, 0.0000000, 0.0000000, -90.0000000); //
	CreateDynamicObject(1368, -2476.4116200, -188.4245300, 25.2981000, 0.0000000, 0.0000000, -90.0000000); //
	
	CreateDynamicObject(4227, -2491.4792500, 69.7838300, 26.3225300, 0.0000000, 0.0000000, 0.6600000); //
	CreateDynamicObject(1280, -2492.7690400, 69.9721000, 25.0256500, 0.0000000, 0.0000000, -88.9800000); //
	CreateDynamicObject(1226, -2488.6203600, 75.4891600, 28.5466000, 356.8584000, 0.0000000, -1.5708000); //
	
	
	
	
		// Park in the middle of the city

	CreateDynamicObject(9833, -1980.6898200, 883.0782500, 47.3523600, 0.0000000, 0.0000000, 25.7400000); //
	CreateDynamicObject(1280, -1980.2453600, 881.9337800, 44.5927200, 0.0000000, 0.0000000, 89.9399900); //
	CreateDynamicObject(1280, -1979.2016600, 883.9812600, 44.5927200, 0.0000000, 0.0000000, 211.2599600); //
	CreateDynamicObject(1280, -1981.3232400, 883.8582800, 44.5927200, 0.0000000, 0.0000000, 330.9599600); //
	CreateDynamicObject(870, -1964.2645300, 888.6206700, 41.1281900, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(870, -1961.7777100, 889.0410800, 41.1281900, 0.0000000, 0.0000000, 52.9800000); //
	CreateDynamicObject(870, -1962.1500200, 886.3271500, 41.1281900, 0.0000000, 0.0000000, 34.5600000); //
	CreateDynamicObject(870, -1964.5377200, 885.8691400, 41.1281900, 0.0000000, 0.0000000, 22.0799800); //
	CreateDynamicObject(870, -1959.2852800, 888.4422600, 41.1281900, 0.0000000, 0.0000000, -2.1600200); //
	CreateDynamicObject(870, -1956.6060800, 888.8839700, 41.1281900, 0.0000000, 0.0000000, 54.1799800); //
	CreateDynamicObject(870, -1959.0399200, 885.8701800, 41.1281900, 0.0000000, 0.0000000, -38.5800200); //
	CreateDynamicObject(870, -1956.6921400, 884.1563100, 41.1281900, 0.0000000, 0.0000000, -46.3800100); //
	CreateDynamicObject(870, -1956.3704800, 886.4460400, 41.1281900, 0.0000000, 0.0000000, -44.0400200); //
	CreateDynamicObject(870, -1956.5866700, 881.4436600, 41.1281900, 0.0000000, 0.0000000, 19.6799900); //
	CreateDynamicObject(870, -1958.6422100, 880.9579500, 41.1281900, 0.0000000, 0.0000000, -47.5800200); //
	CreateDynamicObject(870, -1959.0959500, 883.0679900, 41.1281900, 0.0000000, 0.0000000, 22.7399900); //
	CreateDynamicObject(870, -1961.0542000, 880.4231000, 41.1281900, 0.0000000, 0.0000000, -22.5000100); //
	CreateDynamicObject(870, -1961.3214100, 882.3517500, 41.1281900, 0.0000000, 0.0000000, -99.2400300); //
	CreateDynamicObject(870, -1961.0542000, 880.4231000, 41.1281900, 0.0000000, 0.0000000, -22.5000100); //
	CreateDynamicObject(870, -1961.0201400, 883.8209800, 41.1281900, 0.0000000, 0.0000000, -164.4000100); //
	CreateDynamicObject(870, -1961.0542000, 880.4231000, 41.1281900, 0.0000000, 0.0000000, -22.5000100); //
	CreateDynamicObject(870, -1961.3214100, 882.3517500, 41.1281900, 0.0000000, 0.0000000, -99.2400300); //
	CreateDynamicObject(870, -1963.3284900, 883.5914300, 41.1281900, 0.0000000, 0.0000000, -227.0999900); //
	CreateDynamicObject(870, -1964.3580300, 882.2506100, 41.1281900, 0.0000000, 0.0000000, -284.3999000); //
	CreateDynamicObject(870, -1963.3284900, 883.5914300, 41.1281900, 0.0000000, 0.0000000, -227.0999900); //
	CreateDynamicObject(870, -1963.4561800, 880.7512200, 41.1281900, 0.0000000, 0.0000000, -376.3798500); //
	CreateDynamicObject(870, -1964.2435300, 878.0217900, 41.1281900, 0.0000000, 0.0000000, -393.7197300); //
	CreateDynamicObject(870, -1964.5133100, 879.8936800, 41.1281900, 0.0000000, 0.0000000, -437.2196400); //
	CreateDynamicObject(870, -1964.2435300, 878.0217900, 41.1281900, 0.0000000, 0.0000000, -393.7197300); //
	CreateDynamicObject(870, -1961.5336900, 878.5528600, 41.1281900, 0.0000000, 0.0000000, -457.0795600); //
	CreateDynamicObject(870, -1958.8419200, 878.3201300, 41.1281900, 0.0000000, 0.0000000, -520.7994400); //
	CreateDynamicObject(1364, -1992.5651900, 864.9668600, 45.2234100, 0.0000000, 0.0000000, -89.5199800); //
	CreateDynamicObject(1364, -1992.4389600, 903.4017300, 45.2435800, 0.0000000, 0.0000000, -89.5199800); //
	CreateDynamicObject(870, -1919.0360100, 889.1267700, 34.5670900, 0.0000000, 0.0000000, 36.6599900); //
	CreateDynamicObject(870, -1921.4657000, 889.0271000, 34.5670900, 0.0000000, 0.0000000, -74.5800200); //
	CreateDynamicObject(870, -1919.0360100, 889.1267700, 34.5670900, 0.0000000, 0.0000000, 36.6599900); //
	CreateDynamicObject(870, -1923.3774400, 888.9950000, 34.5670900, 0.0000000, 0.0000000, -130.3800000); //
	CreateDynamicObject(870, -1925.4794900, 888.9624600, 34.5670900, 0.0000000, 0.0000000, -198.7800100); //
	CreateDynamicObject(870, -1923.3774400, 888.9950000, 34.5670900, 0.0000000, 0.0000000, -130.3800000); //
	CreateDynamicObject(870, -1927.2563500, 888.8488800, 34.5670900, 0.0000000, 0.0000000, -305.8799400); //
	CreateDynamicObject(870, -1923.3774400, 888.9950000, 34.5670900, 0.0000000, 0.0000000, -130.3800000); //
	CreateDynamicObject(870, -1926.8908700, 886.3328900, 34.5670900, 0.0000000, 0.0000000, -116.7000200); //
	CreateDynamicObject(870, -1927.2563500, 888.8488800, 34.5670900, 0.0000000, 0.0000000, -305.8799400); //
	CreateDynamicObject(870, -1923.3774400, 888.9950000, 34.5670900, 0.0000000, 0.0000000, -130.3800000); //
	CreateDynamicObject(870, -1925.4794900, 888.9624600, 34.5670900, 0.0000000, 0.0000000, -198.7800100); //
	CreateDynamicObject(870, -1927.2563500, 888.8488800, 34.5670900, 0.0000000, 0.0000000, -305.8799400); //
	CreateDynamicObject(870, -1924.4652100, 886.4731400, 34.5670900, 0.0000000, 0.0000000, -60.2400100); //
	CreateDynamicObject(870, -1923.3774400, 888.9950000, 34.5670900, 0.0000000, 0.0000000, -130.3800000); //
	CreateDynamicObject(870, -1925.4794900, 888.9624600, 34.5670900, 0.0000000, 0.0000000, -198.7800100); //
	CreateDynamicObject(870, -1927.2563500, 888.8488800, 34.5670900, 0.0000000, 0.0000000, -305.8799400); //
	CreateDynamicObject(870, -1921.1815200, 886.2550000, 34.5670900, 0.0000000, 0.0000000, -66.5400400); //
	CreateDynamicObject(870, -1923.3774400, 888.9950000, 34.5670900, 0.0000000, 0.0000000, -130.3800000); //
	CreateDynamicObject(870, -1925.4794900, 888.9624600, 34.5670900, 0.0000000, 0.0000000, -198.7800100); //
	CreateDynamicObject(870, -1927.2563500, 888.8488800, 34.5670900, 0.0000000, 0.0000000, -305.8799400); //
	CreateDynamicObject(870, -1919.4815700, 886.5288700, 34.5670900, 0.0000000, 0.0000000, -88.8000000); //
	CreateDynamicObject(870, -1918.7912600, 883.7200300, 34.5670900, 0.0000000, 0.0000000, -153.2999600); //
	CreateDynamicObject(870, -1921.5186800, 883.8403300, 34.5670900, 0.0000000, 0.0000000, -203.5199400); //
	CreateDynamicObject(870, -1924.0139200, 883.5325300, 34.5670900, 0.0000000, 0.0000000, -307.3198500); //
	CreateDynamicObject(870, -1926.8273900, 883.7439600, 34.5670900, 0.0000000, 0.0000000, -380.2198200); //
	CreateDynamicObject(870, -1924.0139200, 883.5325300, 34.5670900, 0.0000000, 0.0000000, -307.3198500); //
	CreateDynamicObject(870, -1927.1746800, 881.1606400, 34.5670900, 0.0000000, 0.0000000, -434.5798300); //
	CreateDynamicObject(870, -1924.0139200, 883.5325300, 34.5670900, 0.0000000, 0.0000000, -307.3198500); //
	CreateDynamicObject(870, -1926.8273900, 883.7439600, 34.5670900, 0.0000000, 0.0000000, -380.2198200); //
	CreateDynamicObject(870, -1924.5146500, 880.5927100, 34.5670900, 0.0000000, 0.0000000, -480.7197600); //
	CreateDynamicObject(870, -1922.4111300, 880.8949000, 34.5670900, 0.0000000, 0.0000000, -505.4996900); //
	CreateDynamicObject(870, -1918.8906300, 880.7420700, 34.5670900, 0.0000000, 0.0000000, -507.5996100); //
	CreateDynamicObject(870, -1922.4111300, 880.8949000, 34.5670900, 0.0000000, 0.0000000, -505.4996900); //
	CreateDynamicObject(870, -1919.0262500, 878.1969600, 34.5670900, 0.0000000, 0.0000000, -507.5996100); //
	CreateDynamicObject(870, -1921.8219000, 878.3026100, 34.5670900, 0.0000000, 0.0000000, -574.1995200); //
	CreateDynamicObject(870, -1919.0262500, 878.1969600, 34.5670900, 0.0000000, 0.0000000, -507.5996100); //
	CreateDynamicObject(870, -1924.6108400, 878.1415400, 34.5670900, 0.0000000, 0.0000000, -629.2193000); //
	CreateDynamicObject(870, -1927.4764400, 878.3026100, 34.5670900, 0.0000000, 0.0000000, -693.4187600); //
	CreateDynamicObject(673, -1990.2520800, 903.4410400, 45.5392900, 356.8584000, 0.0000000, 3.1415900); //
	CreateDynamicObject(673, -1990.2141100, 865.1246300, 45.5392900, 356.8584000, 0.0000000, 3.1415900); //
	
	// Graffiti, light and bench next to hashbury
	
	CreateDynamicObject(4227, -2491.4792500, 69.7838300, 26.3225300, 0.0000000, 0.0000000, 0.6600000); //
	CreateDynamicObject(1280, -2492.7690400, 69.9721000, 25.0256500, 0.0000000, 0.0000000, -88.9800000); //
	CreateDynamicObject(1226, -2488.6203600, 75.4891600, 28.5466000, 356.8584000, 0.0000000, -1.5708000); //

	
	// SJPD d�rrkarmar
	CreateDynamicObject(1495, 239.5870100, 125.5822000, 1002.2149000, 0.0000000, 0.0000000, 89.8800000); //
	CreateDynamicObject(1495, 239.6586000, 118.0799000, 1002.2149000, 0.0000000, 0.0000000, 89.8800000); //
	CreateDynamicObject(1495, 253.2180900, 109.6026000, 1002.2149000, 0.0000000, 0.0000000, 89.8800000); //
	CreateDynamicObject(1495, 253.2337000, 125.7497000, 1002.2149000, 0.0000000, 0.0000000, 89.8800000); //
	
	// hissen
	
	CreateDynamicObject(18756, 266.9829400, 114.0203600, 1005.5512700, 0.0000000, 0.0000000, -90.2400000); //
	
	// locker
	
	CreateDynamicObject(14782, 259.6920800, 119.6438200, 1003.1931200, 0.0000000, 0.0000000, -90.6599900); //


    // Doors & Cells

	door0 = CreateObject(1495, 253.19176, 109.61185, 1002.21490,   0.00000, 0.00000, -90.12001); //object(gen_doorext01)(1)
	door1 = CreateObject(1495, 239.62959, 118.09150, 1002.21490,   0.00000, 0.00000, -90.12000); //object(gen_doorext01)(2)
	door2 = CreateObject(1495, 239.55771, 125.59232, 1002.21490,   0.00000, 0.00000, -90.12000); //object(gen_doorext01)(2)
	door3 = CreateObject(1495, 253.20477, 125.75697, 1002.21490,   0.00000, 0.00000, -90.12000); //object(gen_doorext01)(2)
	cell0 = CreateObject(1567, 1491.2148438, -1764.9000244, 3284.2504883, 0.0000000, 0.0000000, 0.0000000); //object(gen_wardrobe)(2)
	cell1 = CreateObject(1567, 1494.4121094, -1764.9000244, 3284.2504883, 0.0000000, 0.0000000, 0.0000000); //object(gen_wardrobe)(3)
	cell2 = CreateObject(1567, 1497.6113281, -1764.9000244, 3284.2504883, 0.0000000, 0.0000000, 0.0000000); //object(gen_wardrobe)(4)
	cell3 = CreateObject(1567, 1500.8144531, -1764.9000244, 3284.2504883, 0.0000000, 0.0000000, 0.0000000); //object(gen_wardrobe)(6)
	cell4 = CreateObject(1567, 1500.8199463, -1761.5100098, 3284.2504883, 0.0000000, 0.0000000, 0.0000000); //object(gen_wardrobe)(7)
	cell5 = CreateObject(1567, 1491.2209473, -1761.5000000, 3284.2504883, 0.0000000, 0.0000000, 0.0000000); //object(gen_wardrobe)(8)
	cell6 = CreateObject(1567, 1494.4189453, -1761.5100098, 3284.2504883, 0.0000000, 0.0000000, 0.0000000); //object(gen_wardrobe)(9)
	cell7 = CreateObject(1567, 1497.6199951, -1761.5100098, 3284.2504883, 0.0000000, 0.0000000, 0.0000000); //object(gen_wardrobe)(10)

	/*
	Objects converted: 12
	Vehicles converted: 0
	Vehicle models found: 0
	----------------------
	In the time this conversion took to finish the US national debt has risen by about $147.86!
	*/
	
	// Gas Station Barriers
	
	CreateDynamicObject(978, 1941.1564900, -1768.1539300, 13.4607000, 0.0000000, 0.0000000, 90.3600000); //
	CreateDynamicObject(978, 1941.2105700, -1777.5327100, 13.4607000, 0.0000000, 0.0000000, 90.3600000); //
	CreateDynamicObject(978, 1942.1558800, -1768.2347400, 13.4607000, 0.0000000, 0.0000000, 270.3800000); //
	CreateDynamicObject(978, 1942.1882300, -1777.6180400, 13.4607000, 0.0000000, 0.0000000, 270.3800000); //

	// Libery City Restaurant fix
	
	CreateDynamicObject(2957, -796.2642800, 492.3331600, 1367.9335900, 0.0000000, 0.0000000, -87.6000100); //
	return 1;
}

public OnGameModeExit()
{
    TextDrawDestroy(ServerTimeTXT);
    FadeExit();
    
	for(new i=1; i < MAX_DVEHICLES; i++)
	{
		if(VehicleCreated[i] == 2)
		{
			VehicleWorld[i] = 100;
			SetVehiclePos(VehicleID[i], 154.8577, 213.5532, -0.4741);
			SaveVehicle(i);
		}
	}
    
    new File:file = fopen("DroppedGuns.ini", io_append);
    if(file)
    {
        fclose(file);
		for(new g = 0, buffer[50]; g < MAX_OBJ; g++)
		{
			format(buffer, sizeof(buffer), "%f, %f, %f, %d, %d, %d, %d\n", 
			dGunData[g][ObjPos][0], 
			dGunData[g][ObjPos][1], 
			dGunData[g][ObjPos][2], 
			dGunData[g][ObjData][0], 
			dGunData[g][ObjData][1], 
			dGunData[g][ObjInt], 
			dGunData[g][ObjWorld]);
			if(g == 0) file = fopen("DroppedGuns.ini", io_write);
			else file = fopen("DroppedGuns.ini", io_append);
			fwrite(file, buffer);
			fclose(file);
			if(dGunData[g][ObjData][0] > 0 && dGunData[g][ObjPos][1] != 0)
			{
			    DestroyDynamicObject(dGunData[g][ObjID]);
				printf("* %s saved: %f, %f, %f, %f, %f", GunNames[dGunData[g][ObjData][0]], dGunData[g][ObjPos][0], dGunData[g][ObjPos][1], dGunData[g][ObjPos][2]-1, dGunData[g][ObjInt], dGunData[g][ObjWorld]);
			}
		}
    }

    for(new id = 1; id < sizeof(BusinessInfo); id++)
    {
        new file4[40];
	    format(file4, sizeof(file4), BPATH, id);
	    new INI:File = INI_Open(file4);
	    INI_SetTag(File, "data");
	    INI_WriteInt(File, "bOwned", BusinessInfo[id][bOwned]);
	    INI_WriteInt(File, "bPrice", BusinessInfo[id][bPrice]);
	    INI_WriteString(File, "bOwner", BusinessInfo[id][bOwner]);
	    INI_WriteInt(File, "bType", BusinessInfo[id][bType]);
	    INI_WriteInt(File, "bLocked", BusinessInfo[id][bLocked]);
	    INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
	    INI_WriteFloat(File, "bEntranceX", BusinessInfo[id][bEntranceX]);
	    INI_WriteFloat(File, "bEntranceY", BusinessInfo[id][bEntranceY]);
	    INI_WriteFloat(File, "bEntranceZ", BusinessInfo[id][bEntranceZ]);
	    INI_WriteFloat(File, "bEntranceA", BusinessInfo[id][bEntranceA]);
	    INI_WriteFloat(File, "bExitX", BusinessInfo[id][bExitX]);
	    INI_WriteFloat(File, "bExitY", BusinessInfo[id][bExitY]);
	    INI_WriteFloat(File, "bExitZ", BusinessInfo[id][bExitZ]);
	    INI_WriteFloat(File, "bExitA", BusinessInfo[id][bExitA]);
	    INI_WriteInt(File, "bInt", BusinessInfo[id][bInt]);
	    INI_WriteInt(File, "bWorld", BusinessInfo[id][bWorld]);
	    INI_WriteInt(File, "bInsideInt", BusinessInfo[id][bInsideInt]);
	    INI_WriteInt(File, "bInsideWorld", BusinessInfo[id][bInsideWorld]);
	    INI_WriteString(File, "bName", BusinessInfo[id][bName]);
	    INI_Close(File);
    }

    for(new idz = 1; idz < sizeof(HouseInfo); idz++)
    {
        new file4[40];
	    format(file4, sizeof(file4), HPATH, idz);
	    new INI:File = INI_Open(file4);
	    INI_SetTag(File, "data");
	    INI_WriteInt(File, "hOwned", HouseInfo[idz][hOwned]);
	    INI_WriteInt(File, "hPrice", HouseInfo[idz][hPrice]);
	    INI_WriteString(File, "hOwner", HouseInfo[idz][hOwner]);
	    INI_WriteInt(File, "hLocked", HouseInfo[idz][hLocked]);
	    INI_WriteInt(File, "hMoney", HouseInfo[idz][hMoney]);
	    INI_WriteFloat(File, "hEntranceX", HouseInfo[idz][hEntranceX]);
	    INI_WriteFloat(File, "hEntranceY", HouseInfo[idz][hEntranceY]);
	    INI_WriteFloat(File, "hEntranceZ", HouseInfo[idz][hEntranceZ]);
	    INI_WriteFloat(File, "hEntranceA", HouseInfo[idz][hEntranceA]);
	    INI_WriteFloat(File, "hExitX", HouseInfo[idz][hExitX]);
	    INI_WriteFloat(File, "hExitY", HouseInfo[idz][hExitY]);
	    INI_WriteFloat(File, "hExitZ", HouseInfo[idz][hExitZ]);
	    INI_WriteFloat(File, "hExitA", HouseInfo[idz][hExitA]);
	    INI_WriteInt(File, "hInt", HouseInfo[idz][hInt]);
	    INI_WriteInt(File, "hWorld", HouseInfo[idz][hWorld]);
	    INI_WriteInt(File, "hInsideInt", HouseInfo[idz][hInsideInt]);
	    INI_WriteInt(File, "hInsideWorld", HouseInfo[idz][hInsideWorld]);
	    INI_WriteInt(File, "hWeapon1", HouseInfo[idz][hWeapon1]);
	    INI_WriteInt(File, "hWeapon2", HouseInfo[idz][hWeapon2]);
	    INI_WriteInt(File, "hWeapon3", HouseInfo[idz][hWeapon3]);
	    INI_WriteInt(File, "hWeapon4", HouseInfo[idz][hWeapon4]);
	    INI_WriteInt(File, "hWeapon5", HouseInfo[idz][hWeapon5]);
	    INI_WriteInt(File, "hWeapon6", HouseInfo[idz][hWeapon6]);
	    INI_WriteInt(File, "hWeapon7", HouseInfo[idz][hWeapon7]);
	    INI_WriteInt(File, "hWeapon8", HouseInfo[idz][hWeapon8]);
	    INI_WriteInt(File, "hWeapon9", HouseInfo[idz][hWeapon9]);
	    INI_WriteInt(File, "hWeapon10", HouseInfo[idz][hWeapon10]);
	    INI_WriteInt(File, "hAmmo1", HouseInfo[idz][hAmmo1]);
	    INI_WriteInt(File, "hAmmo2", HouseInfo[idz][hAmmo2]);
	    INI_WriteInt(File, "hAmmo3", HouseInfo[idz][hAmmo3]);
	    INI_WriteInt(File, "hAmmo4", HouseInfo[idz][hAmmo4]);
	    INI_WriteInt(File, "hAmmo5", HouseInfo[idz][hAmmo5]);
	    INI_WriteInt(File, "hAmmo6", HouseInfo[idz][hAmmo6]);
	    INI_WriteInt(File, "hAmmo7", HouseInfo[idz][hAmmo7]);
	    INI_WriteInt(File, "hAmmo8", HouseInfo[idz][hAmmo8]);
	    INI_WriteInt(File, "hAmmo9", HouseInfo[idz][hAmmo9]);
	    INI_WriteInt(File, "hAmmo10", HouseInfo[idz][hAmmo10]);
	    INI_WriteInt(File, "hOutsideInt", HouseInfo[idz][hOutsideInt]);
	    INI_WriteInt(File, "hOutsideWorld", HouseInfo[idz][hOutsideWorld]);
	    INI_WriteInt(File, "hLSD", HouseInfo[idz][hLSD]);
	    INI_WriteInt(File, "hCocaine", HouseInfo[idz][hCocaine]);
	    INI_WriteInt(File, "hMarijuana", HouseInfo[idz][hMarijuana]);
	    INI_WriteInt(File, "hMeth", HouseInfo[idz][hMeth]);
	    INI_WriteInt(File, "hEcstasy", HouseInfo[idz][hEcstasy]);
	    INI_WriteInt(File, "hHeroin", HouseInfo[idz][hHeroin]);
	    INI_WriteInt(File, "hCrack", HouseInfo[idz][hCrack]);
	    INI_WriteInt(File, "hHouseCP", HouseInfo[idz][HouseCP]);
	    INI_Close(File);
    }

    for(new idv = 1; idv < sizeof(FactionInfo); idv++)
    {
        new file4[40];
	    format(file4, sizeof(file4), FPATH, idv);
	    new INI:File = INI_Open(file4);
	    INI_SetTag(File, "data");
	    INI_WriteInt(File, "Members", FactionInfo[idv][fMembers]);
	    INI_WriteInt(File, "ID", FactionInfo[idv][fID]);
	    INI_WriteString(File, "Name", FactionInfo[idv][fName]);
	    INI_WriteString(File, "Leader", FactionInfo[idv][fLeader]);
	    INI_WriteString(File, "Information", FactionInfo[idv][fInformation]);
	    INI_WriteString(File, "Rank1", FactionInfo[idv][fRank1]);
	    INI_WriteString(File, "Rank2", FactionInfo[idv][fRank2]);
	    INI_WriteString(File, "Rank3", FactionInfo[idv][fRank3]);
	    INI_WriteString(File, "Rank4", FactionInfo[idv][fRank4]);
	    INI_WriteString(File, "Rank5", FactionInfo[idv][fRank5]);
	    INI_WriteString(File, "Rank6", FactionInfo[idv][fRank6]);
	    INI_WriteInt(File, "Type", FactionInfo[idv][fType]);
	    INI_Close(File);
    }

	KillTimer(maintimer);
	KillTimer(speedotimer);
	KillTimer(savetimer);
	//TextDrawDestroy(SpeedoBox);
	
	for(new i=1; i < MAX_DEALERSHIPS; i++)
	{
		if(DealershipCreated[i])
		{
			Delete3DTextLabel(DealershipLabel[i]);
		}
	}
	for(new i=1; i < MAX_FUEL_STATIONS; i++)
	{
		if(FuelStationCreated[i])
		{
			Delete3DTextLabel(FuelStationLabel[i]);
		}
	}
	return 1;
}

//=========================ANIMATIONS=========================

CMD:crack(playerid, params[])
{
    if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /crack [1-2]");
    if(!strcmp(params, "1", true))
    {
   		ApplyPlayerAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(params, "2", true))
    {
   		ApplyPlayerAnimation(playerid, "CRACK", "crckidle1", 4.0, 1, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:chat(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "MISC", "IDLE_CHAT_02", 2.0, 1, 0, 0, 0, 10000, 1);
	return 1;
}

CMD:hike(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "PED", "idle_taxi", 3.0, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:caract(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "PED", "TAP_HAND", 4.0, 1, 0 , 0, 0, 0, 1);
	return 1;
}

CMD:give(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "KISSING", "gift_give", 3.0, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:liftup(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "CARRY", "LIFTUP", 4.0, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:putdown(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "CARRY", "PUTDWN", 4.0, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:pull(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "AIRPORT", "thrw_barl_thrw ", 3.0, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:cry(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "GRAVEYARD", "MRNF_LOOP", 4.0, 1, 0, 0, 0, 0, 1);
	return 1;
}

CMD:mourn(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "GRAVEYARD", "MRNM_LOOP", 4.0, 1, 0, 0, 0, 0, 1);
	return 1;
}

CMD:face(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "PED", "facanger", 3.0, 1, 1, 1, 1, 100, 1);
	return 1;
}

CMD:endchat(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "PED", "endchat_01", 8.0, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:show(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "ON_LOOKERS", "point_loop", 4.0, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:shoutanim(playerid, params[])
{
    ApplyPlayerAnimation(playerid, "ON_LOOKERS", "shout_loop", 4.0, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:look(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "ON_LOOKERS", "lkup_loop", 4.0, 1, 0, 0, 0, 0, 1);
	return 1;
}

CMD:drunk(playerid, params[])
{
	ApplyAnimation(playerid, "PED", "WALK_DRUNK", 4.1, 1, 1, 1, 1, 1);
	return 1;
}

CMD:play(playerid, params[])
{
    if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /play [1-3]");
    if(!strcmp(params, "1", true))
    {
        ApplyPlayerAnimation(playerid, "CRIB", "PED_CONSOLE_LOOP", 4.0, 1, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(params, "2", true))
    {
        ApplyPlayerAnimation(playerid, "CRIB", "PED_CONSOLE_WIN", 4.0, 0, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(params, "3", true))
    {
        ApplyPlayerAnimation(playerid, "CRIB", "PED_CONSOLE_LOOSE", 4.0, 0, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:pee(playerid, params[])
{
    if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /pee [1-2]");
    if(!strcmp(params, "1", true))
    {
        ApplyPlayerAnimation(playerid, "PAULNMAC", "PISS_IN", 4.0, 0, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(params, "2", true))
    {
        SetPlayerSpecialAction(playerid, 68);
    }
    return 1;
}

CMD:wank(playerid, params[])
{
    if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /wank [1-2]");
    if(!strcmp(params, "1", true))
    {
        ApplyPlayerAnimation(playerid, "PAULNMAC", "WANK_IN", 4.0, 0, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(params, "2", true))
    {
        ApplyPlayerAnimation(playerid, "PAULNMAC", "WANK_LOOP", 4.0, 1, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:sit(playerid, params[])
{

    if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /sit [1-3]");
    if(!strcmp(params, "1", true))
    {
		ApplyPlayerAnimation(playerid, "MISC", "SEAT_LR", 4.0, 1, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(params, "2", true))
    {
		ApplyPlayerAnimation(playerid, "MISC", "SEAT_TALK_01", 4.0, 1, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(params, "3", true))
    {
		ApplyPlayerAnimation(playerid, "BEACH", "PARKSIT_M_LOOP", 4.0, 1, 0, 0, 0, 0, 1);
    }
	return 1;
}

CMD:bball(playerid, params[])
{
    if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /bball [1-6]");
    if(!strcmp(params, "1", true))
    {
		ApplyPlayerAnimation(playerid, "BSKTBALL", "BBALL_JUMP_SHOT", 4.0, 0, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(params, "2", true))
    {
		ApplyPlayerAnimation(playerid, "BSKTBALL", "BBALL_DEF_LOOP", 4.0, 1, 1, 0, 1, 0, 1);
    }
    else if(!strcmp(params, "3", true))
    {
		ApplyPlayerAnimation(playerid, "BSKTBALL", "BBALL_PICKUP", 4.0, 0, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(params, "4", true))
    {
		ApplyPlayerAnimation(playerid, "BSKTBALL", "BBALL_DNK", 4.0, 0, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(params, "5", true))
    {
		ApplyPlayerAnimation(playerid, "BSKTBALL", "BBALL_IDLE", 4.0, 1, 0, 0, 1, 0, 1);
    }
    else if(!strcmp(params, "6", true))
    {
		ApplyPlayerAnimation(playerid, "BSKTBALL", "BBALL_IDLE2", 4.0, 1, 0, 0, 1, 0, 1);
    }
	return 1;
}

CMD:scratch(playerid, params[])
{
    ApplyPlayerAnimation(playerid, "MISC", "Scratchballs_01", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:reload(playerid, params[])
{
    ApplyPlayerAnimation(playerid, "COLT45", "COLT45_RELOAD", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:injured(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
	return 1;
}


CMD:gsign(playerid, params[])
{
    if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /gsign [1-8]");
    if(!strcmp(params, "1", true))
    {
    	ApplyPlayerAnimation(playerid, "GHANDS", "GSIGN1", 4.0, 0, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(params, "2", true))
    {
    	ApplyPlayerAnimation(playerid, "GHANDS", "GSIGN2", 4.0, 0, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(params, "3", true))
    {
        ApplyPlayerAnimation(playerid, "GHANDS", "GSIGN3", 4.0, 0, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(params, "4", true))
    {
        ApplyPlayerAnimation(playerid, "GHANDS", "GSIGN4", 4.0, 0, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(params, "5", true))
    {
        ApplyPlayerAnimation(playerid, "GHANDS", "GSIGN5", 4.0, 0, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(params, "6", true))
    {
        ApplyPlayerAnimation(playerid, "GHANDS", "GSIGN1LH", 4.0, 0, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(params, "7", true))
    {
        ApplyPlayerAnimation(playerid, "GHANDS", "GSIGN2LH", 4.0, 0, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(params, "8", true))
    {
        ApplyPlayerAnimation(playerid, "GHANDS", "GSIGN5LH", 4.0, 0, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:chill(playerid, params[])
{
    if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /chill [1-3]");
    if(!strcmp(params, "1", true))
    {
    	ApplyPlayerAnimation(playerid, "RAPPING", "RAP_A_Loop", 4.1, 1, 1, 1, 1, 1, 1);
    }
    else if(!strcmp(params, "2", true))
    {
    	ApplyPlayerAnimation(playerid, "RAPPING", "RAP_A_OUT", 4.1, 0, 1, 1, 1, 1, 1);
    }
    else if(!strcmp(params, "3", true))
    {
        ApplyPlayerAnimation(playerid, "RAPPING", "RAP_B_Loop", 4.1, 1, 1, 1, 1, 1, 1);
    }
    return 1;
}

CMD:walkstyle(playerid, params[])
{
	if(PlayerInfo[playerid][pDonator] < 1) return SCM(playerid, COLOR_LIGHTRED, "You are not a donator.");
	
    if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /walkstyle [1-4]");
    if(!strcmp(params, "1", true))
    {
		PlayerInfo[playerid][pWalkStyle] = 1;
		SCM(playerid, COLOR_WHITE, "Congratulations! You have set your new walkstyle!");
    }
    else if(!strcmp(params, "2", true))
    {
        PlayerInfo[playerid][pWalkStyle] = 2;
        SCM(playerid, COLOR_WHITE, "Congratulations! You have set your new walkstyle!");
    }
    else if(!strcmp(params, "3", true))
    {
        PlayerInfo[playerid][pWalkStyle] = 3;
        SCM(playerid, COLOR_WHITE, "Congratulations! You have set your new walkstyle!");
    }
    else if(!strcmp(params, "4", true))
    {
        PlayerInfo[playerid][pWalkStyle] = 4;
        SCM(playerid, COLOR_WHITE, "Congratulations! You have set your new walkstyle!");
    }
    return 1;
}

CMD:walk(playerid, params[])
{
    if(PlayerInfo[playerid][pWalkStyle] == 3)
    {
        ApplyPlayerAnimation(playerid, "PED", "WALK_player", 4.1, 1, 1, 1, 1, 1, 1);
    }
    else if(PlayerInfo[playerid][pWalkStyle] == 1)
    {
        ApplyPlayerAnimation(playerid, "PED", "WALK_gang1", 4.1, 1, 1, 1, 1, 1, 1);
    }
    else if(PlayerInfo[playerid][pWalkStyle] == 2)
    {
        ApplyPlayerAnimation(playerid, "PED", "WALK_gang2", 4.1, 1, 1, 1, 1, 1, 1);
    }
    else if(PlayerInfo[playerid][pWalkStyle] == 4)
    {
        ApplyPlayerAnimation(playerid, "PED", "WALK_old", 4.1, 1, 1, 1, 1, 1, 1);
    }
    return 1;
}

CMD:tag(playerid, params[])
{
    if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /tag [1-3]");
    if(!strcmp(params, "1", true))
    {
        ApplyPlayerAnimation(playerid, "GRAFFITI", "GRAFFITI_CHKOUT", 4.0, 0, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(params, "2", true))
    {
        ApplyPlayerAnimation(playerid, "GRAFFITI", "SPRAYCAN_FIRE", 4.0, 0, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(params, "3", true))
    {
        ApplyPlayerAnimation(playerid, "SPRAYCAN", "SPRAYCAN_FULL", 4.0, 0, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:camera(playerid, params[])
{
    new
	give[5];

    if(sscanf(params, "s[5]", give)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /camera [1-4]");
    if(!strcmp(give, "1", true))
    {
        ApplyPlayerAnimation(playerid, "CAMERA", "camcrch_cmon", 4.1, 0, 1, 1, 1, 1, 1);
    }
    else if(!strcmp(give, "2", true))
    {
        ApplyPlayerAnimation(playerid, "CAMERA", "camcrch_idleloop ", 4.1, 0, 1, 1, 1, 1, 1);
    }
    else if(!strcmp(give, "3", true))
    {
        ApplyPlayerAnimation(playerid, "CAMERA", "camstnd_to_camcrch", 4.1, 0, 1, 1, 1, 1, 1);
    }
    else if(!strcmp(give, "4", true))
    {
        ApplyPlayerAnimation(playerid, "CAMERA", "PICCRCH_TAKE", 4.0, 1, 0, 0, 0, 0);
    }
    return 1;
}

CMD:rap(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "RAPPING", "RAP_A_Loop", 4.0, 1, 0, 0, 0, 0, 1);
	return 1;
}

CMD:think(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "COP_AMBIENT", "Coplook_think", 4.1, 0, 1, 1, 1, 1, 1);
	return 1;
}

CMD:box(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "GYMNASIUM", "GYMshadowbox", 4.0, 1, 1, 1, 1, 0, 1);
	return 1;
}

CMD:tired(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "PED", "IDLE_tired", 3.0, 1, 0, 0, 0, 0, 1);
	return 1;
}

CMD:stance(playerid, params[])
{
    new
	give[3];

    if(sscanf(params, "s[3]", give)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /stance [1-2]");
    if(!strcmp(give, "1", true))
    {
   		LoopingAnim(playerid, "DEALER", "DEALER_IDLE", 4.0, 1, 0, 0, 0, 0, 1);
    }
	else if(!strcmp(give, "2", true))
    {
		OnePlayAnim(playerid, "BAR", "BARman_idle", 2.0, 0, 0, 0, 0, 0, 1);
    }
	return 1;
}

CMD:bar(playerid, params[])
{
    new
	give[3];

    if(sscanf(params, "s[3]", give)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /bar [1-2]");
    if(!strcmp(give, "1", true))
    {
		ApplyPlayerAnimation(playerid, "BAR", "Barserve_bottle", 2.0, 0, 0, 0, 0, 0, 1);
    }
	else if(!strcmp(give, "2", true))
    {
		ApplyPlayerAnimation(playerid, "BAR", "Barserve_give", 2.0, 0, 0, 0, 0, 0, 1);
    }
	return 1;
}

CMD:bat(playerid, params[])
{
    new
	give[4];

    if(sscanf(params, "s[4]", give)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /bat [1-3]");
    if(!strcmp(give, "1", true))
    {
		ApplyPlayerAnimation(playerid, "BASEBALL", "Bat_IDLE", 2.0, 0, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(give, "2", true))
    {
		ApplyPlayerAnimation(playerid, "CRACK", "Bbalbat_Idle_01", 2.0, 0, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(give, "3", true))
    {
		ApplyPlayerAnimation(playerid, "CRACK", "Bbalbat_Idle_02", 2.0, 0, 0, 0, 0, 0, 1);
    }
	return 1;
}

CMD:lean(playerid, params[])
{
	new
	give[7];

    if(sscanf(params, "s[7]", give)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /lean [1-2]");
    if(!strcmp(give, "1", true))
    {
   		ApplyPlayerAnimation(playerid, "GANGS", "leanIDLE", 4.0, 0, 1, 1, 1, 0, 1);
    }
    if(!strcmp(give, "2", true))
    {
   		ApplyPlayerAnimation(playerid, "MISC", "Plyrlean_loop", 4.1, 1, 0, 0, 0, 0);
    }
	return 1;
}

CMD:dance(playerid, params[])
{
    new
	give[7];

    if(sscanf(params, "s[7]", give)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /dance [1-5]");
    if(!strcmp(give, "1", true))
    {
   		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
    }
    if(!strcmp(give, "2", true))
    {
   		ApplyPlayerAnimation(playerid, "DANCING", "DNCE_M_A", 4.0, 1, 0, 0, 0, 0, 1);
    }
    if(!strcmp(give, "3", true))
    {
   		ApplyPlayerAnimation(playerid, "DANCING", "DNCE_M_B", 4.0, 1, 0, 0, 0, 0, 1);
    }
    if(!strcmp(give, "4", true))
    {
   		ApplyPlayerAnimation(playerid, "DANCING", "DNCE_M_D", 4.0, 1, 0, 0, 0, 0, 1);
    }
    if(!strcmp(give, "5", true))
    {
   		ApplyPlayerAnimation(playerid, "DANCING", "DNCE_M_E", 4.0, 1, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:searchfiles(playerid, params[])
{
    new
	give[7];

    if(sscanf(params, "s[7]", give)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /searchfiles [1-3]");
    if(!strcmp(give, "1", true))
    {
   		ApplyPlayerAnimation(playerid, "COP_AMBIENT", "COPBROWSE_IN", 4.0, 0, 1, 0, 1, 0, 1);
    }
    if(!strcmp(give, "2", true))
    {
   		ApplyPlayerAnimation(playerid, "COP_AMBIENT", "COPBROWSE_NOD", 4.0, 0, 1, 0, 1, 0, 1);
    }
    if(!strcmp(give, "3", true))
    {
   		ApplyPlayerAnimation(playerid, "COP_AMBIENT", "COPBROWSE_OUT", 4.0, 0, 1, 0, 0, 0, 1);
    }
    return 1;
}

CMD:kiss(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "BD_Fire", "grlfrd_kiss_03", 2.0, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:cpr(playerid, params[])
{
    ApplyPlayerAnimation(playerid, "MEDIC", "CPR", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:handsup(playerid, params[])
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
	return 1;
}

CMD:bomb(playerid, params[])
{
	ClearAnimations(playerid);
	ApplyPlayerAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1); // Place Bomb
	return 1;
}

CMD:getarrested(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1, 1); // Gun Arrest
	return 1;
}

CMD:laugh(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0, 1); // Laugh
	return 1;
}

CMD:lookout(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0, 1); // Rob Lookout
	return 1;
}

CMD:carr(playerid, params[])
{
	new model;
	new Float:X, Float:Y, Float:Z;
    if(sscanf(params, "i", model)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /carr [modelid]");
    GetPlayerPos(playerid, X, Y, Z);
    
    if(model < 400 || model > 611) return SCM(playerid, COLOR_LIGHTRED, "id's 400-600.");
    
    CreateVehicle(model, X+1, Y+1, Z+1, 0.0, 0, 0, 9999);
	return 1;
}

CMD:aim(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0, 1); // Rob
	return 1;
}

CMD:crossarms(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 0, 1, 1, -1, 1); // Arms crossed
	return 1;
}

CMD:car(playerid, params[])
{
    new
	give[4];

    if(sscanf(params, "s[4]", give)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /car [1-3]");
    if(!strcmp(give, "1", true))
    {
   		ApplyPlayerAnimation(playerid, "CAR", "Fixn_Car_Loop", 4.0, 1, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(give, "2", true))
    {
        ApplyPlayerAnimation(playerid, "CAR", "Fixn_Car_Out", 4.1, 1, 1, 1, 1, 1, 1);
    }
    else if(!strcmp(give, "3", true))
    {
        ApplyPlayerAnimation(playerid, "CAR", "flag_drop", 4.1, 1, 1, 1, 1, 1, 1);
    }
    return 1;
}

CMD:lay(playerid, params[])
{
    new
	give[4];

    if(sscanf(params, "s[4]", give)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /lay [1-4]");
    if(!strcmp(give, "1", true))
    {
   		ApplyPlayerAnimation(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(give, "2", true))
    {
        ApplyPlayerAnimation(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(give, "3", true))
    {
        ApplyPlayerAnimation(playerid, "CRACK", "crckidle4", 4.0, 1, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(give, "4", true))
    {
        ApplyPlayerAnimation(playerid, "BEACH", "PARKSIT_W_LOOP", 4.0, 1, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:what(playerid, params[])
{
    new
	give[3];

    if(sscanf(params, "s[3]", give)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /what [1-2]");
    if(!strcmp(give, "1", true))
    {
        ApplyPlayerAnimation(playerid, "RIOT", "RIOT_ANGRY", 4.0, 0, 0, 0, 0, 0, 0);
    }
    else if(!strcmp(give, "2", true))
    {
        ApplyPlayerAnimation(playerid, "benchpress", "gym_bp_celebrate", 4.0, 0, 0, 0, 0, 0, 0);
    }
    return 1;
}

CMD:hide(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0, 1);
	return 1;
}

CMD:vomit(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0, 1); // Vomit BAH!
	return 1;
}

CMD:eat(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "FOOD", "EAT_PIZZA", 4.0, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:wave(playerid, params[])
{
    new
	give[3];

    if(sscanf(params, "s[3]", give)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /wave [1-3]");
    if(!strcmp(give, "1", true))
    {
   		ApplyPlayerAnimation(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(give, "2", true))
    {
        ApplyPlayerAnimation(playerid, "KISSING", "GFWAVE2", 4.0, 0, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(give, "3", true))
    {
        ApplyPlayerAnimation(playerid, "KISSING", "BD_GF_WAVE", 4.0, 0, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:strip(playerid, params[])
{
    new
	give[3];

    if(sscanf(params, "s[4]", give)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /strip [1-4]");
    if(!strcmp(give, "1", true))
    {
   		ApplyPlayerAnimation(playerid, "STRIP", "STRIP_A", 4.0, 1, 0, 0, 0, 0);
    }
    else if(!strcmp(give, "2", true))
    {
        ApplyPlayerAnimation(playerid, "STRIP", "STR_LOOP_A", 4.0, 1, 0, 0, 0, 0);
    }
    else if(!strcmp(give, "3", true))
    {
        ApplyPlayerAnimation(playerid, "STRIP", "STR_LOOP_B", 4.0, 1, 0, 0, 0, 0);
    }
    else if(!strcmp(give, "4", true))
    {
        ApplyPlayerAnimation(playerid, "STRIP", "STR_LOOP_C", 4.0, 1, 0, 0, 0, 0);
    }
    return 1;
}

CMD:chant(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "RIOT", "RIOT_CHANT", 4.0, 1, 1, 1, 1, 0, 1);
	return 1;
}

CMD:slap(playerid, params[])
{
    new
	give[3];

    if(sscanf(params, "s[3]", give)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /slap [1-2]");
    if(!strcmp(give, "1", true))
    {
   		ApplyPlayerAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0, 1);
    }
    else if(!strcmp(give, "2", true))
    {
        ApplyPlayerAnimation(playerid, "FLOWERS", "FLOWER_ATTACK_M", 4.0, 0, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:deal(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0, 1); // Deal Drugs
 	return 1;
}

CMD:fucku(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "PED", "fucku", 4.0, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:taichi(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "PARK", "Tai_Chi_Loop", 4.0, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:chairsit(playerid, params[])
{
	ApplyPlayerAnimation(playerid, "BAR", "dnk_stndF_loop", 4.0, 1, 0, 0, 0, 1, 1);
   	return 1;
}

CMD:stopanim(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid))
    {
        ApplyPlayerAnimation(playerid, "CAR_CHAT", "CAR_Sc1_FR", 4.1, 0, 0, 0, 1, 1, 1);
	}
	else
	{
	    ClearAnimations(playerid);
	}
	return 1;
}

CMD:tazer(playerid, params[])
{
	new sendername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(PlayerInfo[playerid][pFaction] != 2) return SCM(playerid, COLOR_LIGHTRED, "You are not a police officer.");
	if(Tazer[playerid] == 0)
	{
		GivePlayerWeapon(playerid, 23, 100);
		Tazer[playerid] = 1;
		return 1;
	}
	else if(Tazer[playerid] == 1)
	{
	    GivePlayerWeapon(playerid, 24, 100);
		Tazer[playerid] = 0;
		return 1;
	}
	else Tazer[playerid] = 0;
	return 1;
}

//=========================VEHICLE COMMANDS=========================
CMD:fix(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not driving a vehicle!");
	new vehicleid = GetPlayerVehicleID(playerid);
	RepairVehicle(vehicleid);
	return 1;
}

CMD:flip(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not driving a vehicle!");
	new vehicleid = GetPlayerVehicleID(playerid);
	new Float:angle;
	GetVehicleZAngle(vehicleid, angle);
	SetVehicleZAngle(vehicleid, angle);
	return 1;
}

CMD:tow(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] != 2) return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not driving a vehicle!");
	new vehicleid = GetPlayerVehicleID(playerid);
	if(IsTrailerAttachedToVehicle(vehicleid))
	{
		DetachTrailerFromVehicle(vehicleid);
		return 1;
	}
	new Float:x, Float:y, Float:z;
	new Float:dist, Float:closedist=8, closeveh;
	for(new i=1; i < MAX_VEHICLES; i++)
	{
		if(i != vehicleid && GetVehiclePos(i, x, y, z))
		{
			dist = GetPlayerDistanceFromPoint(playerid, x, y, z);
			if(dist < closedist)
			{
				closedist = dist;
				closeveh = i;
			}
		}
	}
	if(!closeveh) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not close to a vehicle!");
	AttachTrailerToVehicle(closeveh, vehicleid);
	return 1;
}

CMD:kph(playerid, params[])
{
	SetPVarInt(playerid, "Speedo", 0);
	SendClientMessage(playerid, COLOR_WHITE, "Speedometer units set to KPH.");
	return 1;
}

CMD:mph(playerid, params[])
{
	SetPVarInt(playerid, "Speedo", 1);
	SendClientMessage(playerid, COLOR_WHITE, "Speedometer units set to MPH.");
	return 1;
}

CMD:vehicle(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not driving a vehicle.");
	new vehicleid = GetPlayerVehicleID(playerid);
	new id = GetVehicleID(vehicleid);
	if(GetPlayerVehicleAccess(playerid, id) < 1)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have the keys for this vehicle.");
	SetPVarInt(playerid, "DialogValue1", id);
	ShowDialog(playerid, DIALOG_VEHICLE);
	return 1;
}

CMD:alock(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	new vehicleid;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		vehicleid = GetPlayerVehicleID(playerid);
	}
	else
	{
		vehicleid = GetClosestVehicle(playerid);
		if(!PlayerToVehicle(playerid, vehicleid, 5.0)) vehicleid = 0;
	}
	if(!vehicleid) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not close to a vehicle.");
	new id = GetVehicleID(vehicleid);
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(doors == 1)
	{
		doors = 0;
		VehicleLock[id] = 0;
		GameTextForPlayer(playerid, "~w~vehicle ~g~unlocked", 3000, 6);
		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	}
	else
	{
		doors = 1;
		VehicleLock[id] = 1;
		GameTextForPlayer(playerid, "~w~vehicle ~r~locked", 3000, 6);
		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	}
	SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SaveVehicle(id);
	return 1;
}

CMD:v(playerid, params[])
{
    if(isnull(params)) return SendClientMessage(playerid, COLOR_GREEN, "[Usage:] /v (lock, get, park, lights, sell, givekeys, buy, eject, ejectall, find, clearmods, trunk, trunkinfo, enter, exit)");
    if(!strcmp(params, "lock", true, 4))
    {
		new vehicleid;
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			vehicleid = GetPlayerVehicleID(playerid);
		}
		else
		{
			vehicleid = GetClosestVehicle(playerid);
			if(!PlayerToVehicle(playerid, vehicleid, 3.5)) vehicleid = 0;
	 	}
		if(!vehicleid) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not close to a vehicle.");
		if(GetVehicleVirtualWorld(vehicleid) != GetPlayerVirtualWorld(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not close to a vehicle.");
		new id = GetVehicleID(vehicleid);
		if(!IsValidVehicle(id)) return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have the keys for this vehicle.");
		if(GetPlayerVehicleAccess(playerid, id) < 2)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have the keys for this vehicle.");
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		if(doors == 1)
		{
			doors = 0;
			VehicleLock[id] = 0;
			GameTextForPlayer(playerid, "~w~vehicle ~g~unlocked", 3000, 6);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		else
		{
			doors = 1;
			VehicleLock[id] = 1;
			GameTextForPlayer(playerid, "~w~vehicle ~r~locked", 3000, 6);
	  		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SaveVehicle(id);
		return 1;
    }
    else if(!strcmp(params, "breakin", true, 7))
    {
  		new vehicleid;
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			vehicleid = GetPlayerVehicleID(playerid);
		}
		else
		{
			vehicleid = GetClosestVehicle(playerid);
			if(!PlayerToVehicle(playerid, vehicleid, 3.5)) vehicleid = 0;
	 	}
		if(!vehicleid) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not close to a vehicle.");
  		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return SCM(playerid, COLOR_LIGHTRED, "You are already in a vehicle.");
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
  		if(doors == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "This vehicle is already unlocked.");
  		if(breaking[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are already breaking in.");
		if(toolkit[playerid] > 0)
		{
  			breakin[playerid] = 60;//change it with the timer time
    		Timer[playerid] = SetTimerEx("timer", 1000, 1, "i", playerid);
		    PlayerActionMessage(playerid, 20.0, "begins to fiddle with the lock of the vehicle.");
		    TogglePlayerControllable(playerid, 0);
		    breaking[playerid] = 1;
		}
    }
    else if(!strcmp(params, "hotwire", true, 7))
    {
        new vehicleid;
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			vehicleid = GetPlayerVehicleID(playerid);
		}
		else
		{
			vehicleid = GetClosestVehicle(playerid);
			if(!PlayerToVehicle(playerid, vehicleid, 3.5)) vehicleid = 0;
	 	}
	 	
	 	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, COLOR_LIGHTRED, "You need to be in a vehicle.");
		if(hotwiring[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are already hotwiring.");
		if(toolkit[playerid] > 0)
		{
  			hotwire[playerid] = 60;//change it with the timer time
    		Timer2[playerid] = SetTimerEx("timer2", 1000, 1, "i", playerid);
		    PlayerActionMessage(playerid, 20.0, "begins to hotwire the vehicle.");
		    TogglePlayerControllable(playerid, 0);
		    SetVehicleParamsEx(vehicleid, engine, lights, 1, doors, bonnet, boot, objective);
		    hotwiring[playerid] = 1;
		}
    }
    else if(!strcmp(params, "trunkinfo", true, 9))
    {
		new vehicleid = GetClosestVehicle(playerid);
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		if(!PlayerToVehicle(playerid, vehicleid, 7.0)) vehicleid = 0;
		if(!vehicleid || IsBicycle(vehicleid) || IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not close to a vehicle!");
		new id = GetVehicleID(vehicleid);
  		if(boot == 0) return SCM(playerid, COLOR_LIGHTRED, "The trunk is closed.");
		SetPVarInt(playerid, "DialogValue1", id);
		ShowDialog(playerid, DIALOG_TRUNK);
		return 1;
    }
    else if(!strcmp(params, "lights", true, 6))
    {
		new string[64];
		new vehicleid = GetPlayerVehicleID(playerid);

	    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	    if(GetPlayerState(playerid) == 2)
	    {
			if(lights != 1)
			{
				SetVehicleParamsEx(vehicleid, engine, 1, alarm, doors, bonnet, boot, 0);
		  		format(string, sizeof(string), "* %s turns the lights on.", GetName(playerid));
		  		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(lights != 0)
			{
				SetVehicleParamsEx(vehicleid, engine, 0, alarm, doors, bonnet, boot, 0);
				format(string, sizeof(string), "* %s turns the lights off.", GetName(playerid));
		  		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
		}
		return 1;
    }
    else if(!strcmp(params, "find", true, 4))
    {
		if(TrackCar[playerid])
	{
		TrackCar[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
		SendClientMessage(playerid, COLOR_WHITE, "You are not tracking your vehicle anymore.");
		return 1;
	}
		new playername[24];
		GetPlayerName(playerid, playername, sizeof(playername));
		new info[256], bool:found;
		for(new i=1; i < MAX_DVEHICLES; i++)
		{
			if(VehicleCreated[i] == VEHICLE_PLAYER && strcmp(VehicleOwner[i], playername) == 0)
			{
				found = true;
				format(info, sizeof(info), "%sID: %d  Name: %s\n", info, i, VehicleNames[VehicleModel[i]-400]);
			}
		}
		if(!found) return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have any vehicles.");
		ShowPlayerDialog(playerid, DIALOG_FINDVEHICLE, DIALOG_STYLE_LIST, "Find Your Vehicle", info, "Find", "Cancel");
		return 1;
    }
    else if(!strcmp(params, "clearmods", true, 9))
    {
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not driving a vehicle.");
		new vehicleid = GetPlayerVehicleID(playerid);
		new id = GetVehicleID(vehicleid);
		if(GetPlayerVehicleAccess(playerid, id) < 2)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "This is not your vehicle.");
		for(new i=0; i < sizeof(VehicleMods[]); i++)
		{
			RemoveVehicleComponent(VehicleID[id], GetVehicleComponentInSlot(VehicleID[id], i));
			VehicleMods[id][i] = 0;
		}
		VehiclePaintjob[id] = 255;
		ChangeVehiclePaintjob(VehicleID[id], 255);
		SaveVehicle(id);
		SendClientMessage(playerid, COLOR_WHITE, "You have removed all modifications from your vehicle.");
	}
 	else if(!strcmp(params, "eject", true, 5))
    {
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not driving a vehicle.");
		new pid, msg[128];
		if(sscanf(params, "s[128]u", params, pid)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /v eject [player]");
		if(!IsPlayerConnected(pid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid player.");
		new vehicleid = GetPlayerVehicleID(playerid);
		if(!IsPlayerInVehicle(pid, vehicleid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Player is not in your vehicle.");
		RemovePlayerFromVehicle(pid);
		format(msg, sizeof(msg), "%s (%d) has ejected you from the vehicle.", PlayerName(playerid), playerid);
		SendClientMessage(pid, COLOR_WHITE, msg);
		format(msg, sizeof(msg), "You have ejected %s (%d) from your vehicle.", PlayerName(pid), pid);
		SendClientMessage(playerid, COLOR_WHITE, msg);
	}
	else if(!strcmp(params, "givekeys", true, 8))
    {
		new pid, id, msg[128];
		if(sscanf(params, "s[128]ud", params, pid, id)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /v givekeys [playerid/partofname] [vehicleid]");
		if(!IsPlayerConnected(pid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid player.");
		if(!IsValidVehicle(id)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid vehicleid.");
		if(GetPlayerVehicleAccess(playerid, id) < 2)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not the owner of this vehicle.");
		if(!PlayerToPlayer(playerid, pid, 10.0)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Player is too far away.");
		SetPVarInt(pid, "CarKeys", id);
		format(msg, sizeof(msg), "You have given your car keys to %s (%d).", PlayerName(pid), pid);
		SendClientMessage(playerid, COLOR_WHITE, msg);
		format(msg, sizeof(msg), "%s (%d) has given you his extra-pair of his vehicle keys.", PlayerName(playerid), playerid);
		SendClientMessage(pid, COLOR_WHITE, msg);
	}
	else if(!strcmp(params, "ejectall", true, 8))
 	{
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not driving a vehicle.");
		new vehicleid = GetPlayerVehicleID(playerid);
		new msg[128];
		format(msg, sizeof(msg), "%s (%d) has ejected you.", PlayerName(playerid), playerid);
		for(new i=0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && i != playerid && IsPlayerInVehicle(i, vehicleid))
			{
				RemovePlayerFromVehicle(i);
				SendClientMessage(i, COLOR_WHITE, msg);
			}
		}
		SendClientMessage(playerid, COLOR_WHITE, "You have ejected all passengers.");
	}
	else if(!strcmp(params, "list", true, 4))
 	{
		new playername[24];
		GetPlayerName(playerid, playername, sizeof(playername));
		new info[256], bool:found;
		for(new i=1; i < MAX_DVEHICLES; i++)
		{
			if(VehicleCreated[i] == VEHICLE_PLAYER && strcmp(VehicleOwner[i], playername) == 0)
			{
				found = true;
				format(info, sizeof(info), "%sID: %d  Name: %s\n", info, i, VehicleNames[VehicleModel[i]-400]);
			}
		}
		if(!found) return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have any vehicles.");
		ShowPlayerDialog(playerid, DIALOG_VEHICLELIST, DIALOG_STYLE_LIST, "Vehicle List", info, "OK", "Cancel");
		return 1;
    }
   	else if(!strcmp(params, "trunk", true, 5))
 	{
		new vehicleid;
		vehicleid = GetClosestVehicle(playerid);
		if(!PlayerToVehicle(playerid, vehicleid, 7.0)) vehicleid = 0;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		if(doors == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "This vehicle is locked.");
		if(boot == 1) boot = 0; else boot = 1;
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		return 1;
    }
   	else if(!strcmp(params, "enter", true, 5))
 	{
        new carid;
		carid = GetClosestVehicle(playerid);
		RVID[playerid] = carid;
		if(PlayerToVehicle(playerid, carid, 7.0))
		{
			GetVehicleParamsEx(carid, engine, lights, alarm, doors, bonnet, boot, objective);
			if(doors == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "This vehicle is locked.");
			if(GetVehicleModel(carid) == 508)
			{
			    SetPlayerPos(playerid, 1.9232, -3.2151, 999.5729);
			    SetPlayerInterior(playerid, 2);
			    SetPlayerVirtualWorld(playerid, RVID[playerid]);
			}
		}
		return 1;
    }
   	else if(!strcmp(params, "exit", true, 4))
 	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 1.9232, -3.2151, 999.5729))
		{
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
      		new Float:vehx, Float:vehy, Float:vehz;
      		new arrvID = RVID[playerid];
          	GetVehiclePos(arrvID, vehx, vehy, vehz);
          	SetPlayerPos(playerid, vehx + 2, vehy, vehz + 2);
			return 1;
		}
    }
   	else if(!strcmp(params, "park", true, 4))
 	{
 		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not inside any vehicle.");
		new vehicleid = GetPlayerVehicleID(playerid);
		new id = GetVehicleID(vehicleid);
		if(GetPlayerVehicleAccess(playerid, id) < 1)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have the keys for this vehicle.");

  		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);

		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, 0, 0, 0, 0, 0, 0, 0);

		GetVehiclePos(VehicleID[id], VehiclePos[id][0], VehiclePos[id][1], VehiclePos[id][2]);
		GetVehicleZAngle(VehicleID[id], VehiclePos[id][3]);
		VehicleInterior[id] = GetPlayerInterior(playerid);
		VehicleWorld[id] = 100;
		SaveVehicle(id);
		
        SetPlayerPos(playerid, x, y, z+1);
	    foreach(new i : Player)
	    {
			if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == vehicleid)
			{
				if(GetPlayerVehicleSeat(i) != 0 && GetPlayerVehicleSeat(i) != 128)
				{
					RemovePlayerFromVehicle(i);
					GetPlayerPos(i, x, y, z);
					SetPlayerPos(i, x, y, z+1);
				}
			}
		}

		SetVehicleVirtualWorld(VehicleID[id], 100);
		SetVehiclePos(VehicleID[id], 154.8577, 213.5532, -0.4741);
		UpdateVehicle(id, 0);

		SendClientMessage(playerid, COLOR_WHITE, "You have parked your vehicle at this position.");
		return 1;
    }
   	else if(!strcmp(params, "get", true, 3))
 	{
 		new vehicleid;
		if(sscanf(params, "s[128]d", params, vehicleid)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /v get [ID]. Check /v list for your vehicle ID.");
		if(!IsValidVehicle(vehicleid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid vehicleid.");
		if(GetPlayerVehicleAccess(playerid, vehicleid) < 1)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't own that vehicle. /v list for your vehicle ID's.");
		if(VehicleWorld[vehicleid] == 100)
		{
			SetVehicleVirtualWorld(VehicleID[vehicleid], 0);
			VehicleWorld[vehicleid] = 0;
			SetVehiclePos(VehicleID[vehicleid], VehiclePos[vehicleid][0], VehiclePos[vehicleid][1], VehiclePos[vehicleid][2]);
			SetVehicleZAngle(VehicleID[vehicleid], VehiclePos[vehicleid][3]);
			
   			GetVehicleParamsEx(VehicleID[vehicleid], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(VehicleID[vehicleid], 0, 0, 0, 0, 0, 0, 0);

	        getcp[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "You have successfully spawned your vehicle.");
			SetPlayerCheckpoint(playerid, VehiclePos[vehicleid][0], VehiclePos[vehicleid][1], VehiclePos[vehicleid][2], 5.0);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "That vehicle is already spawned.");
    }
   	else if(!strcmp(params, "buy", true, 3))
 	{
 	    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 331.8448, 1288.8008, 452.9749)) return SCM(playerid, COLOR_LIGHTRED, "You need to be inside the dealership.");
 	    new info[3000];
		strcat(info, "BMX "COL_GREEN"($1000)\nBike "COL_GREEN"($1000)\nFaggio "COL_GREEN"($1500)", sizeof(info));
		strcat(info, "\nSadler "COL_GREEN"($3000)\nDinghy "COL_GREEN"($3000)\nFreeway "COL_GREEN"($3500)", sizeof(info));
		strcat(info, "\nRumpo "COL_GREEN"($3700)\nPicador "COL_GREEN"($4000)\nVirgo "COL_GREEN"($4200)", sizeof(info));
		strcat(info, "\nManana "COL_GREEN"($4200)\nNebula "COL_GREEN"($4300)\nMoonbeam "COL_GREEN"($4300)", sizeof(info));
		strcat(info, "\nWayfarer "COL_GREEN"($4300)\nOceanic "COL_GREEN"($4600)\nPrimo "COL_GREEN"($5000)", sizeof(info));
		strcat(info, "\nBravura "COL_GREEN"($5000)\nTampa "COL_GREEN"($5000)\nPrevion "COL_GREEN"($5000)", sizeof(info));
		strcat(info, "\nMajestic "COL_GREEN"($5200)\nClub "COL_GREEN"($5500)\nBuccanner "COL_GREEN"($5500)", sizeof(info));
		strcat(info, "\nCadrona "COL_GREEN"($5600)\nMerit "COL_GREEN"($5800)\nStallion "COL_GREEN"($6000)", sizeof(info));
		strcat(info, "\nAdmiral "COL_GREEN"($6200)\nWalton "COL_GREEN"($3000)\nGreenwood "COL_GREEN"($6800)", sizeof(info));
		strcat(info, "\nBobcat "COL_GREEN"($7000)\nWillard "COL_GREEN"($7100)\nSentinel "COL_GREEN"($7500)", sizeof(info));
		strcat(info, "\nGlendale "COL_GREEN"($7100)\nIntruder "COL_GREEN"($7100)\nVincent "COL_GREEN"($7100)", sizeof(info));
		strcat(info, "\nHermes "COL_GREEN"($7200)\nFortune "COL_GREEN"($7300)\nMesa "COL_GREEN"($7300)", sizeof(info));
		strcat(info, "\nCamper "COL_GREEN"($7200)\nHustler "COL_GREEN"($7400)\nEsperanto "COL_GREEN"($7400)", sizeof(info));
		strcat(info, "\nStratum "COL_GREEN"($7500)\nWashington "COL_GREEN"($7800)\nSolair "COL_GREEN"($7800)", sizeof(info));
		strcat(info, "\nSunrise "COL_GREEN"($7900)\nTornado "COL_GREEN"($7900)\nVoodoo "COL_GREEN"($8000)", sizeof(info));
		strcat(info, "\nCabbie "COL_GREEN"($8000)\nFeltzer "COL_GREEN"($8200)\nRemington "COL_GREEN"($8300)", sizeof(info));
		strcat(info, "\nEmperor "COL_GREEN"($8400)\nElegant "COL_GREEN"($8400)\nYosemite "COL_GREEN"($8500)", sizeof(info));
		strcat(info, "\nSavanna "COL_GREEN"($9000)\nBlade "COL_GREEN"($9100)\nRanger "COL_GREEN"($9200)", sizeof(info));
		strcat(info, "\nBroadway "COL_GREEN"($9500)\nRegina "COL_GREEN"($9600)\nRancher "COL_GREEN"($9700)", sizeof(info));
		strcat(info, "\nSabre "COL_GREEN"($10000)\nClover "COL_GREEN"($10000)\nPony "COL_GREEN"($10000)", sizeof(info));
		strcat(info, "\nBlista Compact "COL_GREEN"($10000)\nSlamvan "COL_GREEN"($10000)\nJourney "COL_GREEN"($10000)", sizeof(info));
		strcat(info, "\nPremier "COL_GREEN"($10500)\nPerennial "COL_GREEN"($11000)\nElegy "COL_GREEN"($14000)", sizeof(info));
		strcat(info, "\nStafford "COL_GREEN"($14500)\nBurrito "COL_GREEN"($15000)\nTahoma "COL_GREEN"($15000)", sizeof(info));
		strcat(info, "\nEuro "COL_GREEN"($15500)\nJester "COL_GREEN"($16500)\nHuntley "COL_GREEN"($17000)", sizeof(info));
		strcat(info, "\nLandstalker "COL_GREEN"($17000)\nReefer "COL_GREEN"($18000)\nBuffalo "COL_GREEN"($19000)", sizeof(info));
		strcat(info, "\nUranus "COL_GREEN"($19500)\nComet "COL_GREEN"($20000)\nAlpha "COL_GREEN"($20500)", sizeof(info));
		strcat(info, "\nFlash "COL_GREEN"($21000)\nWindsor "COL_GREEN"($26000)\nMarquis "COL_GREEN"($30000)", sizeof(info));
		strcat(info, "\nSultan "COL_GREEN"($32000)\nStretch "COL_GREEN"($35000)", sizeof(info));
		strcat(info, "\nTropic "COL_GREEN"($38000)\nPhoenix "COL_GREEN"($42000)\nCheetah "COL_GREEN"($46000)", sizeof(info));
		strcat(info, "\nMaverick "COL_GREEN"($65000)\nSanchez "COL_GREEN"($7000)\nZR-350 "COL_GREEN"($37000)\nFCR-900 "COL_GREEN"($15000)\nBullet "COL_GREEN"($44000)\nBanshee "COL_GREEN"($44000)\nMountain Bike"COL_GREEN"($1500)\nQuad"COL_GREEN"($7000)\nHotknife"COL_GREEN"($7400)", sizeof(info));
 	    ShowPlayerDialog(playerid, DIALOG_BUYCAR, DIALOG_STYLE_LIST, "Vehicles", info, "Purchase", "Cancel");
    	return 1;
    }
   	else if(!strcmp(params, "register", true, 8))
 	{
 	    if(!IsPlayerInRangeOfPoint(playerid, 20.0, 2127.4885, -1136.8491, 25.4748)) return SCM(playerid, COLOR_LIGHTRED, "You need to be near the dealership.");
 	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid;
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				vehicleid = GetPlayerVehicleID(playerid);
			}
			new id = GetVehicleID(vehicleid);

			new
			plate = 11111 + random(99999);
			new string[128], string2[128];

			format(string, sizeof(string), "SJ-%d", plate);
			format(string2, sizeof(string2), "%d", plate);
			SetVehicleNumberPlate(vehicleid, string);
			strmid(VehicleNumberPlate[id], string2, 0, sizeof(VehicleNumberPlate[]));
			SaveVehicle(id);
			
			if(PlayerInfo[playerid][pPlate1] == 0)
			{
				
				PlayerInfo[playerid][pPlate1] = plate;
				new INI:File = INI_Open(UserPath(playerid));
				INI_SetTag(File, "data");
				INI_WriteInt(File, "Plate1", PlayerInfo[playerid][pPlate1]);
				INI_Close(File);

				SCM(playerid, -1, "HINT: You have to /v park your vehicle one time for your number plate to show.");
				return 1;
			}
			else if(PlayerInfo[playerid][pPlate2] == 0)
			{
				
				PlayerInfo[playerid][pPlate2] = plate;
				
				new INI:File = INI_Open(UserPath(playerid));
				INI_SetTag(File, "data");
				INI_WriteInt(File, "Plate2", PlayerInfo[playerid][pPlate2]);
				INI_Close(File);

				SCM(playerid, -1, "HINT: You have to /v park your vehicle one time for your number plate to show.");
				return 1;
			}
			else if(PlayerInfo[playerid][pPlate3] == 0)
			{
				
				PlayerInfo[playerid][pPlate3] = plate;
				new INI:File = INI_Open(UserPath(playerid));
				INI_SetTag(File, "data");
				INI_WriteInt(File, "Plate3", PlayerInfo[playerid][pPlate3]);
				INI_Close(File);

				SCM(playerid, -1, "HINT: You have to /v park your vehicle one time for your number plate to show.");
				return 1;
			}
		}
		else return SCM(playerid, COLOR_LIGHTRED, "You need to be in a vehicle.");
    }
   	else if(!strcmp(params, "sell", true, 4))
 	{
		new pid, price, msg[128];
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not driving a vehicle.");
		new vehicleid = GetPlayerVehicleID(playerid);
		new id = GetVehicleID(vehicleid);
		if(sscanf(params, "s[128]ud", params, pid, id, price)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /v sell [playerid/partofname] [price]");
		if(!IsPlayerConnected(pid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid player.");
		if(GetPlayerVehicleAccess(playerid, id) < 1)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have the keys for this vehicle.");

		if(price < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid price.");
		if(!PlayerToPlayer(playerid, pid, 10.0)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Player is too far away.");
		SetPVarInt(pid, "DialogValue1", playerid);
		SetPVarInt(pid, "DialogValue2", price);
		ShowDialog(pid, DIALOG_VEHICLE_SELL);
		format(msg, sizeof(msg), "You have offered %s (%d) to buy your vehicle for $%d.", PlayerName(pid), pid, price);
		SendClientMessage(playerid, COLOR_WHITE, msg);

		if(!strcmp(VehicleNumberPlate[id], PlayerInfo[playerid][pPlate1], false))
		{
			PlayerInfo[playerid][pPlate1] = 0;
			new INI:File = INI_Open(UserPath(playerid));
			INI_SetTag(File, "data");
			INI_WriteInt(File, "Plate1", PlayerInfo[playerid][pPlate1]);
			INI_Close(File);
		}
		else if(!strcmp(VehicleNumberPlate[id], PlayerInfo[playerid][pPlate2], false))
		{
			PlayerInfo[playerid][pPlate2] = 0;
			new INI:File = INI_Open(UserPath(playerid));
			INI_SetTag(File, "data");
			INI_WriteInt(File, "Plate2", PlayerInfo[playerid][pPlate2]);
			INI_Close(File);
		}
		else if(!strcmp(VehicleNumberPlate[id], PlayerInfo[playerid][pPlate3], false))
		{
			PlayerInfo[playerid][pPlate3] = 0;
			new INI:File = INI_Open(UserPath(playerid));
			INI_SetTag(File, "data");
			INI_WriteInt(File, "Plate3", PlayerInfo[playerid][pPlate3]);
			INI_Close(File);
		}

		new
		plate = 11111 + random(99999);
		new string[128];

		format(string, sizeof(string), "SJ-%d", plate);
		SetVehicleNumberPlate(vehicleid, string);
		strmid(VehicleNumberPlate[id], string, 0, sizeof(VehicleNumberPlate[]));
		SaveVehicle(id);

		if(PlayerInfo[pid][pPlate1] == 0)
		{
			PlayerInfo[pid][pPlate1] = plate;
			new INI:File = INI_Open(UserPath(pid));
			INI_SetTag(File, "data");
			INI_WriteInt(File, "Plate1", PlayerInfo[pid][pPlate1]);
			INI_Close(File);
		}
		else if(PlayerInfo[pid][pPlate2] == 0)
		{
			PlayerInfo[pid][pPlate2] = plate;
			new INI:File = INI_Open(UserPath(pid));
			INI_SetTag(File, "data");
			INI_WriteInt(File, "Plate2", PlayerInfo[pid][pPlate2]);
			INI_Close(File);
		}
		else if(PlayerInfo[pid][pPlate3] == 0)
		{
			PlayerInfo[pid][pPlate3] = plate;
			new INI:File = INI_Open(UserPath(pid));
			INI_SetTag(File, "data");
			INI_WriteInt(File, "Plate3", PlayerInfo[pid][pPlate3]);
			INI_Close(File);
		}
	}
	return 1;
}

CMD:refuel(playerid, params[])
{
	for(new i=1; i < MAX_FUEL_STATIONS; i++)
	{
		if(FuelStationCreated[i])
		{
			if(IsPlayerInRangeOfPoint(playerid, 15.0, FuelStationPos[i][0], FuelStationPos[i][1], FuelStationPos[i][2]))
			{
				SetPVarInt(playerid, "FuelStation", i);
				ShowDialog(playerid, DIALOG_FUEL);
				return 1;
			}
		}
	}
	SendClientMessage(playerid, COLOR_LIGHTRED, "You are not at a fuel station.");
	return 1;
}

CMD:rtc(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not in a vehicle.");
	SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	SendClientMessage(playerid, COLOR_WHITE, "Vehicle respawned.");
	return 1;
}

CMD:vsell(playerid, params[])
{
	new pid, id, price, msg[128];
	if(sscanf(params, "udd", pid, id, price)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /vsell [playerid/partofname] [vehicleid] [price]");
	if(!IsPlayerConnected(pid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid player.");
	if(GetPlayerVehicleAccess(playerid, id) < 2)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not the owner of this vehicle.");
	if(price < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid price.");
	if(!PlayerToPlayer(playerid, pid, 10.0)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Player is too far away.");
	SetPVarInt(pid, "DialogValue1", playerid);
	SetPVarInt(pid, "DialogValue2", id);
	SetPVarInt(pid, "DialogValue3", price);
	ShowDialog(pid, DIALOG_VEHICLE_SELL);
	format(msg, sizeof(msg), "You have offered %s (%d) to buy your vehicle for $%d.", PlayerName(pid), pid, price);
	SendClientMessage(playerid, COLOR_WHITE, msg);
	return 1;
}

CMD:vgivekeys(playerid, params[])
{
	new pid, id, msg[128];
	if(sscanf(params, "ud", pid, id)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /vgivekeys [playerid/partofname] [vehicleid]");
	if(!IsPlayerConnected(pid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid player.");
	if(!IsValidVehicle(id)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid vehicleid.");
	if(GetPlayerVehicleAccess(playerid, id) < 2)
	return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not the owner of this vehicle.");
	if(!PlayerToPlayer(playerid, pid, 10.0)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Player is too far away.");
	SetPVarInt(pid, "CarKeys", id);
	format(msg, sizeof(msg), "You have given your car keys to %s (%d).", PlayerName(pid), pid);
	SendClientMessage(playerid, COLOR_WHITE, msg);
	format(msg, sizeof(msg), "%s (%d) has given you his extra-pair of his vehicle keys.", PlayerName(playerid), playerid);
	SendClientMessage(pid, COLOR_WHITE, msg);
	return 1;
}

CMD:setfuel(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not in a vehicle.");
	new amount, msg[128];
	if(sscanf(params, "d", amount)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /setfuel [amount]");
	if(amount < 0 || amount > 100) return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid amount. (0-100)");
	Fuel[GetPlayerVehicleID(playerid)] = amount;
	format(msg, sizeof(msg), "You have set your vehicle fuel to %d.", amount);
	SendClientMessage(playerid, COLOR_WHITE, msg);
	return 1;
}

CMD:editv(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new id = GetVehicleID(GetPlayerVehicleID(playerid));
		if(!IsValidVehicle(id)) return SendClientMessage(playerid, COLOR_LIGHTRED, "This is not a dynamic vehicle.");
		SetPVarInt(playerid, "DialogValue1", id);
		ShowDialog(playerid, DIALOG_EDITVEHICLE);
		return 1;
	}
	new vehicleid;
	if(sscanf(params, "d", vehicleid)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /editv [vehicleid]");
	if(!IsValidVehicle(vehicleid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid vehicleid.");
	SetPVarInt(playerid, "DialogValue1", vehicleid);
	ShowDialog(playerid, DIALOG_EDITVEHICLE);
	return 1;
}

CMD:adddealership(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!IsPlayerSpawned(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't use this command now.");
	for(new i=1; i < MAX_DEALERSHIPS; i++)
	{
		if(!DealershipCreated[i])
		{
			new msg[128];
			DealershipCreated[i] = 1;
			GetPlayerPos(playerid, DealershipPos[i][0], DealershipPos[i][1], DealershipPos[i][2]);
			UpdateDealership(i, 0);
			SaveDealership(i);
			format(msg, sizeof(msg), "Added dealership id %d.", i);
			SendClientMessage(playerid, COLOR_WHITE, msg);
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_LIGHTRED, "Can't add any more dealerships.");
	return 1;
}

CMD:deletedealership(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	new dealerid, msg[128];
	if(sscanf(params, "d", dealerid)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /deletedealership [dealerid]");
	if(!IsValidDealership(dealerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid dealerid.");
	for(new i=1; i < MAX_DVEHICLES; i++)
	{
		if(VehicleCreated[i] == VEHICLE_DEALERSHIP && strval(VehicleOwner[i]) == dealerid)
		{
			DestroyVehicle(VehicleID[i]);
			Delete3DTextLabel(VehicleLabel[i]);
			VehicleCreated[i] = 0;
		}
	}
	DealershipCreated[dealerid] = 0;
	Delete3DTextLabel(DealershipLabel[dealerid]);
	SaveDealership(dealerid);
	format(msg, sizeof(msg), "Deleted dealership id %d.", dealerid);
	SendClientMessage(playerid, COLOR_WHITE, msg);
	return 1;
}

CMD:movedealership(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	new dealerid, msg[128];
	if(sscanf(params, "d", dealerid)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /movedealership [dealerid]");
	if(!IsValidDealership(dealerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid dealerid.");
	GetPlayerPos(playerid, DealershipPos[dealerid][0], DealershipPos[dealerid][1], DealershipPos[dealerid][2]);
	UpdateDealership(dealerid, 1);
	SaveDealership(dealerid);
	format(msg, sizeof(msg), "Moved dealership id %d here.", dealerid);
	SendClientMessage(playerid, COLOR_WHITE, msg);
	return 1;
}

CMD:gotodealership(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	new dealerid, msg[128];
	if(sscanf(params, "d", dealerid)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /gotodealership [dealerid]");
	if(!IsValidDealership(dealerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid dealerid");
	SetPlayerPos(playerid, DealershipPos[dealerid][0], DealershipPos[dealerid][1], DealershipPos[dealerid][2]);
	format(msg, sizeof(msg), "Teleported to dealership id %d.", dealerid);
	SendClientMessage(playerid, COLOR_WHITE, msg);
	return 1;
}

CMD:addfuelstation(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(!IsPlayerSpawned(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't use this command now.");
	for(new i=1; i < MAX_FUEL_STATIONS; i++)
	{
		if(!FuelStationCreated[i])
		{
			new msg[128];
			FuelStationCreated[i] = 1;
			GetPlayerPos(playerid, FuelStationPos[i][0], FuelStationPos[i][1], FuelStationPos[i][2]);
			UpdateFuelStation(i, 0);
			SaveFuelStation(i);
			format(msg, sizeof(msg), "Added fuel station id %d.", i);
			SendClientMessage(playerid, COLOR_WHITE, msg);
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_LIGHTRED, "Can't add any more fuel stations.");
	return 1;
}

CMD:deletefuelstation(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	new stationid, msg[128];
	if(sscanf(params, "d", stationid)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /deletefuelstation [stationid]");
	if(!IsValidFuelStation(stationid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid stationid.");
	FuelStationCreated[stationid] = 0;
	Delete3DTextLabel(FuelStationLabel[stationid]);
	SaveFuelStation(stationid);
	format(msg, sizeof(msg), "Deleted fuel station id %d.", stationid);
	SendClientMessage(playerid, COLOR_WHITE, msg);
	return 1;
}

CMD:movefuelstation(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	new stationid, msg[128];
	if(sscanf(params, "d", stationid)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /movefuelstation [stationid]");
	if(!IsValidFuelStation(stationid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid stationid.");
	GetPlayerPos(playerid, FuelStationPos[stationid][0], FuelStationPos[stationid][1], FuelStationPos[stationid][2]);
	UpdateFuelStation(stationid, 1);
	SaveFuelStation(stationid);
	format(msg, sizeof(msg), "Moved fuel station id %d here.", stationid);
	SendClientMessage(playerid, COLOR_WHITE, msg);
	return 1;
}

CMD:gotofuelstation(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	new stationid, msg[128];
	if(sscanf(params, "d", stationid)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /gotofuelstation [stationid]");
	if(!IsValidFuelStation(stationid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid stationid.");
	SetPlayerPos(playerid, FuelStationPos[stationid][0], FuelStationPos[stationid][1], FuelStationPos[stationid][2]);
	format(msg, sizeof(msg), "Teleported to fuel station id %d.", stationid);
	SendClientMessage(playerid, COLOR_WHITE, msg);
	return 1;
}

//=========================GENERAL COMMANDS=========================

CMD:dropgun(playerid, params[])
{
	new
	world = GetPlayerVirtualWorld(playerid), interior = GetPlayerInterior(playerid);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
 	new GunID = GetPlayerWeapon(playerid);
  	new GunAmmo = GetPlayerAmmo(playerid);
   	if(GunID > 0 && GunAmmo != 0)
    {
    	new f = MAX_OBJ+1;
     	for(new a = 0; a < MAX_OBJ; a++)
      	{
       		if(dGunData[a][ObjPos][0] == 0.0)
         	{
          		f = a;
            	break;
            }
		}
  		if(f > MAX_OBJ) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can not drop your gun at the moment. (max limit exceeded)");
		RemovePlayerWeapon(playerid, GunID);
		dGunData[f][ObjData][0] = GunID;
		dGunData[f][ObjData][1] = GunAmmo;
		
		dGunData[f][ObjInt] = interior;
		dGunData[f][ObjWorld] = world;
		
		GetPlayerPos(playerid, dGunData[f][ObjPos][0], dGunData[f][ObjPos][1], dGunData[f][ObjPos][2]);
		dGunData[f][ObjID] = CreateDynamicObject(GunObjects[GunID], dGunData[f][ObjPos][0], dGunData[f][ObjPos][1], dGunData[f][ObjPos][2]-1, 93.7, 120.0, 120.0, world, interior, -1, 200.0, 0.0);
		new buffer[50];
		format(buffer, sizeof(buffer), "You threw your %s on the ground.", GunNames[dGunData[f][ObjData][0]]);
		SendClientMessage(playerid, -1, buffer);
		
		// Logging bans
    	new dropgunstring[256];
    	
   		new Hour, Minute, Second;
		gettime(Hour, Minute, Second);

		format(dropgunstring, sizeof(dropgunstring), "[%d:%d:%d] %s threw his %s on the ground.", Hour, Minute, Second, GetName(playerid), GunNames[dGunData[f][ObjData][0]]);
		DropGunLog(dropgunstring);
		// -------------------------------------------------------
	}
   	return 1;
}

CMD:pickupgun(playerid, params[])
{
	new
	interior = GetPlayerInterior(playerid), world = GetPlayerVirtualWorld(playerid);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
	new f = MAX_OBJ+1;
	for(new a = 0; a < MAX_OBJ; a++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, dGunData[a][ObjPos][0], dGunData[a][ObjPos][1], dGunData[a][ObjPos][2]))
		{
			if(interior == dGunData[a][ObjInt] && world == dGunData[a][ObjWorld])
			{
				f = a;
				break;
			}
		}
	}
	if(f > MAX_OBJ) return SendClientMessage(playerid, COLOR_LIGHTRED, "There is no weapon on the ground here.");
	
	DestroyDynamicObject(dGunData[f][ObjID]);
	GivePlayerWeapon(playerid, dGunData[f][ObjData][0], dGunData[f][ObjData][1]);
	dGunData[f][ObjPos][0] = 0.0;
	dGunData[f][ObjPos][1] = 0.0;
	dGunData[f][ObjPos][2] = 0.0;
	dGunData[f][ObjID] = -1;
	//dGunData[f][ObjData][0] = 0;
	dGunData[f][ObjData][1] = 0;
	dGunData[f][ObjInt] = 0;
	dGunData[f][ObjWorld] = 0;
	new buffer[50];
	format(buffer, sizeof(buffer), "You picked up a %s.", GunNames[dGunData[f][ObjData][0]]);
	SendClientMessage(playerid, -1, buffer);
	
	// Logging bans
	new pickupgunstring[256];
	
	new Hour, Minute, Second;
	gettime(Hour, Minute, Second);

	format(pickupgunstring, sizeof(pickupgunstring), "[%d:%d:%d] %s picked up a %s from the ground.", Hour, Minute, Second, GetName(playerid), GunNames[dGunData[f][ObjData][0]]);
	PickupGunLog(pickupgunstring);
	// -------------------------------------------------------
	return 1;
}

CMD:emptyregister(playerid, params[])
{
	if(robbing[playerid] == false) return SCM(playerid, COLOR_LIGHTRED, "You are not robbing the store.");
	if(IsPlayerInRangeOfPoint(playerid, 5.0, -23.7449, -55.6180, 1003.5469))
 	{
 	    if(RobstoreCP[playerid] == 1)
 	    {
 	    	robbingstore1[playerid] = 40;
			TimerRob1[playerid] = SetTimerEx("timerrob1", 1000, 1, "i", playerid);
		 	TogglePlayerControllable(playerid, 0);
		}
		else return SCM(playerid, COLOR_LIGHTRED, "You're not at the right position.");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, -31.0378, -29.0264, 1003.5573))
 	{
 	    if(RobstoreCP[playerid] == 2)
 	    {
 	    	robbingstore2[playerid] = 40;
			TimerRob2[playerid] = SetTimerEx("timerrob2", 1000, 1, "i", playerid);
		 	TogglePlayerControllable(playerid, 0);
		}
		else return SCM(playerid, COLOR_LIGHTRED, "You're not at the right position.");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, -28.0267, -89.9484, 1003.5469))
 	{
 	    if(RobstoreCP[playerid] == 3)
 	    {
 	    	robbingstore3[playerid] = 40;
			TimerRob3[playerid] = SetTimerEx("timerrob3", 1000, 1, "i", playerid);
		 	TogglePlayerControllable(playerid, 0);
		}
		else return SCM(playerid, COLOR_LIGHTRED, "You're not at the right position.");
	}
	return 1;
}

/* CMD:robstore(playerid, params[])
{
	new string[144];
	if(robbing[playerid] == true) return SCM(playerid, COLOR_LIGHTRED, "You are already robbing the store.");
	if(IsPlayerInRangeOfPoint(playerid, 10.0, -23.7449, -55.6180, 1003.5469) ||
	IsPlayerInRangeOfPoint(playerid, 10.0, -31.0378, -29.0264, 1003.5573) || IsPlayerInRangeOfPoint(playerid, 10.0, -28.0267, -89.9484, 1003.5469))
	{
	 	if(IsPlayerInRangeOfPoint(playerid, 5.0, -23.7449, -55.6180, 1003.5469))
	 	{
			if(StoresRobbed[0] != 0) return SCM(playerid, COLOR_LIGHTRED, "This store was robbed recently.");
			{
				new weaponid = GetPlayerWeapon(playerid);
				if(weaponid == 0)
				{
					SCM(playerid, COLOR_LIGHTRED, "You don't have a weapon in your hand.");
					return 1;
				}
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
  						if(Duty[i] == 1)
  						{
		 	    			StoresRobbed[0] = 1;
					 		SetPlayerCheckpoint(playerid, -22.5778, -57.3718, 1003.5469, 1.0);
					 		RobstoreCP[playerid] = 1;
					 		SetTimer( "RobbedStore1", 18000000, true );
			 				SCM(playerid, -1, "Get behind the counter and open the cash register.");
				 			robbing[playerid] = true;
  						    if(GetPlayerVirtualWorld(playerid) == 6)
  						    {
					  			format(string, sizeof(string), "SJPD: The Idlewood gas station is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
			    			else if(GetPlayerVirtualWorld(playerid) == 7)
  						    {
					  			format(string, sizeof(string), "SJPD: The Idlewood 69 cents is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
    						else if(GetPlayerVirtualWorld(playerid) == 8)
  						    {
					  			format(string, sizeof(string), "SJPD: The Unity 69 cents is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
 							else if(GetPlayerVirtualWorld(playerid) == 9)
  						    {
					  			format(string, sizeof(string), "SJPD: The Unity 98 cents (under highway) is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
							else if(GetPlayerVirtualWorld(playerid) == 10)
  						    {
					  			format(string, sizeof(string), "SJPD: The Ganton 98 cents is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
							else if(GetPlayerVirtualWorld(playerid) == 11)
  						    {
					  			format(string, sizeof(string), "SJPD: The Willowfield 98 cents is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
							else if(GetPlayerVirtualWorld(playerid) == 12)
  						    {
					  			format(string, sizeof(string), "SJPD: The Willowfield 98 cents (next to clucklin' bell) is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
							else if(GetPlayerVirtualWorld(playerid) == 13)
  						    {
					  			format(string, sizeof(string), "SJPD: The Jefferson 24/7 (next to the dealership) is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
						}
						else return SCM(playerid, COLOR_LIGHTRED, "There is no police officers on duty online.");
					}
				}
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, -31.0378, -29.0264, 1003.5573))
	 	{
			if(StoresRobbed[1] != 0) return SCM(playerid, COLOR_LIGHTRED, "This store was robbed recently.");
			{
			    new weaponid = GetPlayerWeapon(playerid);
				if(weaponid == 0)
				{
					SCM(playerid, COLOR_LIGHTRED, "You don't have a weapon in your hand.");
					return 1;
				}
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
  						if(Duty[i] == 1)
  						{
					 	    StoresRobbed[1] = 1;
					 		SetPlayerCheckpoint(playerid, -29.7149, -30.6263, 1003.5573, 1.0);
					 		RobstoreCP[playerid] = 2;
					 		SetTimer( "RobbedStore2", 18000000, true );
			 				SCM(playerid, -1, "Get behind the counter and open the cash register.");
				 			robbing[playerid] = true;
				    		if(GetPlayerVirtualWorld(playerid) == 6)
  						    {
					  			format(string, sizeof(string), "SJPD: The Idlewood gas station is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
			    			else if(GetPlayerVirtualWorld(playerid) == 7)
  						    {
					  			format(string, sizeof(string), "SJPD: The Idlewood 69 cents is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
    						else if(GetPlayerVirtualWorld(playerid) == 8)
  						    {
					  			format(string, sizeof(string), "SJPD: The Unity 69 cents is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
 							else if(GetPlayerVirtualWorld(playerid) == 9)
  						    {
					  			format(string, sizeof(string), "SJPD: The Unity 98 cents (under highway) is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
							else if(GetPlayerVirtualWorld(playerid) == 10)
  						    {
					  			format(string, sizeof(string), "SJPD: The Ganton 98 cents is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
							else if(GetPlayerVirtualWorld(playerid) == 11)
  						    {
					  			format(string, sizeof(string), "SJPD: The Willowfield 98 cents is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
							else if(GetPlayerVirtualWorld(playerid) == 12)
  						    {
					  			format(string, sizeof(string), "SJPD: The Willowfield 98 cents (next to clucklin' bell) is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
							else if(GetPlayerVirtualWorld(playerid) == 13)
  						    {
					  			format(string, sizeof(string), "SJPD: The Jefferson 24/7 (next to the dealership) is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
	    				}
						else return SCM(playerid, COLOR_LIGHTRED, "There is no police officers on duty online.");
					}
				}
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, -28.0267, -89.9484, 1003.5469))
	 	{
			if(StoresRobbed[2] != 0) return SCM(playerid, COLOR_LIGHTRED, "This store was robbed recently.");
			{
   				new weaponid = GetPlayerWeapon(playerid);
				if(weaponid == 0)
				{
					SCM(playerid, COLOR_LIGHTRED, "You don't have a weapon in your hand.");
					return 1;
				}
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
  						if(Duty[i] == 1)
  						{
					 	    StoresRobbed[2] = 1;
					 		SetPlayerCheckpoint(playerid, -26.9472, -91.6197, 1003.5469, 1.0);
					 		RobstoreCP[playerid] = 3;
					 		SetTimer( "RobbedStore3", 18000000, true );
			 				SCM(playerid, -1, "Get behind the counter and open the cash register.");
				 			robbing[playerid] = true;
				    		if(GetPlayerVirtualWorld(playerid) == 6)
  						    {
					  			format(string, sizeof(string), "SJPD: The Idlewood gas station is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
			    			else if(GetPlayerVirtualWorld(playerid) == 7)
  						    {
					  			format(string, sizeof(string), "SJPD: The Idlewood 69 cents is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
    						else if(GetPlayerVirtualWorld(playerid) == 8)
  						    {
					  			format(string, sizeof(string), "SJPD: The Unity 69 cents is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
 							else if(GetPlayerVirtualWorld(playerid) == 9)
  						    {
					  			format(string, sizeof(string), "SJPD: The Unity 98 cents (under highway) is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
							else if(GetPlayerVirtualWorld(playerid) == 10)
  						    {
					  			format(string, sizeof(string), "SJPD: The Ganton 98 cents is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
							else if(GetPlayerVirtualWorld(playerid) == 11)
  						    {
					  			format(string, sizeof(string), "SJPD: The Willowfield 98 cents is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
							else if(GetPlayerVirtualWorld(playerid) == 12)
  						    {
					  			format(string, sizeof(string), "SJPD: The Willowfield 98 cents (next to clucklin' bell) is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
							else if(GetPlayerVirtualWorld(playerid) == 13)
  						    {
					  			format(string, sizeof(string), "SJPD: The Jefferson 24/7 (next to the dealership) is being robbed!", GetName(playerid));
				    			PoliceBroadcast(COLOR_SJPD, string, 1);
				    			return 1;
							}
    					}
						else return SCM(playerid, COLOR_LIGHTRED, "There is no police officers on duty online.");
					}
				}
			}
		}
	}
	else return SCM(playerid, COLOR_LIGHTRED, "You are not in a store which you can rob.");
	return 1;
}*/

CMD:dropphone(playerid, params[])
{
	if(PlayerInfo[playerid][pPhone] == 0) return SCM(playerid, COLOR_LIGHTRED, "You do not have a phone.");
	PlayerInfo[playerid][pNumber] = 0;
	PlayerInfo[playerid][pPhone] = 0;
	SCM(playerid, COLOR_WHITE, "You threw your phone on the ground.");
	return 1;
}

CMD:call(playerid, params[])
{
	new phonenumb, string[128];
    if(sscanf(params, "d", phonenumb)) SendClientMessage(playerid, COLOR_GREY, "Usage: /call [number]");
    
	if (player[playerid][calling] || player[playerid][caller] != 255)
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "You are already on a call.");
		return 1;
	}
	
	if(PlayerInfo[playerid][pPhone] == 0) return SCM(playerid, COLOR_LIGHTRED, "You don't have a phone.");
	format(string, sizeof(string), "* %s takes out their phone.", GetName(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	
 	if (phonenumb == 911)  // here you can put your own numbers just copy for more
  	{
   		SendClientMessage(playerid, COLOR_SJPD, "Hello, you have contacted the San Jose Police Department. Please state your location and situation.");
   		policecall[playerid] = 1;
   		startphone(playerid);
     	return 1;
   	}
	
	for(new i = 0; i <= MAX_PLAYERS; i++)
 	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pNumber] == phonenumb && phonenumb != 0 && !player[i][calling] && player[i][caller] == 255 && i != playerid)
			{
				SendClientMessage(i, COLOR_YELLOW, "(Cellphone:) Someone is calling you... /pickup.");
				SendClientMessage(i, COLOR_YELLOW, "Tip: Type /pickup to pick up the phone.");
				SendClientMessage(playerid, COLOR_YELLOW, "(Cellphone): Call is being forwarded..");
				SendClientMessage(i, COLOR_YELLOW, "Tip: You can cancel the call by typing /hangup.");
				startphone(playerid);
				player[playerid][calling] = false;
				player[playerid][caller] = i;
				player[i][calling] = false;
				player[i][caller] = playerid;
				return 1;
			}
		}
	}
	SendClientMessage(playerid, COLOR_LIGHTRED, "You hear a busy tone...");
	return 1;
}
    
CMD:pickup(playerid, params[])
{
	new string[128];
	if (player[playerid][caller] == 255)
 	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "No-one is calling you.");
		return 1;
	}
	if (player[playerid][calling])
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "You're already on a call.");
		return 1;
	}
	
 	format(string, sizeof(string), "* %s answers their cellphone.", GetName(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SendClientMessage(playerid,  -1, "The call has been connected.");
	SendClientMessage(player[playerid][calling],  -1, "The call has been connected.");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	startphone(playerid);
 	player[playerid][calling] = true;
 	player[player[playerid][caller]][calling] = true;
	return 1;
}

CMD:hangup(playerid, params[])
{
	new string[128];
	if (player[playerid][caller] != 255 && !player[playerid][calling])
 	{
  		SendClientMessage(player[playerid][caller], -1, "(Cellphone:) The other line hung-up.");
  		stopphone(playerid);
    	stopphone(player[playerid][caller]);
    	player[player[playerid][caller]][caller] = 255;
    	player[playerid][caller] = 255;
     	return 1;
	}
 	if (!player[playerid][calling])
  	{
   		SendClientMessage(playerid, COLOR_LIGHTRED, "You're not on a call.");
     	return 1;
	}
	
 	format(string, sizeof(string), "* %s pockets their phone.", GetName(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	
	SendClientMessage(player[playerid][caller], -1, "(Cellphone:) The other line hung-up.");
	player[playerid][calling] = false;
	player[player[playerid][caller]][calling] = false;
	stopphone(playerid);
	stopphone(player[playerid][caller]);
	player[player[playerid][caller]][caller] = 255;
	player[playerid][caller] = 255;
	SendClientMessage(playerid, -1, "(Cellphone:) You hung-up.");
	return 1;
}

CMD:sms(playerid, params[])
{
    new string[126], smstext[126], tnum;
    if(PlayerInfo[playerid][pPhone] == 0) return SCM(playerid, COLOR_LIGHTRED, "You don't have a phone.");
    if(sscanf(params, "is[126]", tnum, smstext)) SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE: {FFFFFF} /sms [number] [input]");
    else
	{
	    format(string, sizeof(string), "* %s slips out their phone and compiles a text message.", GetName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		new sender = PlayerInfo[playerid][pNumber];
  		for(new i = 0; i <= MAX_PLAYERS; i++)
		{
  			if(IsPlayerConnected(i))
  			{
				if(PlayerInfo[i][pNumber] == tnum)
				{
					if(onoff[i] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "The number you entered may not exist or the device is turned off.");
					format(string, sizeof(string), "( [SMS:] %s, Sender: [%d] )", smstext, sender);
					SendClientMessage(i, COLOR_YELLOW, string);
				}
				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Text message delivery has failed.");
				return 1;
			}
		}
	}
	return 1;
}

CMD:removecp(playerid, params[])
{
	DisablePlayerCheckpoint(playerid);
	PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	return 1;
}

CMD:windows(playerid, params[])
{
	new string[128], seat = GetPlayerVehicleSeat(playerid);
	if(IsPlayerInAnyVehicle(playerid))
	{
	    if(seat == 0)
	    {
			if(windows[GetPlayerVehicleID(playerid)][0] == 0)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
				{
					ShowPlayerNameTagForPlayer(i, playerid, 1);
				}
		  		format(string, sizeof(string), "* %s rolls his window down.", GetName(playerid));
			    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
			    PlayerActionMessage(playerid, 20.0, "rolls his window down.");
			    windows[GetPlayerVehicleID(playerid)][0] = 1;
			}
			else if(windows[GetPlayerVehicleID(playerid)][0] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
				{
					ShowPlayerNameTagForPlayer(i, playerid, 0);
				}
				format(string, sizeof(string), "* %s rolls his window up.", GetName(playerid));
			    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
			    PlayerActionMessage(playerid, 20.0, "rolls his window up.");
			    windows[GetPlayerVehicleID(playerid)][0] = 0;
			}
		}
		else if(seat == 1)
		{
			if(windows[GetPlayerVehicleID(playerid)][1] == 0)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
				{
					ShowPlayerNameTagForPlayer(i, playerid, 1);
				}
		  		format(string, sizeof(string), "* %s rolls his window down.", GetName(playerid));
			    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
			    PlayerActionMessage(playerid, 20.0, "rolls his window down.");
			    windows[GetPlayerVehicleID(playerid)][1] = 1;
			}
			else if(windows[GetPlayerVehicleID(playerid)][1] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
				{
					ShowPlayerNameTagForPlayer(i, playerid, 0);
				}
				format(string, sizeof(string), "* %s rolls his window up.", GetName(playerid));
			    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
			    PlayerActionMessage(playerid, 20.0, "rolls his window up.");
			    windows[GetPlayerVehicleID(playerid)][1] = 0;
			}
  		}
		else if(seat == 2)
		{
			if(windows[GetPlayerVehicleID(playerid)][2] == 0)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
				{
					ShowPlayerNameTagForPlayer(i, playerid, 1);
				}
		  		format(string, sizeof(string), "* %s rolls his window down.", GetName(playerid));
			    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
			    PlayerActionMessage(playerid, 20.0, "rolls his window down.");
			    windows[GetPlayerVehicleID(playerid)][2] = 1;
			}
			else if(windows[GetPlayerVehicleID(playerid)][2] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
				{
					ShowPlayerNameTagForPlayer(i, playerid, 0);
				}
				format(string, sizeof(string), "* %s rolls his window up.", GetName(playerid));
			    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
			    PlayerActionMessage(playerid, 20.0, "rolls his window up.");
			    windows[GetPlayerVehicleID(playerid)][2] = 0;
			}
  		}
		else if(seat == 3)
		{
			if(windows[GetPlayerVehicleID(playerid)][3] == 0)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
				{
					ShowPlayerNameTagForPlayer(i, playerid, 1);
				}
		  		format(string, sizeof(string), "* %s rolls his window down.", GetName(playerid));
			    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
			    PlayerActionMessage(playerid, 20.0, "rolls his window down.");
			    windows[GetPlayerVehicleID(playerid)][3] = 1;
			}
			else if(windows[GetPlayerVehicleID(playerid)][3] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
				{
					ShowPlayerNameTagForPlayer(i, playerid, 0);
				}
				format(string, sizeof(string), "* %s rolls his window up.", GetName(playerid));
			    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
			    PlayerActionMessage(playerid, 20.0, "rolls his window up.");
			    windows[GetPlayerVehicleID(playerid)][3] = 0;
			}
  		}
	}
	return 1;
}

CMD:greet(playerid, params[])
{
    new id, greeetnumber, string[64], Float:X, Float:Y, Float:Z;
    GetPlayerPos(id, X, Y, Z);

    if(sscanf(params, "ud", id, greeetnumber)) return SCM(playerid, COLOR_GREY, "[Usage:] /greet [playerid/partofname] [greet (0-6)].");
    if(playerid == id) return SCM(playerid, COLOR_LIGHTRED, "You can't greet yourself.");

    if(IsPlayerInRangeOfPoint(playerid, 7.0, X, Y, Z))
	{
 		format(string, sizeof(string), "* %s would like to greet you, /acceptgreet.", GetName(playerid));
    	SendClientMessage(id, COLOR_WHITE, string);
 		format(string, sizeof(string), "* request sent to %s.", GetName(id));
    	SendClientMessage(playerid, COLOR_WHITE, string);
		greetInvited[id] = true;
		greetNumber[id] = greeetnumber;
  		Player_Greet[id] = playerid;
	} else return SCM(playerid, COLOR_LIGHTRED, "You're not close enough.");
  	return 1;
}

CMD:acceptgreet(playerid, params[])
{
    if(greetInvited[playerid] == false) return SCM(playerid, COLOR_LIGHTRED, "You're not invited to greet anyone.");
    if(greetNumber[playerid] == 1)
    {
    	ApplyPlayerAnimation(playerid, "GANGS", "HNDSHKAA", 4.0, 0, 0, 0, 0, 0, 1);
	    ApplyPlayerAnimation(Player_Greet[playerid], "GANGS", "HNDSHKAA", 4.0, 0, 0, 0, 0, 0, 1);
	    greetInvited[playerid] = false;
	}
	else if(greetNumber[playerid] == 2)
	{
	    ApplyPlayerAnimation(playerid, "GANGS", "HNDSHKBA", 4.0, 0, 0, 0, 0, 0, 1);
     	ApplyPlayerAnimation(Player_Greet[playerid], "GANGS", "HNDSHKBA", 4.0, 0, 0, 0, 0, 0, 1);
     	greetInvited[playerid] = false;
	}
	else if(greetNumber[playerid] == 3)
	{
	    ApplyPlayerAnimation(playerid, "GANGS", "HNDSHKCA", 4.0, 0, 0, 0, 0, 0, 1);
     	ApplyPlayerAnimation(Player_Greet[playerid], "GANGS", "HNDSHKCA", 4.0, 0, 0, 0, 0, 0, 1);
     	greetInvited[playerid] = false;
	}
	else if(greetNumber[playerid] == 4)
	{
	    ApplyPlayerAnimation(playerid, "GANGS", "HNDSHKDA", 4.0, 0, 0, 0, 0, 0, 1);
     	ApplyPlayerAnimation(Player_Greet[playerid], "GANGS", "HNDSHKDA", 4.0, 0, 0, 0, 0, 0, 1);
     	greetInvited[playerid] = false;
	}
	else if(greetNumber[playerid] == 5)
	{
	    ApplyPlayerAnimation(playerid, "GANGS", "HNDSHKEA", 4.0, 0, 0, 0, 0, 0, 1);
     	ApplyPlayerAnimation(Player_Greet[playerid], "GANGS", "HNDSHKEA", 4.0, 0, 0, 0, 0, 0, 1);
     	greetInvited[playerid] = false;
	}
	else if(greetNumber[playerid] == 6)
	{
	    ApplyPlayerAnimation(playerid, "GANGS", "HNDSHKFA", 4.0, 0, 0, 0, 0, 0, 1);
		ApplyPlayerAnimation(Player_Greet[playerid], "GANGS", "HNDSHKFA", 4.0, 0, 0, 0, 0, 0, 1);
		greetInvited[playerid] = false;
	}
	return 1;
}

CMD:createnote(playerid, params[])
{
	new note[128], command[28];
	if(sscanf(params, "s[28]s[128]", command, note)) return SCM(playerid, COLOR_GREY, "[Usage:] /createnote [slot] [message]");
	if(!strcmp(command, "1", true))
    {
        PlayerInfo[playerid][pNote1] = note;
        SCM(playerid, COLOR_WHITE, "You have successfully written your note.");
    }
    else if(!strcmp(command, "2", true))
    {
        PlayerInfo[playerid][pNote2] = note;
        SCM(playerid, COLOR_WHITE, "You have successfully written your note.");
    }
    else if(!strcmp(command, "3", true))
    {
        PlayerInfo[playerid][pNote3] = note;
        SCM(playerid, COLOR_WHITE, "You have successfully written your note.");
    }
    else if(!strcmp(command, "4", true))
    {
        PlayerInfo[playerid][pNote4] = note;
        SCM(playerid, COLOR_WHITE, "You have successfully written your note.");
    }
	return 1;
}

CMD:deletenote(playerid, params[])
{
	new command[28];
	if(sscanf(params, "s[28]", command)) return SCM(playerid, COLOR_GREY, "[Usage:] /deletenote [slot]");
	if(!strcmp(command, "1", true))
    {
        PlayerInfo[playerid][pNote1] = 0;
        SCM(playerid, COLOR_WHITE, "You have successfully deleted your note.");
    }
    else if(!strcmp(command, "2", true))
    {
        PlayerInfo[playerid][pNote2] = 0;
        SCM(playerid, COLOR_WHITE, "You have successfully deleted your note.");
    }
    else if(!strcmp(command, "3", true))
    {
        PlayerInfo[playerid][pNote3] = 0;
        SCM(playerid, COLOR_WHITE, "You have successfully deleted your note.");
    }
    else if(!strcmp(command, "4", true))
    {
        PlayerInfo[playerid][pNote4] = 0;
        SCM(playerid, COLOR_WHITE, "You have successfully deleted your note.");
    }
	return 1;
}

COMMAND:stopbus(playerid, params[])
{
	if(IsPlayerInVehicle(playerid, westbus))
	{
		ProxDetector(20.0, playerid, "[East Suburban Route:] STOPPING at the next bus stop!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	}
	else if(IsPlayerInVehicle(playerid, downtownbus))
	{
		ProxDetector(20.0, playerid, "[Downtown Route:] STOPPING at the next bus stop!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	}
	else if(IsPlayerInVehicle(playerid, southbus))
	{
		ProxDetector(20.0, playerid, "[South Suburban Route:] STOPPING at the next bus stop!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	} else return SCM(playerid, COLOR_LIGHTRED, "You are not in a bus.");
	return 1;
}

COMMAND:id(playerid, params[])
{
	new string[128];
    new
        returnId = INVALID_PLAYER_ID;

    if(sscanf(params, "u", returnId))
        return SendClientMessage(playerid, -1, "[Usage:] /id [PartofName].");

	format(string, sizeof(string), "%s(%d).", GetName(returnId), returnId);
	SendClientMessage(playerid, COLOR_WHITE, string);
    return 1;
}

CMD:notes(playerid, params[])
{
	new string[128];
	format(string, sizeof(string), "Note 1: %s", PlayerInfo[playerid][pNote1]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Note 2: %s", PlayerInfo[playerid][pNote2]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Note 3: %s", PlayerInfo[playerid][pNote3]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Note 4: %s", PlayerInfo[playerid][pNote4]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:readnote(playerid, params[])
{
	new command[28], string[128];
	if(sscanf(params, "s[28]s[128]", command)) return SCM(playerid, COLOR_GREY, "[Usage:] /createnote [slot]");
	if(!strcmp(command, "1", true))
    {
  		format(string, sizeof(string), "Note 1: %s", PlayerInfo[playerid][pNote1]);
		SendClientMessage(playerid, COLOR_WHITE, string);
    }
    else if(!strcmp(command, "2", true))
    {
  		format(string, sizeof(string), "Note 2: %s", PlayerInfo[playerid][pNote2]);
		SendClientMessage(playerid, COLOR_WHITE, string);
    }
    else if(!strcmp(command, "3", true))
    {
  		format(string, sizeof(string), "Note 3: %s", PlayerInfo[playerid][pNote3]);
		SendClientMessage(playerid, COLOR_WHITE, string);
    }
    else if(!strcmp(command, "4", true))
    {
  		format(string, sizeof(string), "Note 4: %s", PlayerInfo[playerid][pNote4]);
		SendClientMessage(playerid, COLOR_WHITE, string);
    }
	return 1;
}

CMD:fish(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 15.0, 388.1848, -2088.7964, 7.8359))
	{
	        if(WormAttached[playerid] < 1) return SCM(playerid, COLOR_LIGHTRED, "You need to have a worm attached to the fishing rod to fish.");
	        if(Equipped[playerid] == 0) return SCM(playerid, COLOR_LIGHTRED, "You need to have your fishing rod equipped.");
	        if(Fishing[playerid] == true) return SCM(playerid, COLOR_LIGHTRED, "You are already fishing.");
	        PlayerActionMessage(playerid, 20.0, "begins to fish with his fishing rod.");
  			fish[playerid] = 30; //change it with the timer time
    		TimerFish[playerid] = SetTimerEx("timerFish", 1000, 1, "i", playerid);
		    TogglePlayerControllable(playerid, 0);
		    WormAttached[playerid] = 0;
	    	LoopingAnim(playerid, "ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1, 1);
	    	Fishing[playerid] = true;
	    	wormattached2[playerid] = 0;
	}
	else return SCM(playerid, COLOR_LIGHTRED, "You can't fish here.");
  	return 1;
}

CMD:work(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 1)
	{
	    if(WorkingJunk[playerid] == true) return SCM(playerid, COLOR_LIGHTRED, "You are already working. /stopworking in order to stop working.");
	    if(!IsPlayerInRangeOfPoint(playerid, 30.0, -1863.3596, -1623.5951, 21.9313)) return SCM(playerid, COLOR_LIGHTRED, "You need to be your workplace in order to work.");
	    SCM(playerid, -1, "Get inside one of the tugs and begin to collect junk.");
        WorkingJunk[playerid] = true;
	}
	else if(PlayerInfo[playerid][pJob] == 2)
	{
	    if(WorkingLumber[playerid] == true) return SCM(playerid, COLOR_LIGHTRED, "You are already working. /stopworking in order to stop working.");
	    if(!IsPlayerInRangeOfPoint(playerid, 30.0, -2006.9303, -2400.5645, 34.9708)) return SCM(playerid, COLOR_LIGHTRED, "You need to be your workplace in order to work.");
	    SCM(playerid, -1, "Get inside one of the walton's.");
        WorkingLumber[playerid] = true;
	}
	else if(PlayerInfo[playerid][pJob] == 3)
	{
	    if(WorkingShop[playerid] == true) return SCM(playerid, COLOR_LIGHTRED, "You are already working. /stopworking in order to stop working.");
	    if(!IsPlayerInRangeOfPoint(playerid, 30.0, -30.2784, -57.0121, 1003.5469)) return SCM(playerid, COLOR_LIGHTRED, "You need to be your workplace in order to work.");
	    SCM(playerid, -1, "Fill the shelfs with products.");
        WorkingShop[playerid] = true;
        SetPlayerCheckpoint(playerid, -27.2096, -53.1585, 1003.5469, 1.0);
        ShopCP[playerid] = 1;
	}
  	return 1;
}

CMD:place(playerid, params[])
{
	new string[128];
	if(Producting[playerid] == true) return SCM(playerid, COLOR_LIGHTRED, "You are already doing this.");
	if(WorkingShop[playerid] == false) return SCM(playerid, COLOR_LIGHTRED, "You are not working.");
	if(ShopCP[playerid] == 1)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, -27.2096, -53.1585, 1003.5469)) return SCM(playerid, COLOR_LIGHTRED, "You are not at the right shelf.");
		TogglePlayerControllable(playerid, 0);
		shopwork[playerid] = 10; //change it with the timer time
		TimerShop[playerid] = SetTimerEx("timershop", 1000, 1, "i", playerid);
		Producting[playerid] = true;
		format(string, sizeof(string), "* %s is placing products on the shelf.", GetName(playerid));
		SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
		ApplyPlayerAnimation(playerid, "COP_AMBIENT", "COPBROWSE_IN", 4.0, 0, 1, 0, 1, 0, 1);
	}
	else if(ShopCP[playerid] == 2)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, -28.4407, -49.2976, 1003.5469)) return SCM(playerid, COLOR_LIGHTRED, "You are not at the right shelf.");
		TogglePlayerControllable(playerid, 0);
		shopwork[playerid] = 10; //change it with the timer time
		TimerShop[playerid] = SetTimerEx("timershop", 1000, 1, "i", playerid);
		Producting[playerid] = true;
		format(string, sizeof(string), "* %s is placing products on the shelf.", GetName(playerid));
		SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
		ApplyPlayerAnimation(playerid, "COP_AMBIENT", "COPBROWSE_IN", 4.0, 0, 1, 0, 1, 0, 1);
	}
	else if(ShopCP[playerid] == 3)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, -36.5776, -49.9914, 1003.5469)) return SCM(playerid, COLOR_LIGHTRED, "You are not at the right shelf.");
		TogglePlayerControllable(playerid, 0);
		shopwork[playerid] = 10; //change it with the timer time
		TimerShop[playerid] = SetTimerEx("timershop", 1000, 1, "i", playerid);
		Producting[playerid] = true;
		format(string, sizeof(string), "* %s is placing products on the shelf.", GetName(playerid));
		SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
		ApplyPlayerAnimation(playerid, "COP_AMBIENT", "COPBROWSE_IN", 4.0, 0, 1, 0, 1, 0, 1);
	}
	else if(ShopCP[playerid] == 4)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, -36.5628, -55.4194, 1003.5469)) return SCM(playerid, COLOR_LIGHTRED, "You are not at the right shelf.");
		TogglePlayerControllable(playerid, 0);
		shopwork[playerid] = 10; //change it with the timer time
		TimerShop[playerid] = SetTimerEx("timershop", 1000, 1, "i", playerid);
		Producting[playerid] = true;
		format(string, sizeof(string), "* %s is placing products on the shelf.", GetName(playerid));
		SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
		ApplyPlayerAnimation(playerid, "COP_AMBIENT", "COPBROWSE_IN", 4.0, 0, 1, 0, 1, 0, 1);
	}
	else if(ShopCP[playerid] == 5)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, -31.2107, -53.2609, 1003.5469)) return SCM(playerid, COLOR_LIGHTRED, "You are not at the right shelf.");
		TogglePlayerControllable(playerid, 0);
		shopwork[playerid] = 10; //change it with the timer time
		TimerShop[playerid] = SetTimerEx("timershop", 1000, 1, "i", playerid);
		Producting[playerid] = true;
		format(string, sizeof(string), "* %s is placing products on the shelf.", GetName(playerid));
		SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
		ApplyPlayerAnimation(playerid, "COP_AMBIENT", "COPBROWSE_IN", 4.0, 0, 1, 0, 1, 0, 1);
	}
	else if(ShopCP[playerid] == 6)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, -22.7139, -49.3138, 1003.5469)) return SCM(playerid, COLOR_LIGHTRED, "You are not at the right shelf.");
		TogglePlayerControllable(playerid, 0);
		shopwork[playerid] = 10; //change it with the timer time
		TimerShop[playerid] = SetTimerEx("timershop", 1000, 1, "i", playerid);
		Producting[playerid] = true;
		format(string, sizeof(string), "* %s is placing products on the shelf.", GetName(playerid));
		SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
		ApplyPlayerAnimation(playerid, "COP_AMBIENT", "COPBROWSE_IN", 4.0, 0, 1, 0, 1, 0, 1);
	}
	return 1;
}

CMD:chop(playerid, params[])
{
	if(WorkingLumber[playerid] == false) return SCM(playerid, COLOR_LIGHTRED, "You are not working.");
	if(Chopping[playerid] == true) return SCM(playerid, COLOR_LIGHTRED, "You are already cutting down a tree.");
 	if(LumberCP[playerid] == 1)
 	{
	    if(!IsPlayerInRangeOfPoint(playerid, 5.0, -2219.23193, -2165.13379, 41.66151)) return SCM(playerid, COLOR_LIGHTRED, "You are not at the right tree.");
		TogglePlayerControllable(playerid, 0);
		ApplyPlayerAnimation(playerid, "CHAINSAW", "WEAPON_csaw", 4.0, 1, 0, 0, 0, 0, 1);
		GivePlayerWeapon(playerid, 9, 1);
	 	PlayerActionMessage(playerid, 20.0, "begins chopping the tree down.");
		chop[playerid] = 10; //change it with the timer time
		TimerChop[playerid] = SetTimerEx("timerchop", 1000, 1, "i", playerid);
		Chopping[playerid] = true;
	}
 	else if(LumberCP[playerid] == 2)
 	{
	    if(!IsPlayerInRangeOfPoint(playerid, 5.0, -2215.63647, -2154.07959, 43.49667)) return SCM(playerid, COLOR_LIGHTRED, "You are not at the right tree.");
		TogglePlayerControllable(playerid, 0);
		ApplyPlayerAnimation(playerid, "CHAINSAW", "WEAPON_csaw", 4.0, 1, 0, 0, 0, 0, 1);
		chop[playerid] = 10; //change it with the timer time
		TimerChop[playerid] = SetTimerEx("timerchop", 1000, 1, "i", playerid);
		GivePlayerWeapon(playerid, 9, 1);
		Chopping[playerid] = true;
	}
 	else if(LumberCP[playerid] == 3)
 	{
	    if(!IsPlayerInRangeOfPoint(playerid, 5.0, -2209.71729, -2142.16846, 45.55535)) return SCM(playerid, COLOR_LIGHTRED, "You are not at the right tree.");
		TogglePlayerControllable(playerid, 0);
		ApplyPlayerAnimation(playerid, "CHAINSAW", "WEAPON_csaw", 4.0, 1, 0, 0, 0, 0, 1);
		chop[playerid] = 10; //change it with the timer time
		TimerChop[playerid] = SetTimerEx("timerchop", 1000, 1, "i", playerid);
		GivePlayerWeapon(playerid, 9, 1);
		Chopping[playerid] = true;
	}
 	else if(LumberCP[playerid] == 4)
 	{
	    if(!IsPlayerInRangeOfPoint(playerid, 5.0, -2197.78564, -2154.36914, 45.55535)) return SCM(playerid, COLOR_LIGHTRED, "You are not at the right tree.");
		TogglePlayerControllable(playerid, 0);
		ApplyPlayerAnimation(playerid, "CHAINSAW", "WEAPON_csaw", 4.0, 1, 0, 0, 0, 0, 1);
		chop[playerid] = 10; //change it with the timer time
		TimerChop[playerid] = SetTimerEx("timerchop", 1000, 1, "i", playerid);
		GivePlayerWeapon(playerid, 9, 1);
		Chopping[playerid] = true;
	}
	else if(LumberCP[playerid] == 5)
 	{
	    if(!IsPlayerInRangeOfPoint(playerid, 5.0, -2192.93359, -2141.94360, 47.62198)) return SCM(playerid, COLOR_LIGHTRED, "You are not at the right tree.");
		TogglePlayerControllable(playerid, 0);
		ApplyPlayerAnimation(playerid, "CHAINSAW", "WEAPON_csaw", 4.0, 1, 0, 0, 0, 0, 1);
		chop[playerid] = 10; //change it with the timer time
		TimerChop[playerid] = SetTimerEx("timerchop", 1000, 1, "i", playerid);
		GivePlayerWeapon(playerid, 9, 1);
		Chopping[playerid] = true;
	}
  	return 1;
}

CMD:stop(playerid, params[])
{
    TogglePlayerControllable(playerid, 1);
    KillTimer(Timer[playerid]);
    KillTimer(Timer2[playerid]);
    KillTimer(TimerRob3[playerid]);
    KillTimer(TimerRob1[playerid]);
    KillTimer(TimerRob2[playerid]);
    hotwiring[playerid] = 0;
    breaking[playerid] = 0;
  	return 1;
}

CMD:stopworking(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 1)
	{
	    if(WorkingJunk[playerid] == false) return SCM(playerid, COLOR_LIGHTRED, "You are not working.");
	    WorkingJunk[playerid] = false;
	    JunkCP[playerid] = 0;
    	for(new i=0; i<5; i++)
		{
			if(IsPlayerInVehicle(playerid, JunkCar[i]))
			{
				new vehicle;
				vehicle = GetPlayerVehicleID(playerid);
				SetVehicleToRespawn(vehicle);
				SCM(playerid, COLOR_WHITE, "You have stopped working and your job-vehicle has respawned.");
				TogglePlayerControllable(playerid, 1);
			}
		}
	}
	if(PlayerInfo[playerid][pJob] == 2)
	{
	    if(WorkingLumber[playerid] == false) return SCM(playerid, COLOR_LIGHTRED, "You are not working.");
	    WorkingLumber[playerid] = false;
	    LumberCP[playerid] = 0;
		TogglePlayerControllable(playerid, 1);
		SCM(playerid, COLOR_LIGHTRED, "You have stopped working.");
		DisablePlayerCheckpoint(playerid);
	}
	if(PlayerInfo[playerid][pJob] == 3)
	{
	    if(WorkingShop[playerid] == false) return SCM(playerid, COLOR_LIGHTRED, "You are not working.");
	    WorkingShop[playerid] = false;
	    ShopCP[playerid] = 0;
	    SCM(playerid, COLOR_LIGHTRED, "You have stopped working.");
	    DisablePlayerCheckpoint(playerid);
	}
	if(PlayerInfo[playerid][pJob] == 11)
	{
	    PizzaCP1[playerid] = 0;
	    PizzaCP2[playerid] = 0;
	    SCM(playerid, COLOR_LIGHTRED, "You have stopped working.");
	    DisablePlayerCheckpoint(playerid);
	    LeftPizzaBoy[playerid] = 0;
	}
  	return 1;
}

CMD:takejob(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] > 0) return SCM(playerid, COLOR_LIGHTRED, "You already have a job. /quitjob.");
    if(IsPlayerInRangeOfPoint(playerid, 7.0, -1863.3596, -1623.5951, 21.9313))
    {
        if(PlayerInfo[playerid][pWelfare] == 1) return SCM(playerid, COLOR_LIGHTRED, "You have to quit the welfare program in order to get a job. /quitwelfare");
        if(PlayerInfo[playerid][pAge] < 18) return SCM(playerid, COLOR_LIGHTRED, "You need to be eighteen years old to have this job.");
		PlayerInfo[playerid][pJob] = 1;
		SCM(playerid, COLOR_WHITE, "Congratulations on your new job! You are now a junk collector.");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 7.0, -2006.9303, -2400.5645, 34.9708))
	{
	    if(PlayerInfo[playerid][pWelfare] == 1) return SCM(playerid, COLOR_LIGHTRED, "You have to quit the welfare program in order to get a job. /quitwelfare");
		if(PlayerInfo[playerid][pAge] < 18) return SCM(playerid, COLOR_LIGHTRED, "You need to be eighteen years old to have this job.");
	    PlayerInfo[playerid][pJob] = 2;
   		SCM(playerid, COLOR_WHITE, "Congratulations on your new job! You are now a lumberjack.");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 7.0, -30.2784, -57.0121, 1003.5469))
	{
	    if(PlayerInfo[playerid][pWelfare] == 1) return SCM(playerid, COLOR_LIGHTRED, "You have to quit the welfare program in order to get a job. /quitwelfare");
		if(PlayerInfo[playerid][pAge] > 18) return SCM(playerid, COLOR_LIGHTRED, "This workplace only accepts workers under the age of eighteen.");
	    PlayerInfo[playerid][pJob] = 3;
	    SCM(playerid, COLOR_WHITE, "Congratulations on your new job! You are now a worker at the 24/7.");
	}
 	if(IsPlayerInRangeOfPoint(playerid, 7.0, 1771.6489, -1909.2965, 13.5544))
    {
        if(PlayerInfo[playerid][pWelfare] == 1) return SCM(playerid, COLOR_LIGHTRED, "You have to quit the welfare program in order to get a job. /quitwelfare");
        if(PlayerInfo[playerid][pAge] < 18) return SCM(playerid, COLOR_LIGHTRED, "You need to be eighteen years old to have this job.");
        if(PlayerInfo[playerid][pPlayingHours] < 2) return SCM(playerid, COLOR_LIGHTRED, "You need to have two hours played in order to get this job.");
		PlayerInfo[playerid][pJob] = 10;
		SCM(playerid, COLOR_WHITE, "Congratulations on your new job! You are now a bus driver.");
	}
	if(IsPlayerInRangeOfPoint(playerid, 7.0, 2109.7109, -1789.9832, 13.5547))
    {
        if(PlayerInfo[playerid][pWelfare] == 1) return SCM(playerid, COLOR_LIGHTRED, "You have to quit the welfare program in order to get a job. /quitwelfare");
		PlayerInfo[playerid][pJob] = 11;
		SCM(playerid, COLOR_WHITE, "Congratulations on your new job! You are now a pizzaboy.");
	}
  	return 1;
}

CMD:quitjob(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 0) return SCM(playerid, COLOR_LIGHTRED, "You don't have a job.");
	PlayerInfo[playerid][pJob] = 0;
	SCM(playerid, COLOR_WHITE, "You have succesfully quit your job.");
  	return 1;
}

CMD:attachworm(playerid, params[])
{
	if(PlayerInfo[playerid][pFishingRod] < 1) return SCM(playerid, COLOR_LIGHTRED, "You need to have a fishing rod.");
	if(attachingw[playerid] == 1) return SCM(playerid, COLOR_LIGHTRED, "You're already attaching a worm to your hook.");
	if(PlayerInfo[playerid][pWorms] < 1) return SCM(playerid, COLOR_LIGHTRED, "You need to have a worm.");
	if(Equipped[playerid] == 0) return SCM(playerid, COLOR_LIGHTRED, "You need to have your fishing rod equipped.");
	if(wormattached2[playerid] == 1) return SCM(playerid, COLOR_LIGHTRED, "You have already attached a worm to your hook.");
	if(Fishing[playerid] == true) return SCM(playerid, COLOR_LIGHTRED, "You are already fishing. Attach a worm when you're done fishing.");
	PlayerActionMessage(playerid, 20.0, "begins to fiddle with the fishing hook.");
	AttachWorm[playerid] = 5; //change it with the timer time
	TimerAttachWorm[playerid] = SetTimerEx("timerAttachWorm", 1000, 1, "i", playerid);
	TogglePlayerControllable(playerid, 0);
	PlayerInfo[playerid][pWorms] -= 1;
	attachingw[playerid] = 1;
	wormattached2[playerid] = 1;
  	return 1;
}

CMD:sellfish(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 7.0, 388.1848, -2088.7964, 7.8359) || IsPlayerInRangeOfPoint(playerid, 7.0, 388.1848, -2088.7964, 7.8359))
	{
	    if(PlayerInfo[playerid][pFishes] < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have any fishes.");
	    new string[64];
		new sellfishamount = (PlayerInfo[playerid][pFishes])*(sellfish);
		GivePlayerMoney(playerid, sellfishamount);
		format(string, sizeof(string), "You have sold all of your fishes for: $%d.", sellfishamount);
		SendClientMessage(playerid, COLOR_WHITE, string);
		PlayerInfo[playerid][pFishes] = 0;
	}
  	return 1;
}

CMD:givegun(playerid, params[])
{
    new id, string[124], Float:X, Float:Y, Float:Z, playergun, playerammo;
    playergun = GetPlayerWeapon(playerid);
    playerammo = GetPlayerAmmo(playerid);

    if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "[Usage:] /givegun [playerid/partofname].");
    if(playergun < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have a weapon.");
    if(playerammo < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have any ammo.");
    if(playerid == id) return SCM(playerid, COLOR_LIGHTRED, "You can't give a weapon to yourself.");

    GetPlayerPos(id, X, Y, Z);
    if(IsPlayerInRangeOfPoint(playerid, 7.0, X, Y, Z))
	{
		GivePlayerWeapon(id, playergun, playerammo);
		GivePlayerWeapon(playerid, playergun, -playerammo);
		ApplyPlayerAnimation(playerid, "WEAPONS", "SHP_AR_LIFT", 4.0, 0, 0, 0, 0, 0, 1);

	    format(string, sizeof(string), "%s hands a weapon to %s.", GetName(playerid), GetName(id));
	   	ProxDetector(10.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	   	
   		// Logging givegun
	    new givegunstring[256];
	    new playername[MAX_PLAYER_NAME];
		new targetname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerName(id, targetname, sizeof(targetname));
		
		new Hour, Minute, Second;
		gettime(Hour, Minute, Second);

		format(givegunstring, sizeof(givegunstring), "[%d:%d:%d] %s has given a weapon (%d) to %s.", Hour, Minute, Second, playername, GetPlayerWeapon(playerid), targetname);
		GiveGunLog(givegunstring);
		// -------------------------------------------------------
	} else return SCM(playerid, COLOR_LIGHTRED, "You're not close enough.");
  	return 1;
}

CMD:dice(playerid, params[])
{
	new
	dice = 1 + random(6), string[64];
	if(Dice[playerid] == 0) return SCM(playerid, COLOR_LIGHTRED, "You do not have a dice.");
 	format(string, sizeof(string), "%s rolls a dice that lands on %d.", GetName(playerid), dice);
	ProxDetector(10.0, playerid, string, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE);
  	return 1;
}

CMD:coin(playerid, params[])
{
	new string[64];
	new cointoss = 0 + random(2);
	if(cointoss == 0)
	{
		format(string, sizeof(string), "%s tosses a coin that lands on heads.", GetName(playerid));
		ProxDetector(10.0, playerid, string, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE);
		return 1;
	}
	else if(cointoss == 1)
	{
		format(string, sizeof(string), "%s tosses a coin that lands on tails.", GetName(playerid));
		ProxDetector(10.0, playerid, string, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE);
		return 1;
	}
    return 1;
}

CMD:animlist(playerid, params[])
{
	SCM(playerid, COLOR_WHITE, "_______________________________[ANIMATIONS]_______________________________");
	SCM(playerid, -1, "[ANIMS:] /crack [1-2] /chat /caract /hike /give /pull /face /endchat /show /shoutanim /look /drunk /sit [1-4]");
	SCM(playerid, -1, "[ANIMS:] /scratch /reload /injured /gsign [1-8] /chill [1-3] /tag [1-3] /camera [1-4]");
	SCM(playerid, -1, "[ANIMS:] /rap /think /box /tired /stance [1-2] /bar [1-2] /bat [1-3] /lean [1-2] /dance [1-5] /kiss /cpr /vomit");
	SCM(playerid, -1, "[ANIMS:] /handsup /bomb /getarrested /laugh /lookout /aim /crossarms /car [1-3] /lay [1-3] /what [1-2] /hide");
	SCM(playerid, -1, "[ANIMS:] /eat /wave [1-3] /chant /slap [1-2] /deal /fucku /taichi /play [1-3] /mourn /cry /searchfiles [1-3] /bball [1-6]");
	SCM(playerid, -1, "[ANIMS:] /liftup /putdown /pee [1-2] /wank [1-2] /strip [1-4]");
  	return 1;
}

CMD:frisk(playerid, params[])
{
	new str[256];
	new string[256];
	new id, i;
	new Float:X, Float:Y, Float:Z;
	new Player_Weapons[13];
	new Player_Ammos[13];

    if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "[Usage:] /frisk [playerid/partofname].");
   	GetPlayerPos(id, X, Y, Z);
   	if(friskApproved[playerid] == false)
   	{
	    if(IsPlayerInRangeOfPoint(playerid, 10.0, X, Y, Z))
		{
		    friskInvited[id] = true;
		    Player_Frisk[id] = playerid;
		   	format(str, sizeof(str), "Your frisk request has been sent to %s.", GetName(id));
			SendClientMessage(playerid, COLOR_YELLOW, str);
  			format(str, sizeof(str), "%s has requested to frisk you, /acceptfrisk %d.", GetName(playerid), playerid);
			SendClientMessage(id, COLOR_YELLOW, str);
		} else return SCM(playerid, COLOR_LIGHTRED, "You're not close to that player.");
	}
	else if(friskApproved[playerid] == true)
	{
	    if(friskApproved[id] == false) return SCM(playerid, COLOR_LIGHTRED, "That player has not accepted to be frisked.");
		format(string, sizeof(string), "____________[%s]____________", GetName(id));
		SCM(playerid, COLOR_WHITE, string);
	 	GetPlayerPos(id, X, Y, Z);
	    if(IsPlayerInRangeOfPoint(playerid, 10.0, X, Y, Z))
		{
			for(i = 1;i <= 12;i++)
			{
				GetPlayerWeaponData(id, i, Player_Weapons[i], Player_Ammos[i]);
				if(Player_Weapons[i] != 0 && Player_Ammos[i] != 0)
				{
					new weaponName[128];
					GetWeaponName(Player_Weapons[i], weaponName, 128);
					format(string, 255, "Weapon Name: %s | Weapon Ammo: %d", weaponName, Player_Ammos[i]);
					SendClientMessage(playerid, -1, string);
				}
			}
			format(string, 255, "Money: $%d", GetPlayerMoney(id));
			SendClientMessage(playerid, -1, string);
			format(string, 255, "LSD: %dg | Meth: %dg | Ecstasy: %dg | Marijuana: %dg | Heroin: %dg | Crack: %dg | Cocaine: %dg", PlayerInfo[id][dLSD], PlayerInfo[id][dMeth], PlayerInfo[id][dEcstasy], PlayerInfo[id][dMarijuana], PlayerInfo[id][dHeroin], PlayerInfo[id][dCrack], PlayerInfo[id][dCocaine]);
			SendClientMessage(playerid, -1, string);
   			friskApproved[Player_Frisk[playerid]] = false;
    		friskApproved[playerid] = false;
		} else return SCM(playerid, COLOR_LIGHTRED, "You're not close to that player.");
	}
	return 1;
}

CMD:acceptfrisk(playerid, params[])
{
	new str[256];
	new id;
	
    if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "[Usage:] /acceptfrisk [playerid/partofname].");
	if(friskInvited[playerid] == false) return SCM(playerid, COLOR_LIGHTRED, "You do not have a pending frisk request.");
	if(id != Player_Frisk[playerid]) return SCM(playerid, COLOR_LIGHTRED, "That player has not sent you a frisk request.");

    friskApproved[Player_Frisk[playerid]] = true;
    friskApproved[playerid] = true;
    friskInvited[playerid] = false;
    
   	format(str, sizeof(str), "You have accepted %s to frisk you.", GetName(Player_Frisk[playerid]));
	SendClientMessage(id, COLOR_YELLOW, str);
	
	format(str, sizeof(str), "%s has accepted your frisk request.", GetName(playerid));
	SendClientMessage(Player_Frisk[playerid], COLOR_YELLOW, str);
	return 1;
}


CMD:revokeguns(playerid, params[])
{
	new id, str[128];

	if(Duty[playerid] == 0) return SCM(playerid, COLOR_LIGHTRED, "You're not on duty.");
    if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "[Usage:] /revokeguns [playerid/partofname].");
    RemoveWeapons(id);
    
   	format(str, sizeof(str), "Your weapons have been revoked by %s.", GetName(playerid));
	SendClientMessage(id, -1, str);
	return 1;
}

CMD:revokedrugs(playerid, params[])
{
	new id, str[128];

	if(Duty[playerid] == 0) return SCM(playerid, COLOR_LIGHTRED, "You're not on duty.");
    if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "[Usage:] /revokedrugs [playerid/partofname].");
    RemoveDrugs(id);
    
   	format(str, sizeof(str), "Your narcotica have been revoked by %s.", GetName(playerid));
	SendClientMessage(id, -1, str);
	return 1;
}


CMD:buy(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 7.0, -23.5424, -55.6289, 1003.5469) || IsPlayerInRangeOfPoint(playerid, 7.0, -31.0680, -29.0295, 1003.5573) || IsPlayerInRangeOfPoint(playerid, 7.0, -22.2473, -138.6266, 1003.5469) || IsPlayerInRangeOfPoint(playerid, 7.0, -28.2207, -89.9549, 1003.5469))
    {
		ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_LIST, "24/7", "6 Pack of Beers ($15)\nPack of Cigarettes ($5)\nDice ($1)\nMask ($50)\nWater Bottle ($2)\nToolkit ($50)\nBaseball Bat ($25)", "Purchase", "Cancel");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 7.0, 388.1848, -2088.7964, 7.8359))
	{
	    ShowPlayerDialog(playerid, DIALOG_FISH_BUY, DIALOG_STYLE_LIST, "Fishing Shop", "Simple Fishing Rod ($15)\nWorms ($50)", "Purchase", "Cancel");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 7.0, -2237.1465, 130.1773, 1035.4141))
	{
	    ShowPlayerDialog(playerid, DIALOG_ELECTRONICS_BUY, DIALOG_STYLE_LIST, "Electronics Shop", "Cellphone ($100)\nBoombox ($2000)", "Purchase", "Cancel");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 7.0, 1920.6749, -1862.6566, 13.3332))
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    ShowPlayerDialog(playerid, DIALOG_MECHANIC_BUY, DIALOG_STYLE_LIST, "Car Parts Shop", "Color ($100)\nRims\nRepair ($100)", "Select", "Cancel");
		}
		else return SCM(playerid, COLOR_LIGHTRED, "You are not driving a vehicle.");
	}
  	return 1;
}

CMD:buygun(playerid, params[])
{
    if(PlayerInfo[playerid][pGunRights] == 0) return SCM(playerid, COLOR_LIGHTRED, "You do not have weapon rights.");
	if(PlayerInfo[playerid][pAge] < 21) return SCM(playerid, COLOR_LIGHTRED, "You are not twenty one years old.");
	if(PlayerInfo[playerid][pPlayingHours] < 8) return SCM(playerid, COLOR_LIGHTRED, "You need to play eight hours before you can buy a weapon.");
	if(PlayerInfo[playerid][pDriverLicense] < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have a drivers license.");
    if(IsPlayerInRangeOfPoint(playerid, 20.0, 290.1136, -109.4360, 1001.5156))
    {
		ShowPlayerDialog(playerid, DIALOG_BUYGUN, DIALOG_STYLE_LIST, "Ammu-Nation", "Knife ($200)\nCountry Rifle ($1000)\nColt 45 ($1400)\nRemington Shotgun ($2400)", "Purchase", "Cancel");
	}
  	return 1;
}

CMD:takegunrights(playerid, params[])
{
	new id;
	if(PlayerInfo[playerid][pAdmin] < 2 || PlayerInfo[playerid][pFaction] == 2) return SCM(playerid, COLOR_LIGHTRED, "You are not a police officer.");
    if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "[Usage:] /takegunrights [playerid/partofname].");
    PlayerInfo[id][pGunRights] = 0;
    new string[128];
   	format(string, sizeof(string), "%s has revoked your weapon rights.", GetName(playerid));
	SendClientMessage(id, COLOR_SJPD, string);
	format(string, sizeof(string), "You have revoked %s's weapon rights.", GetName(id));
	SendClientMessage(playerid, COLOR_SJPD, string);
  	return 1;
}

CMD:givegunrights(playerid, params[])
{
	new id;
	if(PlayerInfo[playerid][pAdmin] < 2 || PlayerInfo[playerid][pFaction] == 2) return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "[Usage:] /givegunrights [playerid/partofname].");
    PlayerInfo[id][pGunRights] = 1;
    new string[128];
   	format(string, sizeof(string), "%s has given you weapon rights.", GetName(playerid));
	SendClientMessage(id, COLOR_SJPD, string);
	format(string, sizeof(string), "You have given %s weapon rights.", GetName(id));
	SendClientMessage(playerid, COLOR_SJPD, string);
  	return 1;
}

CMD:map(playerid, params[])
{
    ShowPlayerDialog(playerid, DIALOG_MAP, DIALOG_STYLE_LIST, "San Jose Map", "Bus Job\n24/7 Job\nFishing Job\nPizza Job\nDMV\nClothes Store\nHospital\nCorrectional Facility\nAdvertisement Center\nBank\nElectronic Store\nDealership\nGarage", "Select", "Cancel");
  	return 1;
}

CMD:buyclothes(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 50.0, 207.737991, -109.019996, 1005.132812) || IsPlayerInRangeOfPoint(playerid, 50.0, 204.332992, -166.694992, 1000.523437) || IsPlayerInRangeOfPoint(playerid, 50.0, 207.054992, -138.804992, 1003.507812)
	|| IsPlayerInRangeOfPoint(playerid, 50.0, 203.777999, -48.492397, 1001.804687) || IsPlayerInRangeOfPoint(playerid, 50.0, 226.293991, -7.431529, 1002.210937) || IsPlayerInRangeOfPoint(playerid, 50.0, 161.391006, -93.159156, 1001.804687))
    {
        if(PlayerInfo[playerid][pGender] == 0)
        {
    		ShowModelSelectionMenu(playerid, males, "Clothes");
		}
  		else if(PlayerInfo[playerid][pGender] == 1)
        {
    		ShowModelSelectionMenu(playerid, females, "Clothes");
		}
	}
	else return SCM(playerid, COLOR_GREY, "You need to be in a clothes shop.");
  	return 1;
}

CMD:buydrink(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 50.0, -225.2586, 1403.5033, 27.7734) || IsPlayerInRangeOfPoint(playerid, 50.0, 497.6700, -75.3567, 998.7578) || IsPlayerInRangeOfPoint(playerid, 50.0, 1204.809936, -11.586799, 1000.921875)
	|| IsPlayerInRangeOfPoint(playerid, 50.0, -2640.762939, 1406.682006, 906.460937) || IsPlayerInRangeOfPoint(playerid, 50.0, 493.390991, -22.722799, 1000.679687) || IsPlayerInRangeOfPoint(playerid, 50.0, 455.4125, -107.2480, 999.5171))
    {
    	ShowPlayerDialog(playerid, DIALOG_BUYDRINK, DIALOG_STYLE_LIST, "Drinks", "Carlsberg "COL_GREEN"($5)\nGuinness "COL_GREEN"($5)\nMartini "COL_GREEN"(7$)\nBloody Mary "COL_GREEN"($10)\nSex On The Beach "COL_GREEN"($15)", "Purchase", "Cancel");
	}
	else return SCM(playerid, COLOR_GREY, "You need to be in a club/bar.");
  	return 1;
}

CMD:train(playerid, params[])
{
	if(PlayerInfo[playerid][pPlayingHours] < 4) return SCM(playerid, COLOR_LIGHTRED, "You need to play four hours before you can train at the gym.");
    if(IsPlayerInRangeOfPoint(playerid, 7.0, 772.2167, 5.2337, 1000.7802) || IsPlayerInRangeOfPoint(playerid, 7.0, 759.2585, -59.2561, 1000.7802))
	{
 		ShowPlayerDialog(playerid, DIALOG_TRAIN, DIALOG_STYLE_LIST, "Gym", "Normal ($100)\nBoxing ($100)\nKneehead($100)\nKung-Fu ($100)", "Learn", "Cancel");
	} else return SCM(playerid, COLOR_LIGHTRED, "You are not inside a gym.");
  	return 1;
}

CMD:lockbiz(playerid, params[])
{
		new id = IsPlayerNearBizEnt(playerid);
		new id2 = IsPlayerNearBizExit(playerid);
		if(PlayerInfo[playerid][BizID] == 0) return SCM(playerid, COLOR_LIGHTRED, "You do not own a business.");
	   	for(new b = 1; b < sizeof(BusinessInfo); b++)
	  	{
	   		    if(id == PlayerInfo[playerid][BizID] || id2 == PlayerInfo[playerid][BizID])
	   		    {
	   		        if(BusinessInfo[b][bLocked] == 1)
	   		        {
				        BusinessInfo[b][bLocked] = 0;
				        GameTextForPlayer(playerid, "~w~business ~g~ UNLOCKED", 3000, 6);
				        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

				        new file4[40];
				        format(file4, sizeof(file4), BPATH, b);
				        new INI:File = INI_Open(file4);
				        INI_SetTag(File, "data");
				        INI_WriteInt(File, "bLocked", BusinessInfo[b][bLocked]);
				        INI_Close(File);
				        break;
					}
					else
					{
				    	BusinessInfo[b][bLocked] = 1;
				        GameTextForPlayer(playerid, "~w~business ~r~ LOCKED", 3000, 6);
				        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

				        new file4[40];
				        format(file4, sizeof(file4), BPATH, b);
				        new INI:File = INI_Open(file4);
				        INI_SetTag(File, "data");
				        INI_WriteInt(File, "bLocked", BusinessInfo[b][bLocked]);
				        INI_Close(File);
				        break;
				}
			}
		}
		return 1;
    }

CMD:alockbiz(playerid, params[])
{
	for(new b = 1; b < sizeof(BusinessInfo); b++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.5, BusinessInfo[b][bEntranceX], BusinessInfo[b][bEntranceY], BusinessInfo[b][bEntranceZ]))
	 	{
		    if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
		    if(BusinessInfo[b][bLocked] == 1)
		    {
		        BusinessInfo[b][bLocked] = 0;
		        GameTextForPlayer(playerid, "~w~business ~g~ UNLOCKED", 3000, 6);
		        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		       	new file4[40];
				format(file4, sizeof(file4), BPATH, b);
				new INI:File = INI_Open(file4);
				INI_SetTag(File, "data");
				INI_WriteInt(File, "bLocked", BusinessInfo[b][bLocked]);
				INI_Close(File);
		    }
		    else if(BusinessInfo[b][bLocked] == 0)
		    {
		        BusinessInfo[b][bLocked] = 1;
		        GameTextForPlayer(playerid, "~w~business ~r~ LOCKED", 3000, 6);
		        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		       	new file4[40];
				format(file4, sizeof(file4), BPATH, b);
				new INI:File = INI_Open(file4);
				INI_SetTag(File, "data");
				INI_WriteInt(File, "bLocked", BusinessInfo[b][bLocked]);
				INI_Close(File);
		    }
		} else return SCM(playerid, COLOR_LIGHTRED, "You're not close to any business.");
	}
	return 1;
}

CMD:agotobiz(playerid, params[])
{
    new id, str[64];

    if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "You're not authorized to use that command.");
    if(sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /agotobusiness [id] (street number is the ID)");

    SetPlayerPos(playerid, BusinessInfo[id][bEntranceX], BusinessInfo[id][bEntranceY], BusinessInfo[id][bEntranceZ]);
    format(str, sizeof(str), "AdmCmd: You have succesfully teleported to business id %d.", id);
	SCM(playerid, COLOR_LIGHTRED, str);
    return 1;
}

CMD:abizname(playerid, params[])
{
    new
	name[128], biztext[24];
	new string[280];

 	new
	id = IsPlayerNearBizEnt(playerid);

    if(sscanf(params, "s[128]", name)) return SCM(playerid, COLOR_GREY, "[Usage:] /abizname [name]");
    SCM(playerid, COLOR_LIGHTRED, "AdmCmd: You have succesfully changed the name of this business.");
   	switch(BusinessInfo[id][bType])
    {
        	case 24: biztext = "Advertisement Center";
            case 23: biztext = "Brothel";
        	case 22: biztext = "Garage";
            case 21: biztext = "Apartment Complex";
 			case 20: biztext = "Dealership";
 			case 19: biztext = "Electronic Store";
   			case 18: biztext = "Ammu-Nation";
   			case 17: biztext = "Gym";
   			case 16: biztext = "Hotel";
   			case 15: biztext = "Motel";
   			case 14: biztext = "Diner";
         	case 13: biztext = "Tattoo Store";
         	case 12: biztext = "Barbershop";
            case 11: biztext = "Flower Store";
           	case 10: biztext = "98 Cents";
    		case 9: biztext = "69 Cents";
            case 8: biztext = "Liqour Store";
	    	case 7: biztext = "Restaurant";
	    	case 6: biztext = "Bank";
	    	case 5: biztext = "Hospital";
	        case 4: biztext = "Police Station";
	        case 3: biztext = "24/7";
	        case 2: biztext = "Club";
	        case 1: biztext = "Bar";
	        case 0: biztext = "Clothes Shop";
    }
 	BusinessInfo[id][bName] = name;
    format(string, sizeof(string), ""COL_BROWN"Owner: "COL_WHITE"%s\n"COL_BROWN"Name: "COL_WHITE"%s\n"COL_BROWN"Type: "COL_WHITE"%s\n"COL_BROWN"Street Number: "COL_WHITE"%d", BusinessInfo[id][bPrice], BusinessInfo[id][bName], biztext, id);
	Update3DTextLabelText(BusinessInfo[id][DLabel], 0xFFFFFFFF, string);
	new file4[40];
	format(file4, sizeof(file4), BPATH, id);
	new INI:File = INI_Open(file4);
	INI_SetTag(File, "data");
	INI_WriteString(File, "bName", BusinessInfo[id][bName]);
	INI_Close(File);
    return 1;
}

CMD:entergarage(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 265.9687, 115.3523, 1004.6172))
	{
	    oldvw[playerid] = GetPlayerVirtualWorld(playerid);
	    SetPlayerPos(playerid, 1568.6774, -1689.9703, 6.2188);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	}
	return 1;
}

CMD:exitgarage(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1568.7365, -1689.9713, 6.2188))
	{
	    SetPlayerPos(playerid, 265.9687, 115.3523, 1004.6172);
	    SetPlayerInterior(playerid, 10);
	    SetPlayerVirtualWorld(playerid, 5);
	}
	return 1;
}

CMD:enter(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 10.0, -2112.1055, -2456.3215, 30.9622))
 	{
		SetPlayerPos(playerid, 390.2524, 173.7749, 1008.3828);
		SetPlayerInterior(playerid, 3);
		SetPlayerVirtualWorld(playerid, 3050);
		return 1;
	}
	if(GetPlayerVirtualWorld(playerid) == 9)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, 212.4356, 1816.6110, 399.4444))
	    {
	        SetPlayerPos(playerid, -2069.6125, -2406.3110, 109.8941);
	        SetPlayerVirtualWorld(playerid, 0);
			return 1;
		}
	}
	
	if(GetPlayerVirtualWorld(playerid) == 16)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, 212.4356, 1816.6110, 399.4444))
	    {
	        SetPlayerPos(playerid, -2223.3364, -2301.6809, 128.1741);
	        SetPlayerVirtualWorld(playerid, 0);
			return 1;
		}
	}
	
	if(GetPlayerVirtualWorld(playerid) == 15)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, 212.4356, 1816.6110, 399.4444))
	    {
	        SetPlayerPos(playerid, -2184.3457, -2246.1584, 129.3541);
	        SetPlayerVirtualWorld(playerid, 0);
			return 1;
		}
	}
	    
	// Angel Pine Garage
	if(PlayerInfo[playerid][pFaction] == 2)
	{
		if(IsPlayerInRangeOfPoint(playerid, 10.0, -2103.4080, -2484.7056, 30.6250))
		{
		    new vehicle;
			vehicle = GetPlayerVehicleID(playerid);
		    SetPlayerPos(playerid, 1589.2849, -1642.7806, 12.6579);
		    SetVehiclePos(vehicle, 1589.2849, -1642.7806, 12.6579);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerInterior(playerid, 0);
		    PutPlayerInVehicle(playerid, vehicle, 0);
	    	return 1;
		}
	}
	// Gant Bridge Toilet Entrance 2
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 442.3555, -105.1734, 999.5183))
	{
	    oldvw[playerid] = GetPlayerVirtualWorld(playerid);
	    SetPlayerPos(playerid, 363.3972, -63.5292, 1001.5078);
	    SetPlayerVirtualWorld(playerid, 2);
	    SetPlayerInterior(playerid, 10);
	    return 1;
	}
	// SJPD Cafeteria
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 246.4166, 88.0069, 1003.6406))
	{
	    SetPlayerPos(playerid, 221.7397, 79.8333, 1005.0391);
	    return 1;
	}
    for(new b = 1; b < sizeof(BusinessInfo); b++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 5.0, BusinessInfo[b][bEntranceX], BusinessInfo[b][bEntranceY], BusinessInfo[b][bEntranceZ]))
        {
        	if(GetPlayerVirtualWorld(playerid) == BusinessInfo[b][bWorld])
        	{
        	    if(!IsPlayerInAnyVehicle(playerid))
        	    {
		            if(BusinessInfo[b][bLocked] == 1) return SendClientMessage(playerid, COLOR_WHITE, "This business is locked.");
		            SetPlayerPos(playerid, BusinessInfo[b][bExitX], BusinessInfo[b][bExitY], BusinessInfo[b][bExitZ]);
		            SetPlayerFacingAngle(playerid, BusinessInfo[b][bExitA]);
		            SetPlayerInterior(playerid, BusinessInfo[b][bInsideInt]);
		            SetPlayerVirtualWorld(playerid, BusinessInfo[b][bInsideWorld]);
		            InsideBiz[playerid] = b;
		            TogglePlayerControllable(playerid, 0);
		            SetTimerEx("LoadInterior", 3000, false, "i", playerid);
		            return 1;
				}
				else
				{
				    if(BusinessInfo[b][bType] != 22) return SendClientMessage(playerid, COLOR_WHITE, "You can't enter this business with a vehicle.");
    				if(BusinessInfo[b][bLocked] == 1) return SendClientMessage(playerid, COLOR_WHITE, "This business is locked.");
        			new vehicleid = GetPlayerVehicleID(playerid);
        			SetVehiclePos(vehicleid, BusinessInfo[b][bExitX], BusinessInfo[b][bExitY], BusinessInfo[b][bExitZ]);
        			SetVehicleZAngle(GetPlayerVehicleID(playerid), BusinessInfo[b][bExitA]);
		            SetPlayerPos(playerid, BusinessInfo[b][bExitX], BusinessInfo[b][bExitY], BusinessInfo[b][bExitZ]);
		            SetPlayerFacingAngle(playerid, BusinessInfo[b][bExitA]);
		            SetPlayerInterior(playerid, BusinessInfo[b][bInsideInt]);
		            SetPlayerVirtualWorld(playerid, BusinessInfo[b][bInsideWorld]);
		            InsideBiz[playerid] = b;
		            TogglePlayerControllable(playerid, 0);
		            SetTimerEx("LoadInterior", 3000, false, "i", playerid);
		            PutPlayerInVehicle(playerid, vehicleid, 0);
		            return 1;
				}
			}
        }
    }
    for(new h = 1; h < sizeof(HouseInfo); h++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 4.0, HouseInfo[h][hEntranceX], HouseInfo[h][hEntranceY], HouseInfo[h][hEntranceZ]))
        {
       		if(GetPlayerVirtualWorld(playerid) == HouseInfo[h][hWorld])
        	{
	            if(HouseInfo[h][hLocked] == 1) return SendClientMessage(playerid, COLOR_WHITE, "This house is locked.");
	            SetPlayerPos(playerid, HouseInfo[h][hExitX], HouseInfo[h][hExitY], HouseInfo[h][hExitZ]);
	            SetPlayerFacingAngle(playerid, HouseInfo[h][hExitA]);
	            SetPlayerInterior(playerid, HouseInfo[h][hInsideInt]);
	            SetPlayerVirtualWorld(playerid, HouseInfo[h][hInsideWorld]);
	            InsideHouse[playerid] = h;
	            TogglePlayerControllable(playerid, 0);
	            SetTimerEx("LoadInterior", 3000, false, "i", playerid);
	            return 1;
			}
        }
    }
    return 1;
}

CMD:exit(playerid, params[])
{

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 390.2524, 173.7749, 1008.3828))
 	{
		SetPlayerPos(playerid, -2112.1626, -2456.3950, 30.9622);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		return 1;
	}
	// exit rooftops
 	if(IsPlayerInRangeOfPoint(playerid, 5.0, -2184.3457, -2246.1584, 129.3541))
  	{
   		SetPlayerVirtualWorld(playerid, 15);
   		SetPlayerPos(playerid, 212.4356, 1816.6110, 399.4444);
     	TogglePlayerControllable(playerid, 0);
     	SetTimerEx("LoadInterior", 3000, false, "i", playerid);
		return 1;
	}

 	if(IsPlayerInRangeOfPoint(playerid, 5.0, -2223.3364, -2301.6809, 128.1741))
  	{
   		SetPlayerVirtualWorld(playerid, 16);
   		SetPlayerPos(playerid, 212.4356, 1816.6110, 399.4444);
     	TogglePlayerControllable(playerid, 0);
     	SetTimerEx("LoadInterior", 3000, false, "i", playerid);
		return 1;
	}

 	if(IsPlayerInRangeOfPoint(playerid, 5.0, -2069.6125, -2406.3110, 109.8941))
  	{
   		SetPlayerVirtualWorld(playerid, 9);
   		SetPlayerPos(playerid, 212.4356, 1816.6110, 399.4444);
     	TogglePlayerControllable(playerid, 0);
     	SetTimerEx("LoadInterior", 3000, false, "i", playerid);
		return 1;
	}
	
	// SJPD Garage
	if(PlayerInfo[playerid][pFaction] == 2)
	{
		if(IsPlayerInRangeOfPoint(playerid, 10.0, 1589.2849, -1642.7806, 12.6579))
		{
		    new vehicle;
			vehicle = GetPlayerVehicleID(playerid);
		    SetPlayerPos(playerid, -2103.4080, -2484.7056, 30.6250);
		    SetVehiclePos(vehicle, -2103.4080, -2484.7056, 30.6250);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerInterior(playerid, 0);
		    PutPlayerInVehicle(playerid, vehicle, 0);
	    	return 1;
		}
	}
	// Gant Bridge Toilet Exit 2
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 363.3972, -63.5292, 1001.5078))
	{
	    SetPlayerPos(playerid, 442.3555, -105.1734, 999.5183);
	    SetPlayerVirtualWorld(playerid, oldvw[playerid]);
	    SetPlayerInterior(playerid, 5);
	    return 1;
	}
	// SJPD Cafeteria
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 221.7397, 79.8333, 1005.0391))
	{
	    SetPlayerPos(playerid, 246.4166, 88.0069, 1003.6406);
	    return 1;
	}
    for(new b = 1; b < sizeof(BusinessInfo); b++)//Loops through all the businesses.
    {
        if(IsPlayerInRangeOfPoint(playerid, 5.0, BusinessInfo[b][bExitX], BusinessInfo[b][bExitY], BusinessInfo[b][bExitZ]) && GetPlayerVirtualWorld(playerid) == BusinessInfo[b][bInsideWorld])//Checks if player is in near the exit.
        {
   	    	if(!IsPlayerInAnyVehicle(playerid))
    	    {
	            SetPlayerPos(playerid, BusinessInfo[b][bEntranceX], BusinessInfo[b][bEntranceY], BusinessInfo[b][bEntranceZ]);
	            SetPlayerFacingAngle(playerid, BusinessInfo[b][bEntranceA]);
	            SetPlayerInterior(playerid, BusinessInfo[b][bInt]);
	            SetPlayerVirtualWorld(playerid, BusinessInfo[b][bWorld]);
	            InsideBiz[playerid] = 0;
            	return 1;
			}
			else
			{
				new vehicleid = GetPlayerVehicleID(playerid);
 				SetVehiclePos(vehicleid, BusinessInfo[b][bExitX], BusinessInfo[b][bExitY], BusinessInfo[b][bExitZ]);
  				SetVehicleZAngle(GetPlayerVehicleID(playerid), BusinessInfo[b][bExitA]);
       			SetPlayerPos(playerid, BusinessInfo[b][bEntranceX], BusinessInfo[b][bEntranceY], BusinessInfo[b][bEntranceZ]);
	            SetPlayerFacingAngle(playerid, BusinessInfo[b][bEntranceA]);
	            SetPlayerInterior(playerid, BusinessInfo[b][bInt]);
	            SetPlayerVirtualWorld(playerid, BusinessInfo[b][bWorld]);
	            InsideBiz[playerid] = 0;
	            PutPlayerInVehicle(playerid, vehicleid, 0);
			}
        }
    }
    for(new h = 1; h < sizeof(HouseInfo); h++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[h][hExitX], HouseInfo[h][hExitY], HouseInfo[h][hExitZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[h][hInsideWorld])
        {
            SetPlayerPos(playerid, HouseInfo[h][hEntranceX], HouseInfo[h][hEntranceY], HouseInfo[h][hEntranceZ]);
            SetPlayerFacingAngle(playerid, HouseInfo[h][hEntranceA]);
            SetPlayerInterior(playerid, HouseInfo[h][hInt]);
            SetPlayerVirtualWorld(playerid, HouseInfo[h][hWorld]);
            InsideHouse[playerid] = 0;
            TogglePlayerControllable(playerid, 0);
            SetTimerEx("LoadInterior", 3000, false, "i", playerid);
            return 1;
        }
    }
    return 1;
}

CMD:sellbiz(playerid, params[])
{
    new
	id2 = PlayerInfo[playerid][BizID];

	new biztext[24];
	new string[256];

    if(PlayerInfo[playerid][BizID] == 0) return SCM(playerid, COLOR_LIGHTRED, "You do not own a business.");
    BusinessInfo[id2][bOwned] = 0;
    BusinessInfo[id2][bOwner] = 0;
    BusinessInfo[id2][bLocked] = 0;
    BusinessInfo[id2][bName] = 0;
    GivePlayerMoney(playerid, BusinessInfo[id2][bPrice]);
    PlayerInfo[playerid][BizID] = 0;
    SCM(playerid, COLOR_WHITE, "You have succesfully sold your business. Sad to see it go.");

	switch(BusinessInfo[id2][bType])
 	{
	        	case 25: biztext = "Betting Shop";
	        	case 24: biztext = "Advertisement Center";
	            case 23: biztext = "Brothel";
	        	case 22: biztext = "Garage";
	            case 21: biztext = "Apartment Complex";
	 			case 20: biztext = "Dealership";
	 			case 19: biztext = "Electronic Store";
	   			case 18: biztext = "Ammu-Nation";
	   			case 17: biztext = "Gym";
	   			case 16: biztext = "Hotel";
	   			case 15: biztext = "Motel";
	   			case 14: biztext = "Diner";
	         	case 13: biztext = "Tattoo Shop";
	         	case 12: biztext = "Barbershop";
	            case 11: biztext = "Flower Store";
	           	case 10: biztext = "98 Cents";
	    		case 9: biztext = "69 Cents";
	            case 8: biztext = "Liqour Store";
		    	case 7: biztext = "Restaurant";
		    	case 6: biztext = "Bank";
		    	case 5: biztext = "Hospital";
		        case 4: biztext = "Police Station";
		        case 3: biztext = "24/7";
		        case 2: biztext = "Club";
		        case 1: biztext = "Bar";
		        case 0: biztext = "Clothes Shop";
  	}

   	format(string, sizeof(string), ""COL_WHITE"For Sale!\n"COL_BROWN"Price: "COL_WHITE"$%d\n"COL_BROWN"Type: "COL_WHITE"%s\n"COL_BROWN"Street Number: "COL_WHITE"%d", BusinessInfo[id2][bPrice], biztext, id2);
	Update3DTextLabelText(BusinessInfo[id2][DLabel], 0xFFFFFFFF, string);
	new file4[40];
	format(file4, sizeof(file4), BPATH, id2);
	new INI:File = INI_Open(file4);
	INI_SetTag(File, "data");
	INI_WriteInt(File, "bOwned", BusinessInfo[id2][bOwned]);
	INI_WriteInt(File, "bPrice", BusinessInfo[id2][bPrice]);
	INI_WriteString(File, "bOwner", BusinessInfo[id2][bOwner]);
	INI_WriteInt(File, "bType", BusinessInfo[id2][bType]);
	INI_WriteInt(File, "bLocked", BusinessInfo[id2][bLocked]);
	INI_WriteInt(File, "bMoney", BusinessInfo[id2][bMoney]);
	INI_WriteFloat(File, "bEntranceX", BusinessInfo[id2][bEntranceX]);
	INI_WriteFloat(File, "bEntranceY", BusinessInfo[id2][bEntranceY]);
	INI_WriteFloat(File, "bEntranceZ", BusinessInfo[id2][bEntranceZ]);
	INI_WriteFloat(File, "bEntranceA", BusinessInfo[id2][bEntranceA]);
	INI_WriteFloat(File, "bExitX", BusinessInfo[id2][bExitX]);
	INI_WriteFloat(File, "bExitY", BusinessInfo[id2][bExitY]);
	INI_WriteFloat(File, "bExitZ", BusinessInfo[id2][bExitZ]);
	INI_WriteFloat(File, "bExitA", BusinessInfo[id2][bExitA]);
	INI_WriteInt(File, "bInt", BusinessInfo[id2][bInt]);
	INI_WriteInt(File, "bWorld", BusinessInfo[id2][bWorld]);
	INI_WriteInt(File, "bInsideInt", BusinessInfo[id2][bInsideInt]);
	INI_WriteInt(File, "bInsideWorld", BusinessInfo[id2][bInsideWorld]);
	INI_WriteString(File, "bName", BusinessInfo[id2][bName]);
	INI_Close(File);

	new INI:File2 = INI_Open(UserPath(playerid));
	INI_SetTag(File2, "data");
	INI_WriteInt(File2, "BizID", PlayerInfo[playerid][BizID]);
	INI_Close(File2);
    return 1;
}

CMD:asellbiz(playerid, params[])
{
    new id = IsPlayerNearBizEnt(playerid);
   	new biztext[24];
	new string[256];
    if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    if(BusinessInfo[id][bOwned] == 0) return SCM(playerid, COLOR_LIGHTRED, "This business is not owned by anyone.");
    BusinessInfo[id][bOwned] = 0;
    BusinessInfo[id][bOwner] = 0;
    BusinessInfo[id][bName] = 0;
    BusinessInfo[id][bLocked] = 1;
    SCM(playerid, COLOR_LIGHTRED, "AdmCmd: You have succesfully admin-sold this business.");

	switch(BusinessInfo[id][bType])
 	{
	        	case 25: biztext = "Betting Shop";
	        	case 24: biztext = "Advertisement Center";
	            case 23: biztext = "Brothel";
	        	case 22: biztext = "Garage";
	            case 21: biztext = "Apartment Complex";
	 			case 20: biztext = "Dealership";
	 			case 19: biztext = "Electronic Store";
	   			case 18: biztext = "Ammu-Nation";
	   			case 17: biztext = "Gym";
	   			case 16: biztext = "Hotel";
	   			case 15: biztext = "Motel";
	   			case 14: biztext = "Diner";
	         	case 13: biztext = "Tattoo Shop";
	         	case 12: biztext = "Barbershop";
	            case 11: biztext = "Flower Store";
	           	case 10: biztext = "98 Cents";
	    		case 9: biztext = "69 Cents";
	            case 8: biztext = "Liqour Store";
		    	case 7: biztext = "Restaurant";
		    	case 6: biztext = "Bank";
		    	case 5: biztext = "Hospital";
		        case 4: biztext = "Police Station";
		        case 3: biztext = "24/7";
		        case 2: biztext = "Club";
		        case 1: biztext = "Bar";
		        case 0: biztext = "Clothes Shop";
  	}

 	format(string, sizeof(string), ""COL_WHITE"For Sale!\n"COL_BROWN"Price: "COL_WHITE"$%d\n"COL_BROWN"Type: "COL_WHITE"%s\n"COL_BROWN"Street Number: "COL_WHITE"%d", BusinessInfo[id][bName], BusinessInfo[id][bPrice], biztext, id);
	Update3DTextLabelText(BusinessInfo[id][DLabel], 0xFFFFFFFF, string);

	new file4[40];
	format(file4, sizeof(file4), BPATH, id);
	new INI:File = INI_Open(file4);
	INI_SetTag(File, "data");
	INI_WriteInt(File, "bOwned", BusinessInfo[id][bOwned]);
	INI_WriteInt(File, "bPrice", BusinessInfo[id][bPrice]);
	INI_WriteString(File, "bOwner", BusinessInfo[id][bOwner]);
	INI_WriteInt(File, "bType", BusinessInfo[id][bType]);
	INI_WriteInt(File, "bLocked", BusinessInfo[id][bLocked]);
	INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
	INI_WriteFloat(File, "bEntranceX", BusinessInfo[id][bEntranceX]);
	INI_WriteFloat(File, "bEntranceY", BusinessInfo[id][bEntranceY]);
	INI_WriteFloat(File, "bEntranceZ", BusinessInfo[id][bEntranceZ]);
	INI_WriteFloat(File, "bEntranceA", BusinessInfo[id][bEntranceA]);
	INI_WriteFloat(File, "bExitX", BusinessInfo[id][bExitX]);
	INI_WriteFloat(File, "bExitY", BusinessInfo[id][bExitY]);
	INI_WriteFloat(File, "bExitZ", BusinessInfo[id][bExitZ]);
	INI_WriteFloat(File, "bExitA", BusinessInfo[id][bExitA]);
	INI_WriteInt(File, "bInt", BusinessInfo[id][bInt]);
	INI_WriteInt(File, "bWorld", BusinessInfo[id][bWorld]);
	INI_WriteInt(File, "bInsideInt", BusinessInfo[id][bInsideInt]);
	INI_WriteInt(File, "bInsideWorld", BusinessInfo[id][bInsideWorld]);
	INI_WriteString(File, "bName", BusinessInfo[id][bName]);
	INI_Close(File);
    return 1;
}

CMD:bizname(playerid, params[])
{
    new
	name[128], biztext[24];
	new string[256];

 	new
	id = IsPlayerNearBizEnt(playerid);

 	if(id != PlayerInfo[playerid][BizID]) return SCM(playerid, COLOR_LIGHTRED, "You do not own this business.");
    if(sscanf(params, "s[128]", name)) return SCM(playerid, COLOR_GREY, "[Usage:] /bizname [name]");
    if(PlayerInfo[playerid][BizID] == 0) return SCM(playerid, COLOR_GREY, "You do not own a business!");
    BusinessInfo[PlayerInfo[playerid][BizID]][bName] = name;
    SCM(playerid, COLOR_WHITE, "You have succesfully changed the name of your business.");

	switch(BusinessInfo[id][bType])
 	{
	        	case 25: biztext = "Betting Shop";
	        	case 24: biztext = "Advertisement Center";
	            case 23: biztext = "Brothel";
	        	case 22: biztext = "Garage";
	            case 21: biztext = "Apartment Complex";
	 			case 20: biztext = "Dealership";
	 			case 19: biztext = "Electronic Store";
	   			case 18: biztext = "Ammu-Nation";
	   			case 17: biztext = "Gym";
	   			case 16: biztext = "Hotel";
	   			case 15: biztext = "Motel";
	   			case 14: biztext = "Diner";
	         	case 13: biztext = "Tattoo Shop";
	         	case 12: biztext = "Barbershop";
	            case 11: biztext = "Flower Store";
	           	case 10: biztext = "98 Cents";
	    		case 9: biztext = "69 Cents";
	            case 8: biztext = "Liqour Store";
		    	case 7: biztext = "Restaurant";
		    	case 6: biztext = "Bank";
		    	case 5: biztext = "Hospital";
		        case 4: biztext = "Police Station";
		        case 3: biztext = "24/7";
		        case 2: biztext = "Club";
		        case 1: biztext = "Bar";
		        case 0: biztext = "Clothes Shop";
  	}

    format(string, sizeof(string), ""COL_BROWN"Name: "COL_WHITE"%s\n"COL_BROWN"Type: "COL_WHITE"%s\n"COL_BROWN"Street Number: "COL_WHITE"%d", BusinessInfo[id][bName], biztext, id);
	Update3DTextLabelText(BusinessInfo[id][DLabel], 0xFFFFFFFF, string);
	new file4[40];
	format(file4, sizeof(file4), BPATH, id);
	new INI:File = INI_Open(file4);
	INI_SetTag(File, "data");
	INI_WriteInt(File, "bOwned", BusinessInfo[id][bOwned]);
	INI_WriteInt(File, "bPrice", BusinessInfo[id][bPrice]);
	INI_WriteString(File, "bOwner", BusinessInfo[id][bOwner]);
	INI_WriteInt(File, "bType", BusinessInfo[id][bType]);
	INI_WriteInt(File, "bLocked", BusinessInfo[id][bLocked]);
	INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
	INI_WriteFloat(File, "bEntranceX", BusinessInfo[id][bEntranceX]);
	INI_WriteFloat(File, "bEntranceY", BusinessInfo[id][bEntranceY]);
	INI_WriteFloat(File, "bEntranceZ", BusinessInfo[id][bEntranceZ]);
	INI_WriteFloat(File, "bEntranceA", BusinessInfo[id][bEntranceA]);
	INI_WriteFloat(File, "bExitX", BusinessInfo[id][bExitX]);
	INI_WriteFloat(File, "bExitY", BusinessInfo[id][bExitY]);
	INI_WriteFloat(File, "bExitZ", BusinessInfo[id][bExitZ]);
	INI_WriteFloat(File, "bExitA", BusinessInfo[id][bExitA]);
	INI_WriteInt(File, "bInt", BusinessInfo[id][bInt]);
	INI_WriteInt(File, "bWorld", BusinessInfo[id][bWorld]);
	INI_WriteInt(File, "bInsideInt", BusinessInfo[id][bInsideInt]);
	INI_WriteInt(File, "bInsideWorld", BusinessInfo[id][bInsideWorld]);
	INI_WriteString(File, "bName", BusinessInfo[id][bName]);
	INI_Close(File);
    return 1;
}

CMD:alockhouse(playerid, params[])
{
    for(new h = 1; h < sizeof(HouseInfo); h++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hEntranceX], HouseInfo[h][hEntranceY], HouseInfo[h][hEntranceZ]))
        {
       		if(GetPlayerVirtualWorld(playerid) == HouseInfo[h][hWorld])
        	{
			    if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
			    if(HouseInfo[h][hLocked] == 1)
			    {
			        HouseInfo[h][hLocked] = 0;
			        GameTextForPlayer(playerid, "~w~house ~g~ UNLOCKED", 3000, 6);
			        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

			       	new file4[40];
					format(file4, sizeof(file4), HPATH, h);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "hLocked", HouseInfo[h][hLocked]);
					INI_Close(File);
			    }
			    else if(HouseInfo[h][hLocked] == 0)
			    {
			        HouseInfo[h][hLocked] = 1;
			        GameTextForPlayer(playerid, "~w~house ~r~ LOCKED", 3000, 6);
			        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

			       	new file4[40];
					format(file4, sizeof(file4), HPATH, h);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "hLocked", HouseInfo[h][hLocked]);
					INI_Close(File);
			    }
			}
		}
	}
	return 1;
}

CMD:agotohouse(playerid, params[])
{
    new id, str[144];
    
    if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "You're not authorized to use that command.");
    if(sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /agotohouse [id] (street number is the ID)");

    SetPlayerPos(playerid, HouseInfo[id][hEntranceX], HouseInfo[id][hEntranceY], HouseInfo[id][hEntranceZ]);
    format(str, sizeof(str), "AdmCmd: You have succesfully teleported to house id %d.", id);
	SCM(playerid, COLOR_LIGHTRED, str);
    return 1;
}

CMD:buyhouse(playerid, params[])
{
	new string[144];

 	if(PlayerInfo[playerid][HouseID] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You already own a house.");

    for(new h = 1; h < sizeof(HouseInfo); h++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hEntranceX], HouseInfo[h][hEntranceY], HouseInfo[h][hEntranceZ]))
        {
       		if(GetPlayerVirtualWorld(playerid) == HouseInfo[h][hWorld])
        	{
			    if(HouseInfo[h][hOwned] != 0 || HouseInfo[h][hPrice] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "This house is not for sale.");

			    if(GetPlayerMoney(playerid) < HouseInfo[h][hPrice]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have enough money.");

			    PlayerInfo[playerid][HouseID] = h;
			    GivePlayerMoney(playerid, -HouseInfo[h][hPrice]);

				new playername[24];
				GetPlayerName(playerid, playername, sizeof(playername));
			    HouseInfo[h][hLocked] = 0;
			    HouseInfo[h][hOwned] = 1;
			    HouseInfo[h][hOwner] = playername;
			    PlayerInfo[playerid][pPlayerOwnsHouse] = 1;

			    SendClientMessage(playerid, COLOR_WHITE, "Congratulations on your new house!");

			    format(string, sizeof(string), " ", h);
				Update3DTextLabelText(HouseInfo[h][hDLabel], 0xFFFFFFFF, string);

				//DestroyDynamicPickup(HouseInfo[id][hOutsideIcon]);
			 	//HouseInfo[id][hOutsideIcon] = CreateDynamicPickup(1272, 1, HouseInfo[id][hEntranceX], HouseInfo[id][hEntranceY], HouseInfo[id][hEntranceZ], HouseInfo[id][hWorld]);

			    new file4[40];
			    format(file4, sizeof(file4), HPATH, h);
			    new INI:File = INI_Open(file4);
			    INI_SetTag(File, "data");
			    INI_WriteInt(File, "hOwned", HouseInfo[h][hOwned]);
			    INI_WriteInt(File, "hPrice", HouseInfo[h][hPrice]);
			    INI_WriteString(File, "hOwner", HouseInfo[h][hOwner]);
			    INI_WriteInt(File, "hLocked", HouseInfo[h][hLocked]);
			    INI_WriteInt(File, "hMoney", HouseInfo[h][hMoney]);
			    INI_WriteFloat(File, "hEntranceX", HouseInfo[h][hEntranceX]);
			    INI_WriteFloat(File, "hEntranceY", HouseInfo[h][hEntranceY]);
			    INI_WriteFloat(File, "hEntranceZ", HouseInfo[h][hEntranceZ]);
			    INI_WriteFloat(File, "hEntranceA", HouseInfo[h][hEntranceA]);
			    INI_WriteFloat(File, "hExitX", HouseInfo[h][hExitX]);
			    INI_WriteFloat(File, "hExitY", HouseInfo[h][hExitY]);
			    INI_WriteFloat(File, "hExitZ", HouseInfo[h][hExitZ]);
			    INI_WriteFloat(File, "hExitA", HouseInfo[h][hExitA]);
			    INI_WriteInt(File, "hInt", HouseInfo[h][hInt]);
			    INI_WriteInt(File, "hWorld", HouseInfo[h][hWorld]);
			    INI_WriteInt(File, "hInsideInt", HouseInfo[h][hInsideInt]);
			    INI_WriteInt(File, "hInsideWorld", HouseInfo[h][hInsideWorld]);
			    INI_Close(File);

				new INI:File2 = INI_Open(UserPath(playerid));
				INI_SetTag(File2, "data");
				INI_WriteInt(File2, "HouseID", PlayerInfo[playerid][HouseID]);
				INI_Close(File2);
			}
		}
	}
    return 1;
}

CMD:asellhouse(playerid, params[])
{
	new string[144];
    if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    for(new h = 1; h < sizeof(HouseInfo); h++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hEntranceX], HouseInfo[h][hEntranceY], HouseInfo[h][hEntranceZ]))
        {
       		if(GetPlayerVirtualWorld(playerid) == HouseInfo[h][hWorld])
        	{
    			if(HouseInfo[h][hOwned] == 0) return SCM(playerid, COLOR_LIGHTRED, "This house is not owned by anyone.");
			    HouseInfo[h][hOwned] = 0;
			    HouseInfo[h][hOwner] = 0;
			    HouseInfo[h][hLocked] = 1;
			    SCM(playerid, COLOR_LIGHTRED, "AdmCmd: You have succesfully admin-sold this house.");

			 	format(string, sizeof(string), ""COL_WHITE"For Sale!\n"COL_BROWN"Price: "COL_WHITE"$%d\n"COL_BROWN"Number: "COL_WHITE"%d", HouseInfo[h][hPrice], h);
				Update3DTextLabelText(HouseInfo[h][hDLabel], 0xFFFFFFFF, string);

			 	//if(HouseInfo[id][hOutsideIcon]) DestroyDynamicPickup(HouseInfo[id][hOutsideIcon]);
			    //HouseInfo[id][hOutsideIcon] = CreateDynamicPickup(1273, 1, HouseInfo[id][hEntranceX], HouseInfo[id][hEntranceY], HouseInfo[id][hEntranceZ], HouseInfo[id][hWorld]);

			    new file4[40];
			    format(file4, sizeof(file4), HPATH, h);
			    new INI:File = INI_Open(file4);
			    INI_SetTag(File, "data");
			    INI_WriteInt(File, "hOwned", HouseInfo[h][hOwned]);
			    INI_WriteInt(File, "hPrice", HouseInfo[h][hPrice]);
			    INI_WriteString(File, "hOwner", HouseInfo[h][hOwner]);
			    INI_WriteInt(File, "hLocked", HouseInfo[h][hLocked]);
			    INI_WriteInt(File, "hMoney", HouseInfo[h][hMoney]);
			    INI_WriteFloat(File, "hEntranceX", HouseInfo[h][hEntranceX]);
			    INI_WriteFloat(File, "hEntranceY", HouseInfo[h][hEntranceY]);
			    INI_WriteFloat(File, "hEntranceZ", HouseInfo[h][hEntranceZ]);
			    INI_WriteFloat(File, "hEntranceA", HouseInfo[h][hEntranceA]);
			    INI_WriteFloat(File, "hExitX", HouseInfo[h][hExitX]);
			    INI_WriteFloat(File, "hExitY", HouseInfo[h][hExitY]);
			    INI_WriteFloat(File, "hExitZ", HouseInfo[h][hExitZ]);
			    INI_WriteFloat(File, "hExitA", HouseInfo[h][hExitA]);
			    INI_WriteInt(File, "hInt", HouseInfo[h][hInt]);
			    INI_WriteInt(File, "hWorld", HouseInfo[h][hWorld]);
			    INI_WriteInt(File, "hInsideInt", HouseInfo[h][hInsideInt]);
			    INI_WriteInt(File, "hInsideWorld", HouseInfo[h][hInsideWorld]);
			    INI_Close(File);
			}
		}
	}
    return 1;
}

CMD:sellhouse(playerid, params[])
{
    new
	id2 = PlayerInfo[playerid][HouseID];

	new string[144];

    if(PlayerInfo[playerid][HouseID] == 0) return SCM(playerid, COLOR_LIGHTRED, "You do not own a house.");
    HouseInfo[id2][hOwned] = 0;
    HouseInfo[id2][hOwner] = 0;
    HouseInfo[id2][hLocked] = 1;
    PlayerInfo[playerid][pPlayerOwnsHouse] = 0;

    GivePlayerMoney(playerid, HouseInfo[id2][hPrice]);
    SCM(playerid, COLOR_WHITE, "You have succesfully sold your house. Sad to see it go.");

 	format(string, sizeof(string), ""COL_WHITE"For Sale!\n"COL_BROWN"Price: "COL_WHITE"$%d\n"COL_BROWN"Street Number: "COL_WHITE"%d", HouseInfo[id2][hPrice], id2);
	Update3DTextLabelText(HouseInfo[id2][hDLabel], 0xFFFFFFFF, string);

 	//if(HouseInfo[id2][hOutsideIcon]) DestroyDynamicPickup(HouseInfo[id2][hOutsideIcon]);
    //HouseInfo[id2][hOutsideIcon] = CreateDynamicPickup(1273, 1, HouseInfo[id2][hEntranceX], HouseInfo[id2][hEntranceY], HouseInfo[id2][hEntranceZ], HouseInfo[id2][hWorld]);
    PlayerInfo[playerid][HouseID] = 0;
    new file4[40];
    format(file4, sizeof(file4), HPATH, id2);
    new INI:File = INI_Open(file4);
    INI_SetTag(File, "data");
    INI_WriteInt(File, "hOwned", HouseInfo[id2][hOwned]);
    INI_WriteInt(File, "hPrice", HouseInfo[id2][hPrice]);
    INI_WriteString(File, "hOwner", HouseInfo[id2][hOwner]);
    INI_WriteInt(File, "hLocked", HouseInfo[id2][hLocked]);
    INI_WriteInt(File, "hMoney", HouseInfo[id2][hMoney]);
    INI_WriteFloat(File, "hEntranceX", HouseInfo[id2][hEntranceX]);
    INI_WriteFloat(File, "hEntranceY", HouseInfo[id2][hEntranceY]);
    INI_WriteFloat(File, "hEntranceZ", HouseInfo[id2][hEntranceZ]);
    INI_WriteFloat(File, "hEntranceA", HouseInfo[id2][hEntranceA]);
    INI_WriteFloat(File, "hExitX", HouseInfo[id2][hExitX]);
    INI_WriteFloat(File, "hExitY", HouseInfo[id2][hExitY]);
    INI_WriteFloat(File, "hExitZ", HouseInfo[id2][hExitZ]);
    INI_WriteFloat(File, "hExitA", HouseInfo[id2][hExitA]);
    INI_WriteInt(File, "hInt", HouseInfo[id2][hInt]);
    INI_WriteInt(File, "hWorld", HouseInfo[id2][hWorld]);
    INI_WriteInt(File, "hInsideInt", HouseInfo[id2][hInsideInt]);
    INI_WriteInt(File, "hInsideWorld", HouseInfo[id2][hInsideWorld]);
    INI_Close(File);

   	new INI:File2 = INI_Open(UserPath(playerid));
	INI_SetTag(File2, "data");
	INI_WriteInt(File2, "HouseID", PlayerInfo[playerid][HouseID]);
	INI_Close(File2);
    return 1;
}

CMD:createhouse(playerid, params[])
{
	new
	price, id, int, world, string[144], Float:Xi, 
	Float:Yi, Float:Zi, inti, Float:X, Float:Y, Float:Z, Float:A;

    if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    if(sscanf(params, "ddfff", price, inti, Xi, Yi, Zi)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /createhouse [price] [interior] [X] [Y] [Z]");

    if(price < 4000) return SendClientMessage(playerid, COLOR_LIGHTRED, "Price cannot go below $4, 000.");

    for(new h = 1;h < sizeof(HouseInfo);h++)
    {
        if(HouseInfo[h][hPrice] == 0)
        {
            id = h;
            break;
        }
    }

    GetPlayerPos(playerid, X, Y, Z);
    GetPlayerFacingAngle(playerid, A);
    int = GetPlayerInterior(playerid);
    world = GetPlayerVirtualWorld(playerid);
    HouseInfo[id][hInsideInt] = inti;
    HouseInfo[id][hExitX] = Xi;
    HouseInfo[id][hExitY] = Yi;
    HouseInfo[id][hExitZ] = Zi;

    HouseInfo[id][hOwned] = 0;
    HouseInfo[id][hPrice] = price;
    HouseInfo[id][hEntranceX] = X;
    HouseInfo[id][hEntranceY] = Y;
    HouseInfo[id][hEntranceZ] = Z;
    HouseInfo[id][hEntranceA] = A;
    HouseInfo[id][hLocked] = 1;

   	format(string, sizeof(string), ""COL_WHITE"For Sale!\n"COL_BROWN"Price: "COL_WHITE"$%d\n"COL_BROWN"Number: "COL_WHITE"%d", HouseInfo[id][hPrice], id);
	HouseInfo[id][hDLabel] = Create3DTextLabel(string, 0xFFFFFF, X, Y, Z, 10.0, GetPlayerVirtualWorld(playerid), 0);

    HouseInfo[id][hInt] =int;
    HouseInfo[id][hWorld] =world;
    HouseInfo[id][hInsideWorld] =id;

    format(string, sizeof(string), "None");
    strmid(BusinessInfo[id][bName], string, 0, strlen(string), 255);

    //if(HouseInfo[id][hOutsideIcon]) DestroyDynamicPickup(HouseInfo[id][hOutsideIcon]);
    //HouseInfo[id][hOutsideIcon] = CreateDynamicPickup(1273, 1, HouseInfo[id][hEntranceX], HouseInfo[id][hEntranceY], HouseInfo[id][hEntranceZ], HouseInfo[id][hWorld]);
    new file4[40];
    format(file4, sizeof(file4), HPATH, id);
    new INI:File = INI_Open(file4);
    INI_SetTag(File, "data");
    INI_WriteInt(File, "hOwned", HouseInfo[id][hOwned]);
    INI_WriteInt(File, "hPrice", HouseInfo[id][hPrice]);
    INI_WriteString(File, "hOwner", HouseInfo[id][hOwner]);
    INI_WriteInt(File, "hLocked", HouseInfo[id][hLocked]);
    INI_WriteInt(File, "hMoney", HouseInfo[id][hMoney]);
    INI_WriteFloat(File, "hEntranceX", HouseInfo[id][hEntranceX]);
    INI_WriteFloat(File, "hEntranceY", HouseInfo[id][hEntranceY]);
    INI_WriteFloat(File, "hEntranceZ", HouseInfo[id][hEntranceZ]);
    INI_WriteFloat(File, "hEntranceA", HouseInfo[id][hEntranceA]);
    INI_WriteFloat(File, "hExitX", HouseInfo[id][hExitX]);
    INI_WriteFloat(File, "hExitY", HouseInfo[id][hExitY]);
    INI_WriteFloat(File, "hExitZ", HouseInfo[id][hExitZ]);
    INI_WriteFloat(File, "hExitA", HouseInfo[id][hExitA]);
    INI_WriteInt(File, "hInt", HouseInfo[id][hInt]);
    INI_WriteInt(File, "hWorld", HouseInfo[id][hWorld]);
    INI_WriteInt(File, "hInsideInt", HouseInfo[id][hInsideInt]);
    INI_WriteInt(File, "hInsideWorld", HouseInfo[id][hInsideWorld]);
    INI_Close(File);
    return 1;
}

CMD:deletehouse(playerid, params[])
{

	for(new h = 1; h < sizeof(HouseInfo); h++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hEntranceX], HouseInfo[h][hEntranceY], HouseInfo[h][hEntranceZ]))
        {
       		if(GetPlayerVirtualWorld(playerid) == HouseInfo[h][hWorld])
        	{
			 	if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
			 	if(HouseInfo[h][hOwned] == 1) return SCM(playerid, COLOR_LIGHTRED, "This house is owned.");

			    HouseInfo[h][hOwned] = 0;
			    HouseInfo[h][hPrice] = 0;
			    HouseInfo[h][hOwner] = 0;
			    HouseInfo[h][hLocked] = 0;
			    HouseInfo[h][hMoney] = 0;
			    HouseInfo[h][hEntranceX] = 0;
			    HouseInfo[h][hEntranceY] = 0;
			    HouseInfo[h][hEntranceZ] = 0;
			    HouseInfo[h][hEntranceA] = 0;
			    HouseInfo[h][hExitX] = 0;
			    HouseInfo[h][hExitY] = 0;
			    HouseInfo[h][hExitZ] = 0;
			    HouseInfo[h][hExitA] = 0;
			    HouseInfo[h][hInt] = 0;
			    HouseInfo[h][hWorld] = 0;

			    Delete3DTextLabel(HouseInfo[h][hDLabel]);

				DestroyDynamicPickup(HouseInfo[h][hOutsideIcon]);

			    new string[64];

			    format(string, sizeof(string), HPATH, h);
			    fremove(string);
			}
		}
	}
    return 1;
}

CMD:housebalance(playerid, params[])
{
	new
	str[64], id = IsPlayerInsideHouse(playerid);

	if(id != PlayerInfo[playerid][HouseID]) return SCM(playerid, COLOR_LIGHTRED, "You do not own this house.");
 	if(PlayerInfo[playerid][HouseID] == 0) return SCM(playerid, COLOR_LIGHTRED, "You do not own a house!");
	format(str, sizeof(str), "You have $%d in your house vault.", HouseInfo[PlayerInfo[playerid][HouseID]][hMoney]);
	SCM(playerid, COLOR_WHITE, str);
    return 1;
}

CMD:lock(playerid, params[])
{
 	new vw = GetPlayerVirtualWorld(playerid);
        
	if(PlayerInfo[playerid][HouseID] == 0) return SCM(playerid, COLOR_LIGHTRED, "You do not own a house.");
	for(new h = 1; h < sizeof(HouseInfo); h++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[h][hEntranceX], HouseInfo[h][hEntranceY], HouseInfo[h][hEntranceZ]) && vw == HouseInfo[h][hWorld]) return h;
		if(IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[h][hEntranceX], HouseInfo[h][hEntranceY], HouseInfo[h][hEntranceZ]))
		{
			if(h == PlayerInfo[playerid][HouseID])
			{
				if(vw == HouseInfo[h][hWorld])
				{
					if(HouseInfo[h][hOwned] == 1)
					{
						if(HouseInfo[h][hLocked] == 1)
						{
							HouseInfo[h][hLocked] = 0;
							GameTextForPlayer(playerid, "~w~house ~g~ UNLOCKED", 3000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

							new file4[40];
							format(file4, sizeof(file4), HPATH, h);
							new INI:File = INI_Open(file4);
							INI_SetTag(File, "data");
							INI_WriteInt(File, "hLocked", HouseInfo[h][hLocked]);
							INI_Close(File);
							break;
						}
						else
						{
							HouseInfo[h][hLocked] = 1;
							GameTextForPlayer(playerid, "~w~house ~r~ LOCKED", 3000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

							new file4[40];
							format(file4, sizeof(file4), HPATH, h);
							new INI:File = INI_Open(file4);
							INI_SetTag(File, "data");
							INI_WriteInt(File, "hLocked", HouseInfo[h][hLocked]);
							INI_Close(File);
							break;
						}
					}
				}
			}
		}
		else
		{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[h][hExitX], HouseInfo[h][hExitY], HouseInfo[h][hExitZ]) && vw == HouseInfo[h][hInsideWorld]) return h;
			if(IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[h][hExitX], HouseInfo[h][hExitY], HouseInfo[h][hExitZ]))
			{
				if(h == PlayerInfo[playerid][HouseID])
				{
					if(vw == HouseInfo[h][hInsideWorld])
					{
						if(HouseInfo[h][hOwned] == 1)
						{
							if(HouseInfo[h][hLocked] == 1)
							{
								HouseInfo[h][hLocked] = 0;
								GameTextForPlayer(playerid, "~w~house ~g~ UNLOCKED", 3000, 6);
								PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

								new file4[40];
								format(file4, sizeof(file4), HPATH, h);
								new INI:File = INI_Open(file4);
								INI_SetTag(File, "data");
								INI_WriteInt(File, "hLocked", HouseInfo[h][hLocked]);
								INI_Close(File);
								break;
							}
							else
							{
								HouseInfo[h][hLocked] = 1;
								GameTextForPlayer(playerid, "~w~house ~r~ LOCKED", 3000, 6);
								PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

								new file4[40];
								format(file4, sizeof(file4), HPATH, h);
								new INI:File = INI_Open(file4);
								INI_SetTag(File, "data");
								INI_WriteInt(File, "hLocked", HouseInfo[h][hLocked]);
								INI_Close(File);
								break;
							}
						}
					}
				}
			}
		}
	}
	return 1;
}
    
CMD:takedrug(playerid, params[])
{
    new
	give[24], amount, string[128];

	new hworld = GetPlayerVirtualWorld(playerid);
    new house = PlayerInfo[playerid][HouseID];

    if(sscanf(params, "s[24]d", give, amount)) return SendClientMessage(playerid, COLOR_GREY, "[SERVER:] /takedrug (lsd, marijuana, cocaine, meth, ecstasy) [amount]");
    if(house == 0) return SCM(playerid, COLOR_LIGHTRED, "You don't own any house.");
    for(new h = 1; h < sizeof(HouseInfo); h++)
	{
		if(hworld == HouseInfo[h][hInsideWorld])
		{
  			if(house == HouseInfo[h][hInsideWorld])
   			{
			    if(!strcmp(give, "lsd", true))
			    {
				    if (amount >  HouseInfo[h][hLSD]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much LSD in your house.");

				    HouseInfo[h][hLSD] -= amount;
				    PlayerInfo[playerid][dLSD] += amount;
				    format(string, sizeof(string), "%s takes a baggie from the house vault.", GetName(playerid));
				    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			     	new string2[128];
				    format(string2, sizeof(string2), "* %s takes a baggie from the house vault.", GetName(playerid));
				    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
				    format(string, sizeof(string), "You have taken %dg of LSD from your house.", amount);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			    else if(!strcmp(give, "marijuana", true))
			    {
				    if (amount >  HouseInfo[h][hMarijuana]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much marijuana in your house.");

				    HouseInfo[h][hMarijuana] -= amount;
				    PlayerInfo[playerid][dMarijuana] += amount;
				    format(string, sizeof(string), "%s takes a baggie from the house vault.", GetName(playerid));
				    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			     	new string2[128];
				    format(string2, sizeof(string2), "* %s takes a baggie from the house vault.", GetName(playerid));
				    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
				    format(string, sizeof(string), "You have taken %dg of marijuana from your house.", amount);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			    else if(!strcmp(give, "cocaine", true))
			    {
				    if (amount >  HouseInfo[h][hCocaine]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much cocaine in your house.");

				    HouseInfo[h][hCocaine] -= amount;
				    PlayerInfo[playerid][dCocaine] += amount;
				    format(string, sizeof(string), "%s takes a baggie from the house vault.", GetName(playerid));
				    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			     	new string2[128];
				    format(string2, sizeof(string2), "* %s takes a baggie from the house vault.", GetName(playerid));
				    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
				    format(string, sizeof(string), "You have taken %dg of cocaine from your house.", amount);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			    else if(!strcmp(give, "meth", true))
			    {
				    if (amount >  HouseInfo[h][hMeth]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much meth in your house.");

				    HouseInfo[h][hMeth] -= amount;
				    PlayerInfo[playerid][dMeth] += amount;
				    format(string, sizeof(string), "%s takes a baggie from the house vault.", GetName(playerid));
				    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			     	new string2[128];
				    format(string2, sizeof(string2), "* %s takes a baggie from the house vault.", GetName(playerid));
				    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
				    format(string, sizeof(string), "You have taken %dg of meth from your house.", amount);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			    else if(!strcmp(give, "ecstasy", true))
			    {
				    if (amount >  HouseInfo[h][hEcstasy]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much LSD in your house.");

				    HouseInfo[h][hEcstasy] -= amount;
				    PlayerInfo[playerid][dEcstasy] += amount;
				    format(string, sizeof(string), "%s takes a baggie from the house vault.", GetName(playerid));
				    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			     	new string2[128];
				    format(string2, sizeof(string2), "* %s takes a baggie from the house vault.", GetName(playerid));
				    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
				    format(string, sizeof(string), "You have taken %dg of ecstasy from your house.", amount);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			    else if(!strcmp(give, "heroin", true))
			    {
				    if (amount >  HouseInfo[h][hHeroin]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much meth in your house.");

				    HouseInfo[h][hHeroin] -= amount;
				    PlayerInfo[playerid][dHeroin] += amount;
				    format(string, sizeof(string), "%s takes syringes from the house vault.", GetName(playerid));
				    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			     	new string2[128];
				    format(string2, sizeof(string2), "* %s takes syringes from the house vault.", GetName(playerid));
				    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
				    format(string, sizeof(string), "You have taken %dg of heroin from your house.", amount);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			    else if(!strcmp(give, "crack", true))
			    {
				    if (amount >  HouseInfo[h][hCrack]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much LSD in your house.");

				    HouseInfo[h][hCrack] -= amount;
				    PlayerInfo[playerid][dCrack] += amount;
				    format(string, sizeof(string), "%s takes a baggie from the house vault.", GetName(playerid));
				    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			     	new string2[128];
				    format(string2, sizeof(string2), "* %s takes a baggie from the house vault.", GetName(playerid));
				    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
				    format(string, sizeof(string), "You have taken %dg of ecstasy from your house.", amount);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			}
		}
	}
    return 1;
}
    
CMD:putdrug(playerid, params[])
{
    new
	give[24], amount, string[128];
	
	new hworld = GetPlayerVirtualWorld(playerid);
    new house = PlayerInfo[playerid][HouseID];

    if(sscanf(params, "s[24]d", give, amount)) return SendClientMessage(playerid, COLOR_GREY, "[SERVER:] /putdrug (lsd, marijuana, cocaine, meth, ecstasy) [amount]");
    if(house == 0) return SCM(playerid, COLOR_LIGHTRED, "You don't own any house.");
    for(new h = 1; h < sizeof(HouseInfo); h++)
	{
		if(hworld == HouseInfo[h][hInsideWorld])
		{
  			if(house == HouseInfo[h][hInsideWorld])
   			{
			    if(!strcmp(give, "lsd", true))
			    {
				    if (amount > PlayerInfo[playerid][dLSD]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much LSD.");

				    HouseInfo[h][hLSD] += amount;
				    PlayerInfo[playerid][dLSD] -= amount;
				    format(string, sizeof(string), "%s places a baggie in the house vault.", GetName(playerid));
				    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			     	new string2[128];
				    format(string2, sizeof(string2), "* %s places a baggie in the house vault.", GetName(playerid));
				    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
				    format(string, sizeof(string), "You have stashed %dg of LSD in your house.", amount);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			    else if(!strcmp(give, "marijuana", true))
			    {
				    if (amount > PlayerInfo[playerid][dMarijuana]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much marijuana.");

				    HouseInfo[h][hMarijuana] += amount;
				    PlayerInfo[playerid][dMarijuana] -= amount;
				    format(string, sizeof(string), "%s places a baggie in the house vault.", GetName(playerid));
				    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			     	new string2[128];
				    format(string2, sizeof(string2), "* %s places a baggie in the house vault.", GetName(playerid));
				    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
				    format(string, sizeof(string), "You have stashed %dg of marijuana in your house.", amount);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			    else if(!strcmp(give, "cocaine", true))
			    {
				    if (amount > PlayerInfo[playerid][dCocaine]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much cocaine.");

				    HouseInfo[h][hCocaine] += amount;
				    PlayerInfo[playerid][dCocaine] -= amount;
				    format(string, sizeof(string), "%s places a baggie in the house vault.", GetName(playerid));
				    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			     	new string2[128];
				    format(string2, sizeof(string2), "* %s places a baggie in the house vault.", GetName(playerid));
				    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
				    format(string, sizeof(string), "You have stashed %dg of cocaine in your house.", amount);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			    else if(!strcmp(give, "meth", true))
			    {
				    if (amount > PlayerInfo[playerid][dMeth]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much cocaine.");

				    HouseInfo[h][hMeth] += amount;
				    PlayerInfo[playerid][dMeth] -= amount;
				    format(string, sizeof(string), "%s places a baggie in the house vault.", GetName(playerid));
				    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			     	new string2[128];
				    format(string2, sizeof(string2), "* %s places a baggie in the house vault.", GetName(playerid));
				    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
				    format(string, sizeof(string), "You have stashed %dg of meth in your house.", amount);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			    else if(!strcmp(give, "ecstasy", true))
			    {
				    if (amount > PlayerInfo[playerid][dEcstasy]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much cocaine.");

				    HouseInfo[h][hEcstasy] += amount;
				    PlayerInfo[playerid][dEcstasy] -= amount;
				    format(string, sizeof(string), "%s places a baggie in the house vault.", GetName(playerid));
				    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			     	new string2[128];
				    format(string2, sizeof(string2), "* %s places a baggie in the house vault.", GetName(playerid));
				    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
				    format(string, sizeof(string), "You have stashed %dg of ecstasy in your house.", amount);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			    else if(!strcmp(give, "heroin", true))
			    {
				    if (amount > PlayerInfo[playerid][dHeroin]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much heroin.");

				    HouseInfo[h][hHeroin] += amount;
				    PlayerInfo[playerid][dHeroin] -= amount;
				    format(string, sizeof(string), "%s places syringes in the house vault.", GetName(playerid));
				    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			     	new string2[128];
				    format(string2, sizeof(string2), "* %s places syringes in the house vault.", GetName(playerid));
				    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
				    format(string, sizeof(string), "You have stashed %dg of heroin in your house.", amount);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			    else if(!strcmp(give, "crack", true))
			    {
				    if (amount > PlayerInfo[playerid][dCrack]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much crack.");

				    HouseInfo[h][hCrack] += amount;
				    PlayerInfo[playerid][dCrack] -= amount;
				    format(string, sizeof(string), "%s places a baggie in the house vault.", GetName(playerid));
				    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			     	new string2[128];
				    format(string2, sizeof(string2), "* %s places a baggie in the house vault.", GetName(playerid));
				    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
				    format(string, sizeof(string), "You have stashed %dg of crack in your house.", amount);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			}
		}
	}
    return 1;
}

CMD:checkhouse(playerid, params[])
{
		new holder[1000];
		new string[1000];

 		new hworld = GetPlayerVirtualWorld(playerid);
	    new house = PlayerInfo[playerid][HouseID];
	    
	    if(house == 0) return SCM(playerid, COLOR_LIGHTRED, "You don't own any house.");
	    for(new h = 1; h < sizeof(HouseInfo); h++)
	  	{
	   		if(hworld == HouseInfo[h][hInsideWorld])
	   		{
	   		    if(house == HouseInfo[h][hInsideWorld])
	   		    {
	   		        new
			   		gunname1[24], gunname2[24], gunname3[24], gunname4[24], gunname5[24], gunname6[24], gunname7[24], gunname8[24], gunname9[24], gunname10[24], 
			   		weapon1, weapon2, weapon3, weapon4, weapon5, weapon6, weapon7, weapon8, weapon9, weapon10;

   			  		weapon1 = HouseInfo[h][hWeapon1];
 			  		weapon2 = HouseInfo[h][hWeapon2];
 			  		weapon3 = HouseInfo[h][hWeapon3];
 			  		weapon4 = HouseInfo[h][hWeapon4];
 			  		weapon5 = HouseInfo[h][hWeapon5];
 			  		weapon6 = HouseInfo[h][hWeapon6];
 			  		weapon7 = HouseInfo[h][hWeapon7];
 			  		weapon8 = HouseInfo[h][hWeapon8];
 			  		weapon9 = HouseInfo[h][hWeapon9];
 			  		weapon10 = HouseInfo[h][hWeapon10];

   					format(string, sizeof(string), ""COL_GREEN"Money:"COL_WHITE" $%d\n\n", HouseInfo[h][hMoney]);
					strcat(holder, string, sizeof(holder));
 			  		
			        GetWeaponName(weapon1, gunname1, sizeof(gunname1));
   					format(string, sizeof(string), ""COL_GREEN"SLOT 1: "COL_WHITE"Weapon: %s | Ammo: %d\n", gunname1, HouseInfo[h][hAmmo1]);
					strcat(holder, string, sizeof(holder));

			        GetWeaponName(weapon2, gunname2, sizeof(gunname2));
					format(string, sizeof(string), ""COL_GREEN"SLOT 2: "COL_WHITE"Weapon: %s | Ammo: %d\n", gunname2, HouseInfo[h][hAmmo2]);
					strcat(holder, string, sizeof(holder));

			        GetWeaponName(weapon3, gunname3, sizeof(gunname3));
					format(string, sizeof(string), ""COL_GREEN"SLOT 3: "COL_WHITE"Weapon: %s | Ammo: %d\n", gunname3, HouseInfo[h][hAmmo3]);
					strcat(holder, string, sizeof(holder));

			        GetWeaponName(weapon4, gunname4, sizeof(gunname4));
					format(string, sizeof(string), ""COL_GREEN"SLOT 4: "COL_WHITE"Weapon: %s | Ammo: %d\n", gunname4, HouseInfo[h][hAmmo4]);
					strcat(holder, string, sizeof(holder));
					
     				GetWeaponName(weapon5, gunname5, sizeof(gunname5));
					format(string, sizeof(string), ""COL_GREEN"SLOT 5: "COL_WHITE"Weapon: %s | Ammo: %d\n", gunname5, HouseInfo[h][hAmmo5]);
					strcat(holder, string, sizeof(holder));
					
     				GetWeaponName(weapon6, gunname6, sizeof(gunname6));
					format(string, sizeof(string), ""COL_GREEN"SLOT 6: "COL_WHITE"Weapon: %s | Ammo: %d\n", gunname6, HouseInfo[h][hAmmo6]);
					strcat(holder, string, sizeof(holder));
					
     				GetWeaponName(weapon7, gunname7, sizeof(gunname7));
					format(string, sizeof(string), ""COL_GREEN"SLOT 7: "COL_WHITE"Weapon: %s | Ammo: %d\n", gunname7, HouseInfo[h][hAmmo7]);
					strcat(holder, string, sizeof(holder));
					
 					GetWeaponName(weapon8, gunname8, sizeof(gunname8));
					format(string, sizeof(string), ""COL_GREEN"SLOT 8: "COL_WHITE"Weapon: %s | Ammo: %d\n", gunname8, HouseInfo[h][hAmmo8]);
					strcat(holder, string, sizeof(holder));
					
 					GetWeaponName(weapon9, gunname9, sizeof(gunname9));
					format(string, sizeof(string), ""COL_GREEN"SLOT 9: "COL_WHITE"Weapon: %s | Ammo: %d\n", gunname9, HouseInfo[h][hAmmo9]);
					strcat(holder, string, sizeof(holder));
					
 					GetWeaponName(weapon10, gunname10, sizeof(gunname10));
					format(string, sizeof(string), ""COL_GREEN"SLOT 10: "COL_WHITE"Weapon: %s | Ammo: %d\n\n", gunname10, HouseInfo[h][hAmmo10]);
					strcat(holder, string, sizeof(holder));
					
					format(string, sizeof(string), ""COL_GREEN"LSD:"COL_WHITE" %dg\n", HouseInfo[h][hLSD]);
					strcat(holder, string, sizeof(holder));
					
					format(string, sizeof(string), ""COL_GREEN"Cocaine:"COL_WHITE" %dg\n", HouseInfo[h][hCocaine]);
					strcat(holder, string, sizeof(holder));
					
					format(string, sizeof(string), ""COL_GREEN"Marijuana:"COL_WHITE" %dg\n", HouseInfo[h][hMarijuana]);
					strcat(holder, string, sizeof(holder));
					
					format(string, sizeof(string), ""COL_GREEN"Methamphetamine:"COL_WHITE" %dg\n", HouseInfo[h][hMeth]);
					strcat(holder, string, sizeof(holder));
					
					format(string, sizeof(string), ""COL_GREEN"Ecstasy:"COL_WHITE" %dg\n", HouseInfo[h][hEcstasy]);
					strcat(holder, string, sizeof(holder));
					
					format(string, sizeof(string), ""COL_GREEN"Heroin:"COL_WHITE" %dg\n", HouseInfo[h][hHeroin]);
					strcat(holder, string, sizeof(holder));
					
					format(string, sizeof(string), ""COL_GREEN"Crack:"COL_WHITE" %dg\n", HouseInfo[h][hCrack]);
					strcat(holder, string, sizeof(holder));
					
				}
			}
		}
		ShowPlayerDialog(playerid, DIALOG_USE, DIALOG_STYLE_MSGBOX, "House Vault", holder, "Exit", "");
		return 1;
    }

CMD:putgun(playerid, params[])
{
		new hworld = GetPlayerVirtualWorld(playerid);
        new house = PlayerInfo[playerid][HouseID];
        
        if(house == 0) return SCM(playerid, COLOR_LIGHTRED, "You don't own any house.");
        for(new h = 1; h < sizeof(HouseInfo); h++)
        {
            if(hworld == HouseInfo[h][hInsideWorld])
            {
                if(house == HouseInfo[h][hInsideWorld])
                {
                    new
                    string[128], gunname[100], slot, playergun, playerammo;
                    playergun = GetPlayerWeapon(playerid);
                    playerammo = GetPlayerAmmo(playerid);

                    if(playergun < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have a weapon.");
                    if(playerammo < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have any ammo.");

                    if(sscanf(params, "d", slot)) return SCM(playerid, COLOR_GREY, "[Usage:] /putgun [slot].");
                    if(slot == 1)
                    {
                        if(HouseInfo[h][hWeapon1] != 0) return SCM(playerid, COLOR_LIGHTRED, "There is already a weapon in this slot.");
                        HouseInfo[h][hWeapon1] = playergun;
                        HouseInfo[h][hAmmo1] += playerammo;
                        RemovePlayerWeapon(playerid, playergun);
                        GetWeaponName(playergun, gunname, sizeof(gunname));
                        format(string, sizeof(string), "You have put your %s in slot 1.", gunname);
                        SendClientMessage(playerid, COLOR_WHITE, string);
                        PlayerActionMessage(playerid, 20.0, "places a weapon in the house vault.");

                        new file4[40];
					    format(file4, sizeof(file4), HPATH, h);
					    new INI:File = INI_Open(file4);
					    INI_SetTag(File, "data");
					    INI_WriteInt(File, "hWeapon1", HouseInfo[h][hWeapon1]);
					    INI_WriteInt(File, "hAmmo1", HouseInfo[h][hAmmo1]);
					    INI_Close(File);
                        return 1;
                    }
                    else if(slot == 2)
                    {
                        if(HouseInfo[h][hWeapon2] != 0) return SCM(playerid, COLOR_LIGHTRED, "There is already a weapon in this slot.");
                        HouseInfo[h][hWeapon2] = playergun;
                        HouseInfo[h][hAmmo2] += playerammo;
                        RemovePlayerWeapon(playerid, playergun);
                        GetWeaponName(playergun, gunname, sizeof(gunname));
                        format(string, sizeof(string), "You have put your %s in slot 2.", gunname);
                        SendClientMessage(playerid, COLOR_WHITE, string);
                        PlayerActionMessage(playerid, 20.0, "places a weapon in the house vault.");

                        new file4[40];
					    format(file4, sizeof(file4), HPATH, h);
					    new INI:File = INI_Open(file4);
					    INI_SetTag(File, "data");
					    INI_WriteInt(File, "hWeapon2", HouseInfo[h][hWeapon2]);
					    INI_WriteInt(File, "hAmmo2", HouseInfo[h][hAmmo2]);
					    INI_Close(File);
                        return 1;
                    }
                    else if(slot == 3)
                    {
                        if(HouseInfo[h][hWeapon3] != 0) return SCM(playerid, COLOR_LIGHTRED, "There is already a weapon in this slot.");
                        HouseInfo[h][hWeapon3] = playergun;
                        HouseInfo[h][hAmmo3] += playerammo;
                        RemovePlayerWeapon(playerid, playergun);
                        GetWeaponName(playergun, gunname, sizeof(gunname));
                        format(string, sizeof(string), "You have put your %s in slot 3.", gunname);
                        SendClientMessage(playerid, COLOR_WHITE, string);
                        PlayerActionMessage(playerid, 20.0, "places a weapon in the house vault.");

                        new file4[40];
					    format(file4, sizeof(file4), HPATH, h);
					    new INI:File = INI_Open(file4);
					    INI_SetTag(File, "data");
					    INI_WriteInt(File, "hWeapon3", HouseInfo[h][hWeapon3]);
					    INI_WriteInt(File, "hAmmo3", HouseInfo[h][hAmmo3]);
					    INI_Close(File);
                        return 1;
                    }
                    else if(slot == 4)
                    {
                        if(HouseInfo[h][hWeapon4] != 0) return SCM(playerid, COLOR_LIGHTRED, "There is already a weapon in this slot.");
                        HouseInfo[h][hWeapon4] = playergun;
                        HouseInfo[h][hAmmo4] += playerammo;
                        RemovePlayerWeapon(playerid, playergun);
                        GetWeaponName(playergun, gunname, sizeof(gunname));
                        format(string, sizeof(string), "You have put your %s in slot 4.", gunname);
                        SendClientMessage(playerid, COLOR_WHITE, string);
                        PlayerActionMessage(playerid, 20.0, "places a weapon in the house vault.");

                        new file4[40];
					    format(file4, sizeof(file4), HPATH, h);
					    new INI:File = INI_Open(file4);
					    INI_SetTag(File, "data");
					    INI_WriteInt(File, "hWeapon4", HouseInfo[h][hWeapon4]);
					    INI_WriteInt(File, "hAmmo4", HouseInfo[h][hAmmo4]);
					    INI_Close(File);
                        return 1;
                    }
                    if(slot == 5)
                    {
                        if(HouseInfo[h][hWeapon5] != 0) return SCM(playerid, COLOR_LIGHTRED, "There is already a weapon in this slot.");
                        HouseInfo[h][hWeapon5] = playergun;
                        HouseInfo[h][hAmmo5] += playerammo;
                        RemovePlayerWeapon(playerid, playergun);
                        GetWeaponName(playergun, gunname, sizeof(gunname));
                        format(string, sizeof(string), "You have put your %s in slot 5.", gunname);
                        SendClientMessage(playerid, COLOR_WHITE, string);
                        PlayerActionMessage(playerid, 20.0, "places a weapon in the house vault.");

                        new file4[40];
					    format(file4, sizeof(file4), HPATH, h);
					    new INI:File = INI_Open(file4);
					    INI_SetTag(File, "data");
					    INI_WriteInt(File, "hWeapon5", HouseInfo[h][hWeapon5]);
					    INI_WriteInt(File, "hAmmo5", HouseInfo[h][hAmmo5]);
					    INI_Close(File);
                        return 1;
                    }
                    else if(slot == 6)
                    {
                        if(HouseInfo[h][hWeapon6] != 0) return SCM(playerid, COLOR_LIGHTRED, "There is already a weapon in this slot.");
                        HouseInfo[h][hWeapon6] = playergun;
                        HouseInfo[h][hAmmo6] += playerammo;
                        RemovePlayerWeapon(playerid, playergun);
                        GetWeaponName(playergun, gunname, sizeof(gunname));
                        format(string, sizeof(string), "You have put your %s in slot 6.", gunname);
                        SendClientMessage(playerid, COLOR_WHITE, string);
                        PlayerActionMessage(playerid, 20.0, "places a weapon in the house vault.");

                        new file4[40];
					    format(file4, sizeof(file4), HPATH, h);
					    new INI:File = INI_Open(file4);
					    INI_SetTag(File, "data");
					    INI_WriteInt(File, "hWeapon6", HouseInfo[h][hWeapon6]);
					    INI_WriteInt(File, "hAmmo6", HouseInfo[h][hAmmo6]);
					    INI_Close(File);
                        return 1;
                    }
                    else if(slot == 7)
                    {
                        if(HouseInfo[h][hWeapon7] != 0) return SCM(playerid, COLOR_LIGHTRED, "There is already a weapon in this slot.");
                        HouseInfo[h][hWeapon7] = playergun;
                        HouseInfo[h][hAmmo7] += playerammo;
                        RemovePlayerWeapon(playerid, playergun);
                        GetWeaponName(playergun, gunname, sizeof(gunname));
                        format(string, sizeof(string), "You have put your %s in slot 7.", gunname);
                        SendClientMessage(playerid, COLOR_WHITE, string);
                        PlayerActionMessage(playerid, 20.0, "places a weapon in the house vault.");

                        new file4[40];
					    format(file4, sizeof(file4), HPATH, h);
					    new INI:File = INI_Open(file4);
					    INI_SetTag(File, "data");
					    INI_WriteInt(File, "hWeapon7", HouseInfo[h][hWeapon7]);
					    INI_WriteInt(File, "hAmmo7", HouseInfo[h][hAmmo7]);
					    INI_Close(File);
                        return 1;
                    }
                    else if(slot == 8)
                    {
                        if(HouseInfo[h][hWeapon8] != 0) return SCM(playerid, COLOR_LIGHTRED, "There is already a weapon in this slot.");
                        HouseInfo[h][hWeapon8] = playergun;
                        HouseInfo[h][hAmmo8] += playerammo;
                        RemovePlayerWeapon(playerid, playergun);
                        GetWeaponName(playergun, gunname, sizeof(gunname));
                        format(string, sizeof(string), "You have put your %s in slot 8.", gunname);
                        SendClientMessage(playerid, COLOR_WHITE, string);
                        PlayerActionMessage(playerid, 20.0, "places a weapon in the house vault.");

                        new file4[40];
					    format(file4, sizeof(file4), HPATH, h);
					    new INI:File = INI_Open(file4);
					    INI_SetTag(File, "data");
					    INI_WriteInt(File, "hWeapon4", HouseInfo[h][hWeapon4]);
					    INI_WriteInt(File, "hAmmo4", HouseInfo[h][hAmmo4]);
					    INI_Close(File);
                        return 1;
                    }
                    else if(slot == 9)
                    {
                        if(HouseInfo[h][hWeapon9] != 0) return SCM(playerid, COLOR_LIGHTRED, "There is already a weapon in this slot.");
                        HouseInfo[h][hWeapon9] = playergun;
                        HouseInfo[h][hAmmo9] += playerammo;
                        RemovePlayerWeapon(playerid, playergun);
                        GetWeaponName(playergun, gunname, sizeof(gunname));
                        format(string, sizeof(string), "You have put your %s in slot 9.", gunname);
                        SendClientMessage(playerid, COLOR_WHITE, string);
                        PlayerActionMessage(playerid, 20.0, "places a weapon in the house vault.");

                        new file4[40];
					    format(file4, sizeof(file4), HPATH, h);
					    new INI:File = INI_Open(file4);
					    INI_SetTag(File, "data");
					    INI_WriteInt(File, "hWeapon9", HouseInfo[h][hWeapon9]);
					    INI_WriteInt(File, "hAmmo9", HouseInfo[h][hAmmo9]);
					    INI_Close(File);
                        return 1;
                    }
                    else if(slot == 10)
                    {
                        if(HouseInfo[h][hWeapon10] != 0) return SCM(playerid, COLOR_LIGHTRED, "There is already a weapon in this slot.");
                        HouseInfo[h][hWeapon10] = playergun;
                        HouseInfo[h][hAmmo10] += playerammo;
                        RemovePlayerWeapon(playerid, playergun);
                        GetWeaponName(playergun, gunname, sizeof(gunname));
                        format(string, sizeof(string), "You have put your %s in slot 10.", gunname);
                        SendClientMessage(playerid, COLOR_WHITE, string);
                        PlayerActionMessage(playerid, 20.0, "places a weapon in the house vault.");

                        new file4[40];
					    format(file4, sizeof(file4), HPATH, h);
					    new INI:File = INI_Open(file4);
					    INI_SetTag(File, "data");
					    INI_WriteInt(File, "hWeapon10", HouseInfo[h][hWeapon10]);
					    INI_WriteInt(File, "hAmmo10", HouseInfo[h][hAmmo10]);
					    INI_Close(File);
                        return 1;
                    }
                }
            }
        }
        return 1;
    }

CMD:takegun(playerid, params[])
{
		new hworld = GetPlayerVirtualWorld(playerid);
	    new house = PlayerInfo[playerid][HouseID];
	    if(house == 0) return SCM(playerid, COLOR_LIGHTRED, "You don't own any house.");
		for(new h = 1; h < sizeof(HouseInfo); h++)
	  	{
	   		if(hworld == HouseInfo[h][hInsideWorld])
	   		{
	   		    if(house == HouseInfo[h][hInsideWorld])
	   		    {
  	    			new
					string[128], gunname[100], slot, playergun;

				    if(sscanf(params, "i", slot)) return SCM(playerid, COLOR_GREY, "[Usage:] /takegun [slot].");

        			playergun = GetPlayerWeapon(playerid);

                    if(playergun > 0) return SCM(playerid, COLOR_LIGHTRED, "You need to have an un-equipped hand to take a gun from the vault.");

			    	if(slot == 1)
			    	{
			    	    if(HouseInfo[h][hWeapon1] == 0) return SCM(playerid, COLOR_LIGHTRED, "There is not any weapon in this slot.");
						GivePlayerWeapon(playerid, HouseInfo[h][hWeapon1], HouseInfo[h][hAmmo1]);
			            GetWeaponName(HouseInfo[h][hWeapon1], gunname, sizeof(gunname));
			            format(string, sizeof(string), "You have taken your %s from slot 1.", gunname);
			            SendClientMessage(playerid, COLOR_WHITE, string);
			            HouseInfo[h][hWeapon1] = 0;
			            HouseInfo[h][hAmmo1] = 0;
			            PlayerActionMessage(playerid, 20.0, "takes a weapon from the house vault.");

               			new file4[40];
					    format(file4, sizeof(file4), HPATH, h);
					    new INI:File = INI_Open(file4);
					    INI_SetTag(File, "data");
					    INI_WriteInt(File, "hWeapon1", HouseInfo[h][hWeapon1]);
					    INI_WriteInt(File, "hAmmo1", HouseInfo[h][hAmmo1]);
					    INI_Close(File);
               			return 1;
					}
					else if(slot == 2)
					{
	    				if(HouseInfo[h][hWeapon2] == 0) return SCM(playerid, COLOR_LIGHTRED, "There is not any weapon in this slot.");
						GivePlayerWeapon(playerid, HouseInfo[h][hWeapon2], HouseInfo[h][hAmmo2]);
      					GetWeaponName(HouseInfo[h][hWeapon2], gunname, sizeof(gunname));
			            format(string, sizeof(string), "You have taken your %s from slot 2.", gunname);
			            SendClientMessage(playerid, COLOR_WHITE, string);
			            HouseInfo[h][hWeapon2] = 0;
			            HouseInfo[h][hAmmo2] = 0;
			            PlayerActionMessage(playerid, 20.0, "takes a weapon from the house vault.");

               			new file4[40];
					    format(file4, sizeof(file4), HPATH, h);
					    new INI:File = INI_Open(file4);
					    INI_SetTag(File, "data");
					    INI_WriteInt(File, "hWeapon2", HouseInfo[h][hWeapon2]);
					    INI_WriteInt(File, "hAmmo2", HouseInfo[h][hAmmo2]);
					    INI_Close(File);
			            return 1;
					}
					else if(slot == 3)
					{
	    				if(HouseInfo[h][hWeapon3] == 0) return SCM(playerid, COLOR_LIGHTRED, "There is not any weapon in this slot.");
                        GivePlayerWeapon(playerid, HouseInfo[h][hWeapon3], HouseInfo[h][hAmmo3]);
      					GetWeaponName(HouseInfo[h][hWeapon3], gunname, sizeof(gunname));
			            format(string, sizeof(string), "You have taken your %s from slot 3.", gunname);
			            SendClientMessage(playerid, COLOR_WHITE, string);
			            HouseInfo[h][hWeapon3] = 0;
			            HouseInfo[h][hAmmo3] = 0;
			            PlayerActionMessage(playerid, 20.0, "takes a weapon from the house vault.");

               			new file4[40];
					    format(file4, sizeof(file4), HPATH, h);
					    new INI:File = INI_Open(file4);
					    INI_SetTag(File, "data");
					    INI_WriteInt(File, "hWeapon3", HouseInfo[h][hWeapon3]);
					    INI_WriteInt(File, "hAmmo3", HouseInfo[h][hAmmo3]);
					    INI_Close(File);
			            return 1;
					}
					else if(slot == 4)
					{
						if(HouseInfo[h][hWeapon4] == 0) return SCM(playerid, COLOR_LIGHTRED, "There is not any weapon in this slot.");
						GivePlayerWeapon(playerid, HouseInfo[h][hWeapon4], HouseInfo[h][hAmmo4]);
						GetWeaponName(HouseInfo[h][hWeapon4], gunname, sizeof(gunname));
			           	format(string, sizeof(string), "You have taken your %s from slot 4.", gunname);
			 	 		SendClientMessage(playerid, COLOR_WHITE, string);
        				HouseInfo[h][hWeapon4] = 0;
			            HouseInfo[h][hAmmo4] = 0;
			           	PlayerActionMessage(playerid, 20.0, "takes a weapon from the house vault.");

               			new file4[40];
					    format(file4, sizeof(file4), HPATH, h);
					    new INI:File = INI_Open(file4);
					    INI_SetTag(File, "data");
					    INI_WriteInt(File, "hWeapon4", HouseInfo[h][hWeapon4]);
					    INI_WriteInt(File, "hAmmo4", HouseInfo[h][hAmmo4]);
					    INI_Close(File);
			           	return 1;
					}
					else if(slot == 5)
					{
						if(HouseInfo[h][hWeapon5] == 0) return SCM(playerid, COLOR_LIGHTRED, "There is not any weapon in this slot.");
						GivePlayerWeapon(playerid, HouseInfo[h][hWeapon5], HouseInfo[h][hAmmo5]);
						GetWeaponName(HouseInfo[h][hWeapon5], gunname, sizeof(gunname));
			           	format(string, sizeof(string), "You have taken your %s from slot 5.", gunname);
			 	 		SendClientMessage(playerid, COLOR_WHITE, string);
        				HouseInfo[h][hWeapon5] = 0;
			            HouseInfo[h][hAmmo5] = 0;
			           	PlayerActionMessage(playerid, 20.0, "takes a weapon from the house vault.");

               			new file4[40];
					    format(file4, sizeof(file4), HPATH, h);
					    new INI:File = INI_Open(file4);
					    INI_SetTag(File, "data");
					    INI_WriteInt(File, "hWeapon5", HouseInfo[h][hWeapon5]);
					    INI_WriteInt(File, "hAmmo5", HouseInfo[h][hAmmo5]);
					    INI_Close(File);
			           	return 1;
					}
					else if(slot == 6)
					{
						if(HouseInfo[h][hWeapon6] == 0) return SCM(playerid, COLOR_LIGHTRED, "There is not any weapon in this slot.");
						GivePlayerWeapon(playerid, HouseInfo[h][hWeapon6], HouseInfo[h][hAmmo6]);
						GetWeaponName(HouseInfo[h][hWeapon6], gunname, sizeof(gunname));
			           	format(string, sizeof(string), "You have taken your %s from slot 6.", gunname);
			 	 		SendClientMessage(playerid, COLOR_WHITE, string);
        				HouseInfo[h][hWeapon6] = 0;
			            HouseInfo[h][hAmmo6] = 0;
			           	PlayerActionMessage(playerid, 20.0, "takes a weapon from the house vault.");

               			new file4[40];
					    format(file4, sizeof(file4), HPATH, h);
					    new INI:File = INI_Open(file4);
					    INI_SetTag(File, "data");
					    INI_WriteInt(File, "hWeapon6", HouseInfo[h][hWeapon6]);
					    INI_WriteInt(File, "hAmmo6", HouseInfo[h][hAmmo6]);
					    INI_Close(File);
			           	return 1;
					}
					else if(slot == 7)
					{
						if(HouseInfo[h][hWeapon7] == 0) return SCM(playerid, COLOR_LIGHTRED, "There is not any weapon in this slot.");
						GivePlayerWeapon(playerid, HouseInfo[h][hWeapon7], HouseInfo[h][hAmmo7]);
						GetWeaponName(HouseInfo[h][hWeapon7], gunname, sizeof(gunname));
			           	format(string, sizeof(string), "You have taken your %s from slot 7.", gunname);
			 	 		SendClientMessage(playerid, COLOR_WHITE, string);
        				HouseInfo[h][hWeapon7] = 0;
			            HouseInfo[h][hAmmo7] = 0;
			           	PlayerActionMessage(playerid, 20.0, "takes a weapon from the house vault.");

               			new file4[40];
					    format(file4, sizeof(file4), HPATH, h);
					    new INI:File = INI_Open(file4);
					    INI_SetTag(File, "data");
					    INI_WriteInt(File, "hWeapon7", HouseInfo[h][hWeapon7]);
					    INI_WriteInt(File, "hAmmo7", HouseInfo[h][hAmmo7]);
					    INI_Close(File);
			           	return 1;
					}
					else if(slot == 8)
					{
						if(HouseInfo[h][hWeapon8] == 0) return SCM(playerid, COLOR_LIGHTRED, "There is not any weapon in this slot.");
						GivePlayerWeapon(playerid, HouseInfo[h][hWeapon8], HouseInfo[h][hAmmo8]);
						GetWeaponName(HouseInfo[h][hWeapon8], gunname, sizeof(gunname));
			           	format(string, sizeof(string), "You have taken your %s from slot 8.", gunname);
			 	 		SendClientMessage(playerid, COLOR_WHITE, string);
        				HouseInfo[h][hWeapon8] = 0;
			            HouseInfo[h][hAmmo8] = 0;
			           	PlayerActionMessage(playerid, 20.0, "takes a weapon from the house vault.");

               			new file4[40];
					    format(file4, sizeof(file4), HPATH, h);
					    new INI:File = INI_Open(file4);
					    INI_SetTag(File, "data");
					    INI_WriteInt(File, "hWeapon8", HouseInfo[h][hWeapon8]);
					    INI_WriteInt(File, "hAmmo8", HouseInfo[h][hAmmo8]);
					    INI_Close(File);
			           	return 1;
					}
					else if(slot == 9)
					{
						if(HouseInfo[h][hWeapon9] == 0) return SCM(playerid, COLOR_LIGHTRED, "There is not any weapon in this slot.");
						GivePlayerWeapon(playerid, HouseInfo[h][hWeapon9], HouseInfo[h][hAmmo9]);
						GetWeaponName(HouseInfo[h][hWeapon9], gunname, sizeof(gunname));
			           	format(string, sizeof(string), "You have taken your %s from slot 9.", gunname);
			 	 		SendClientMessage(playerid, COLOR_WHITE, string);
        				HouseInfo[h][hWeapon9] = 0;
			            HouseInfo[h][hAmmo9] = 0;
			           	PlayerActionMessage(playerid, 20.0, "takes a weapon from the house vault.");

               			new file4[40];
					    format(file4, sizeof(file4), HPATH, h);
					    new INI:File = INI_Open(file4);
					    INI_SetTag(File, "data");
					    INI_WriteInt(File, "hWeapon9", HouseInfo[h][hWeapon9]);
					    INI_WriteInt(File, "hAmmo9", HouseInfo[h][hAmmo9]);
					    INI_Close(File);
			           	return 1;
					}
					else if(slot == 10)
					{
						if(HouseInfo[h][hWeapon10] == 0) return SCM(playerid, COLOR_LIGHTRED, "There is not any weapon in this slot.");
						GivePlayerWeapon(playerid, HouseInfo[h][hWeapon10], HouseInfo[h][hAmmo10]);
						GetWeaponName(HouseInfo[h][hWeapon10], gunname, sizeof(gunname));
			           	format(string, sizeof(string), "You have taken your %s from slot 10.", gunname);
			 	 		SendClientMessage(playerid, COLOR_WHITE, string);
        				HouseInfo[h][hWeapon10] = 0;
			            HouseInfo[h][hAmmo10] = 0;
			           	PlayerActionMessage(playerid, 20.0, "takes a weapon from the house vault.");

               			new file4[40];
					    format(file4, sizeof(file4), HPATH, h);
					    new INI:File = INI_Open(file4);
					    INI_SetTag(File, "data");
					    INI_WriteInt(File, "hWeapon10", HouseInfo[h][hWeapon10]);
					    INI_WriteInt(File, "hAmmo10", HouseInfo[h][hAmmo10]);
					    INI_Close(File);
			           	return 1;
					}
				}
			}
		}
		return 1;
	}

CMD:housedeposit(playerid, params[])
{
    new
	string[64], amount, id = IsPlayerInsideHouse(playerid);

	if(id != PlayerInfo[playerid][HouseID]) return SCM(playerid, COLOR_LIGHTRED, "You do not own this house.");
 	if(PlayerInfo[playerid][HouseID] == 0) return SCM(playerid, COLOR_LIGHTRED, "You do not own a house!");
	if(sscanf(params, "d", amount)) return SendClientMessage(playerid, -1, "[Usage:] /housedeposit [amount]");
 	if (amount > GetPlayerMoney(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much money.");

	GivePlayerMoney(playerid, -amount);
	HouseInfo[id][hMoney] += amount;
	format(string, sizeof(string), "You have successfully deposited $%d to your house vault.", amount);
	SendClientMessage(playerid, COLOR_WHITE, string);
 	return 1;
}

CMD:housewithdraw(playerid, params[])
{
    new
	string[128], amount, id = IsPlayerInsideHouse(playerid);

	if(id != PlayerInfo[playerid][HouseID]) return SCM(playerid, COLOR_LIGHTRED, "You do not own this house.");
 	if(PlayerInfo[playerid][HouseID] == 0) return SCM(playerid, COLOR_LIGHTRED, "You do not own a house!");
	if(sscanf(params, "d", amount)) return SendClientMessage(playerid, -1, "[Usage:] /housewithdraw [amount]");
 	if (amount > HouseInfo[id][hMoney]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much money in your house vault.");

	GivePlayerMoney(playerid, amount);
	HouseInfo[id][hMoney] -= amount;
	format(string, sizeof(string), "You have successfully withdrawn $%d from your house vault.", amount);
	SendClientMessage(playerid, COLOR_WHITE, string);
 	return 1;
}

CMD:buybiz(playerid, params[])
{

    new
	id = IsPlayerNearBizEnt(playerid);
	new biztext[24];
	new string[256];


    if(id == -1 || id == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not near a buyable business.");

    if(PlayerInfo[playerid][BizID] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You already own a business.");

    if(BusinessInfo[id][bOwned] != 0 || BusinessInfo[id][bPrice] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "This business is not for sale.");

    if(GetPlayerMoney(playerid) < BusinessInfo[id][bPrice]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have enough money.");

    PlayerInfo[playerid][BizID] = id;
    GivePlayerMoney(playerid, -BusinessInfo[id][bPrice]);

	new playername[24];
	GetPlayerName(playerid, playername, sizeof(playername));
    BusinessInfo[id][bLocked] = 0;
    BusinessInfo[id][bOwned] = 1;
    BusinessInfo[id][bOwner] = playername;

    SendClientMessage(playerid, COLOR_WHITE, "Congratulations on your new business! Change the name of the business with /bizname.");

	switch(BusinessInfo[id][bType])
 	{
	        	case 25: biztext = "Betting Shop";
	        	case 24: biztext = "Advertisement Center";
	            case 23: biztext = "Brothel";
	        	case 22: biztext = "Garage";
	            case 21: biztext = "Apartment Complex";
	 			case 20: biztext = "Dealership";
	 			case 19: biztext = "Electronic Store";
	   			case 18: biztext = "Ammu-Nation";
	   			case 17: biztext = "Gym";
	   			case 16: biztext = "Hotel";
	   			case 15: biztext = "Motel";
	   			case 14: biztext = "Diner";
	         	case 13: biztext = "Tattoo Shop";
	         	case 12: biztext = "Barbershop";
	            case 11: biztext = "Flower Store";
	           	case 10: biztext = "98 Cents";
	    		case 9: biztext = "69 Cents";
	            case 8: biztext = "Liqour Store";
		    	case 7: biztext = "Restaurant";
		    	case 6: biztext = "Bank";
		    	case 5: biztext = "Hospital";
		        case 4: biztext = "Police Station";
		        case 3: biztext = "24/7";
		        case 2: biztext = "Club";
		        case 1: biztext = "Bar";
		        case 0: biztext = "Clothes Shop";
  	}

    format(string, sizeof(string), ""COL_BROWN"Name: "COL_WHITE"%s\n"COL_BROWN"Type: "COL_WHITE"%s\n"COL_BROWN"Street Number: "COL_WHITE"%d", BusinessInfo[id][bName], biztext, id);
	Update3DTextLabelText(BusinessInfo[id][DLabel], 0xFFFFFFFF, string);

	new file4[40];
	format(file4, sizeof(file4), BPATH, id);
	new INI:File = INI_Open(file4);
	INI_SetTag(File, "data");
	INI_WriteInt(File, "bOwned", BusinessInfo[id][bOwned]);
	INI_WriteInt(File, "bPrice", BusinessInfo[id][bPrice]);
	INI_WriteString(File, "bOwner", BusinessInfo[id][bOwner]);
	INI_WriteInt(File, "bType", BusinessInfo[id][bType]);
	INI_WriteInt(File, "bLocked", BusinessInfo[id][bLocked]);
	INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
	INI_WriteFloat(File, "bEntranceX", BusinessInfo[id][bEntranceX]);
	INI_WriteFloat(File, "bEntranceY", BusinessInfo[id][bEntranceY]);
	INI_WriteFloat(File, "bEntranceZ", BusinessInfo[id][bEntranceZ]);
	INI_WriteFloat(File, "bEntranceA", BusinessInfo[id][bEntranceA]);
	INI_WriteFloat(File, "bExitX", BusinessInfo[id][bExitX]);
	INI_WriteFloat(File, "bExitY", BusinessInfo[id][bExitY]);
	INI_WriteFloat(File, "bExitZ", BusinessInfo[id][bExitZ]);
	INI_WriteFloat(File, "bExitA", BusinessInfo[id][bExitA]);
	INI_WriteInt(File, "bInt", BusinessInfo[id][bInt]);
	INI_WriteInt(File, "bWorld", BusinessInfo[id][bWorld]);
	INI_WriteInt(File, "bInsideInt", BusinessInfo[id][bInsideInt]);
	INI_WriteInt(File, "bInsideWorld", BusinessInfo[id][bInsideWorld]);
	INI_WriteString(File, "bName", BusinessInfo[id][bName]);
	INI_Close(File);

	new INI:File2 = INI_Open(UserPath(playerid));
	INI_SetTag(File2, "data");
	INI_WriteInt(File2, "BizID", PlayerInfo[playerid][BizID]);
	INI_Close(File2);
    return 1;
}

CMD:bizdeposit(playerid, params[])
{
    new
	string[64], amount;

    new vw = GetPlayerVirtualWorld(playerid);
	if(sscanf(params, "d", amount)) return SendClientMessage(playerid, -1, "[Usage:] /bizdeposit [amount]");
 	if (amount > GetPlayerMoney(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much money.");
	
	if(PlayerInfo[playerid][BizID] == 0) return SCM(playerid, COLOR_LIGHTRED, "You do not own a business!");
	for(new b = 1; b < sizeof(BusinessInfo); b++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 50.0, BusinessInfo[b][bExitX], BusinessInfo[b][bExitY], BusinessInfo[b][bExitZ]) && vw == BusinessInfo[b][bInsideWorld]) return b;
		if(IsPlayerInRangeOfPoint(playerid, 50.0, BusinessInfo[b][bExitX], BusinessInfo[b][bExitY], BusinessInfo[b][bExitZ]))
		{
			if(b == PlayerInfo[playerid][BizID])
			{
				if(vw == BusinessInfo[b][bInsideWorld])
				{
					if(BusinessInfo[b][bOwned] == 1)
					{
						GivePlayerMoney(playerid, -amount);
						BusinessInfo[b][bMoney] += amount;
						format(string, sizeof(string), "You have successfully deposited $%d to your business vault.", amount);
						SendClientMessage(playerid, COLOR_WHITE, string);
						
						new file4[40];
						format(file4, sizeof(file4), BPATH, b);
						new INI:File = INI_Open(file4);
						INI_SetTag(File, "data");
						INI_WriteInt(File, "bMoney", BusinessInfo[b][bMoney]);
						INI_Close(File);
    					return 1;
					}
				}
			}
		}
	}
	return 1;
}

CMD:bizwithdraw(playerid, params[])
{
	new amount, string[128];

    new vw = GetPlayerVirtualWorld(playerid);
    if(sscanf(params, "d", amount)) return SCM(playerid, COLOR_GREY, "[Usage:] /bizwithdraw [amount]");
    if (amount > BusinessInfo[PlayerInfo[playerid][BizID]][bMoney]) return SCM(playerid, COLOR_LIGHTRED, "Your business does not contain that much money.");
	
	if(PlayerInfo[playerid][BizID] == 0) return SCM(playerid, COLOR_LIGHTRED, "You do not own a business!");
	for(new b = 1; b < sizeof(BusinessInfo); b++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 50.0, BusinessInfo[b][bExitX], BusinessInfo[b][bExitY], BusinessInfo[b][bExitZ]) && vw == BusinessInfo[b][bInsideWorld]) return b;
		if(IsPlayerInRangeOfPoint(playerid, 50.0, BusinessInfo[b][bExitX], BusinessInfo[b][bExitY], BusinessInfo[b][bExitZ]))
		{
			if(b == PlayerInfo[playerid][BizID])
			{
				if(vw == BusinessInfo[b][bInsideWorld])
				{
					if(BusinessInfo[b][bOwned] == 1)
					{
						GivePlayerMoney(playerid, amount);
						BusinessInfo[b][bMoney] -= amount;
						format(string, sizeof(string), "You have successfully withdrawn $%d from your business vault.", amount);
						SendClientMessage(playerid, COLOR_WHITE, string);
						
						new file4[40];
						format(file4, sizeof(file4), BPATH, b);
						new INI:File = INI_Open(file4);
						INI_SetTag(File, "data");
						INI_WriteInt(File, "bMoney", BusinessInfo[b][bMoney]);
						INI_Close(File);
    					return 1;
					}
				}
			}
		}
	}
	return 1;
}

CMD:bizbalance(playerid, params[])
{
	new
	string[128];
	
	new vw = GetPlayerVirtualWorld(playerid);
	
	if(PlayerInfo[playerid][BizID] == 0) return SCM(playerid, COLOR_LIGHTRED, "You do not own a business!");
	for(new b = 1; b < sizeof(BusinessInfo); b++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 50.0, BusinessInfo[b][bExitX], BusinessInfo[b][bExitY], BusinessInfo[b][bExitZ]) && vw == BusinessInfo[b][bInsideWorld]) return b;
		if(IsPlayerInRangeOfPoint(playerid, 50.0, BusinessInfo[b][bExitX], BusinessInfo[b][bExitY], BusinessInfo[b][bExitZ]))
		{
			if(b == PlayerInfo[playerid][BizID])
			{
				if(vw == BusinessInfo[b][bInsideWorld])
				{
					if(BusinessInfo[b][bOwned] == 1)
					{
   						format(string, sizeof(string), "You have $%d in your business vault.", BusinessInfo[b][bMoney]);
						SendClientMessage(playerid, COLOR_WHITE, string);
						
						new file4[40];
						format(file4, sizeof(file4), BPATH, b);
						new INI:File = INI_Open(file4);
						INI_SetTag(File, "data");
						INI_WriteInt(File, "bMoney", BusinessInfo[b][bMoney]);
						INI_Close(File);
    					return 1;
					}
				}
			}
		}
	}
	return 1;
}

CMD:dropcigarette(playerid, params[])
{
    if(IsSmokingCigarette[playerid] == 0) return SCM(playerid, COLOR_LIGHTRED, "You're not smoking a cigarette.");

    IsSmokingCigarette[playerid] = 0;
    PlayerActionMessage(playerid, 15.0, "drop his cigarette on the ground.");
    return 1;
}

CMD:deposit(playerid, params[])
{
    new
	string[64], amount;

	if(sscanf(params, "d", amount)) return SendClientMessage(playerid, -1, "[Usage:] /deposit [amount]");
 	if (amount > GetPlayerMoney(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much money.");
 	if (amount < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't deposit less than $1.");
 	if(IsPlayerInRangeOfPoint(playerid, 10.0, 2316.6206, -15.2233, 26.7422))
	{
		GivePlayerMoney(playerid, -amount);
		PlayerInfo[playerid][pBankAccount] += amount;
		format(string, sizeof(string), "You have successfully deposited $%d to your bank account.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);
 	} else return SCM(playerid, COLOR_LIGHTRED, "You're not at the bank.");
 	return 1;
}

CMD:withdraw(playerid, params[])
{
    new
	string[64], amount;

	if(sscanf(params, "d", amount)) return SendClientMessage(playerid, -1, "[Usage:] /withdraw [amount]");
	if (amount > PlayerInfo[playerid][pBankAccount]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much money in your bank.");
	if (amount < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't withdraw less than $1.");
 	if(IsPlayerInRangeOfPoint(playerid, 10.0, 2316.6206, -15.2233, 26.7422))
	{
		PlayerInfo[playerid][pBankAccount] -= amount;
		GivePlayerMoney(playerid, amount);
		format(string, sizeof(string), "You have successfully withdrawn $%d from your bank account.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);
	} else return SCM(playerid, COLOR_LIGHTRED, "You're not at the bank.");
	return 1;
}

CMD:balance(playerid, params[])
{
    new
	string[64];

   	if(IsPlayerInRangeOfPoint(playerid, 10.0, 2316.6206, -15.2233, 26.7422))
	{
	    format(string, sizeof(string), "You currently have $%d in your bank account.", PlayerInfo[playerid][pBankAccount]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	} else return SCM(playerid, COLOR_LIGHTRED, "You're not at the bank.");
	return 1;
}

CMD:mask(playerid, params[])
{
	if(PlayerInfo[playerid][pMask] == 1 || Mask[playerid] == 1)
	{
		if(MaskOn[playerid] == 0)
		{
	        MaskOn[playerid] = 1;
	        GameTextForPlayer(playerid, "~p~MASK ON", 5000, 3);
	        for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(i, playerid, false);
		}
		else if(MaskOn[playerid] == 1)
		{
	        MaskOn[playerid] = 0;
	        GameTextForPlayer(playerid, "~p~MASK OFF", 5000, 3);
	        for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(i, playerid, true);
		}
		return 1;
	}
	else return SCM(playerid, COLOR_LIGHTRED, "You do not have a mask.");
}

CMD:pm(playerid, params[])
{
    new
	PID, message[144], string[144];

    if(gMuted[playerid]) return SCM(playerid, COLOR_LIGHTRED, "You're muted.");
    if(sscanf(params, "us[144]", PID, message)) return SCM(playerid, COLOR_GREY, "[Usage:] /PM  [PlayerID] [message].");
    if(!IsPlayerConnected(PID)) return SCM(playerid, COLOR_LIGHTRED, "That player is not connected.");
    if (playerid == PID) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't PM yourself.");
    if (PlayerInfo[PID][pBlockPM] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "This person is currently blocking their PM's.");

    if(strlen(params) > 64)
    {
        new text1[65], 
            text2[65];

        strmid(text2, params, 64, 128);
        strmid(text1, params, 0, 64);

        format(string, 128, "(( PM Sent: %s(%d): %s ...", GetName(PID), PID, text1);
        SendClientMessage(playerid, COLOR_YELLOW, string);
        format(string, 128, "... %s ))", text2);
        SendClientMessage(playerid, COLOR_YELLOW, string);

        format(string, 128, "(( PM From: %s(%d): %s ...", GetName(playerid), playerid, text1);
        SendClientMessage(PID, COLOR_YELLOW, string);
        format(string, 128, "... %s ))", text2);
        SendClientMessage(PID, COLOR_YELLOW, string);

    }
    else
	{
	    format(string, sizeof(string), "(( PM From: %s(%d): %s ))", GetName(playerid), playerid, message);
	    SendClientMessage(PID, COLOR_YELLOW, string);
		format(string, 128, "(( PM Sent: %s(%d): %s ))", GetName(PID), PID, message);
        SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	return 1;
}


CMD:ame(playerid, params[])
{
	new
	string[144];

    if(sscanf(params, "s[144]", params)) return SCM(playerid, COLOR_GREY, "[Usage:] /ame [message]");

    format(string, sizeof(string), "* %s %s", GetName(playerid), params);
    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 6.0, 10000);
	SCM(playerid, COLOR_PURPLE, string);
	return 1;
}

CMD:commands(playerid, params[])
{
	SCM(playerid, COLOR_WHITE, "_______________________________[SERVER COMMANDS]_______________________________");
	SCM(playerid, COLOR_WHITE, "[GENERAL:] /pay /pm /stats /dice /call /givedrug /animlist /factionhelp /dropgun /refuel /kph /mph /stats /admins /supporters");
	SCM(playerid, COLOR_WHITE, "[GENERAL:] /report /givegun /balance /withdraw /deposit /pickup /hangup /takedrivingtest /notehelp /jobhelp /pickupgun /inv");
	SCM(playerid, COLOR_WHITE, "[GENERAL:] /sms /licenses /greet /v /businesshelp /househelp /fishinghelp /factioninfo /invite /id /coin /ageup /vgivekeys /walk");
	SCM(playerid, COLOR_WHITE, "[GENERAL:] /(ad)vertisement /frisk /train /buy /help /low /do /me /shout /(o)oc /(f)action /windows /removecp /signwelfare /walkstyle");
	SCM(playerid, COLOR_WHITE, "[GENERAL:] /phonehelp /boombox /smoke /drink /usedrug /blockpm /fishingrod /helpme /buydrink /refuel /vsell /map /quitwelfare /list_tickets");
    if(PlayerInfo[playerid][pFaction] == 2)
    {
		SCM(playerid, COLOR_WHITE, "[POLICE:] /arrest /cuff /uncuff /opendoor /closedoor /locker /closecell /opencell /opengate /closegate");
		SCM(playerid, COLOR_WHITE, "[POLICE:] /revokeguns /revokedrugs /(m)egaphone /tazer /(r)adio /revokelicense /vmdc");
		SCM(playerid, COLOR_WHITE, "[POLICE:] /spike /removespike /removeroadblock /roadblock /ticket /takegunrights /mdc /suspect");
    }
   	return 1;
}

CMD:jobhelp(playerid, params[])
{
	SCM(playerid, COLOR_WHITE, "_______________________________[JOB COMMANDS]_______________________________");
    SCM(playerid, COLOR_WHITE, "[COMMANDS:] /takejob /quitjob /work /stopworking");
   	return 1;
}

CMD:factionhelp(playerid, params[])
{
	SCM(playerid, COLOR_WHITE, "_______________________________[FACTION COMMANDS]_______________________________");
    SCM(playerid, COLOR_WHITE, "[COMMANDS:] /invite /acceptinvite /setrank /(f)action /leavefaction /factionkick /factioninfo");
   	return 1;
}

CMD:notehelp(playerid, params[])
{
	SCM(playerid, COLOR_WHITE, "_______________________________[NOTE COMMANDS]_______________________________");
    SCM(playerid, COLOR_WHITE, "[COMMANDS:] /createnote /deletenote /notes /readnote");
   	return 1;
}


CMD:phonehelp(playerid, params[])
{
	SCM(playerid, COLOR_WHITE, "_______________________________[HOUSE COMMANDS]_______________________________");
    SCM(playerid, COLOR_WHITE, "[COMMANDS:] /call /pickup /hangup /sms /dropphone");
   	return 1;
}


CMD:househelp(playerid, params[])
{
	SCM(playerid, COLOR_WHITE, "_______________________________[HOUSE COMMANDS]_______________________________");
    SCM(playerid, COLOR_WHITE, "[COMMANDS:] /buyhouse /lock /housewithdraw /housedeposit /housebalance");
    SCM(playerid, COLOR_WHITE, "[COMMANDS:] /sellhouse /putgun /takegun /checkhouse /putdrug /takedrug");
   	return 1;
}

CMD:fishinghelp(playerid, params[])
{
	SCM(playerid, COLOR_WHITE, "_______________________________[FISHING COMMANDS]_______________________________");
    SCM(playerid, COLOR_WHITE, "[COMMANDS:] /attachworm /fish /buy");
    SCM(playerid, COLOR_WHITE, "[HINTS:] Type /fishingrod to equip your fishing rod.");
    SCM(playerid, COLOR_WHITE, "[HINTS:] You can buy a fishing rod and worms at the fishing store.");
   	return 1;
}

CMD:businesshelp(playerid, params[])
{
	SCM(playerid, COLOR_WHITE, "_______________________________[BUSINESS COMMANDS]_______________________________");
	SCM(playerid, COLOR_WHITE, "[COMMANDS:] /buybiz /sellbiz /bizname /lockbiz /bizwithdraw /bizbalance /bizdeposit");
   	return 1;
}

CMD:admincommands(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
    {
		SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
	}
	if(PlayerInfo[playerid][pAdmin] == 1)
    {
   		SCM(playerid, COLOR_WHITE, "_______________________________[SUPPORTER COMMANDS]_______________________________");
		SCM(playerid, COLOR_WHITE, "[SUPPORTERS:] /accepthelpme /ignorehelpme /warn /mute /unmute /freeze /unfreeze");
		SCM(playerid, COLOR_WHITE, "[SUPPORTERS:] /tduty /(a)dminchat /ajail /astats /kick /spectate /spectateoff");
    }
    if(PlayerInfo[playerid][pAdmin] == 2)
    {
   		SCM(playerid, COLOR_WHITE, "_______________________________[ADMINISTRATOR COMMANDS]_______________________________");
		SCM(playerid, COLOR_WHITE, "[SUPPORTERS:] /accepthelpme /ignorehelpme /warn /mute /unmute /freeze /unfreeze");
		SCM(playerid, COLOR_WHITE, "[SUPPORTERS:] /goto /gethere /tduty /(a)dminchat /ajail /astats /kick /spectate /spectateoff");
		SCM(playerid, COLOR_WHITE, "[JUNIOR ADMINISTRATORS:] /free /gotofuelstation /editv /setfuel /takegunrights /givegunrights /setskin /setvw /sethp");
		SCM(playerid, COLOR_WHITE, "[JUNIOR ADMINISTRATORS:] /setarmour /rtc /arevokedrugs /arevokeguns /afactionname /asetleader /sendtols /gotols /�slap");
		SCM(playerid, COLOR_WHITE, "[JUNIOR ADMINISTRATORS:] /afactioninfo /afactionrankname /alock /seenames /spectate /spectateoff /ban /unban /unbanip /offlineban");
    }
    if(PlayerInfo[playerid][pAdmin] == 3)
    {
   		SCM(playerid, COLOR_WHITE, "_______________________________[ADMINISTRATOR COMMANDS]_______________________________");
		SCM(playerid, COLOR_WHITE, "[SUPPORTERS:] /accepthelpme /ignorehelpme /warn /mute /unmute /freeze /unfreeze");
		SCM(playerid, COLOR_WHITE, "[SUPPORTERS:] /goto /gethere /tduty /(a)dminchat /ajail /astats /kick /spectate /spectateoff");
		SCM(playerid, COLOR_WHITE, "[JUNIOR ADMINISTRATORS:] /free /gotofuelstation /editv /setfuel /takegunrights /givegunrights /setskin /setvw /sethp");
		SCM(playerid, COLOR_WHITE, "[JUNIOR ADMINISTRATORS:] /setarmour /rtc /arevokedrugs /arevokeguns /afactionname /asetleader /sendtols /gotols /aslap");
		SCM(playerid, COLOR_WHITE, "[JUNIOR ADMINISTRATORS:] /afactioninfo /afactionrankname /alock /seenames /spectate /spectateoff /ban /unban /unbanip /offlineban");
       	SCM(playerid, COLOR_WHITE, "[GENERAL ADMINISTRATORS:] /agivegun /givemoney /setmoney /agivedrug /alockbiz /asellbiz /sethours" );
       	SCM(playerid, COLOR_WHITE, "[GENERAL ADMINISTRATORS:] /asellhouse /alockhouse /createhouse /deletehouse /alock /seenames" );
    }
    if(PlayerInfo[playerid][pAdmin] == 4)
    {
   		SCM(playerid, COLOR_WHITE, "_______________________________[ADMINISTRATOR COMMANDS]_______________________________");
   		
		SCM(playerid, COLOR_WHITE, "[SUPPORTERS:] /accepthelpme /ignorehelpme /warn /mute /unmute /freeze /unfreeze");
		SCM(playerid, COLOR_WHITE, "[SUPPORTERS:] /goto /gethere /tduty /(a)dminchat /ajail /astats /kick /spectate /spectateoff");
		SCM(playerid, COLOR_WHITE, "[JUNIOR ADMINISTRATORS:] /free /gotofuelstation /editv /setfuel /takegunrights /givegunrights /setskin /setvw /sethp");
		SCM(playerid, COLOR_WHITE, "[JUNIOR ADMINISTRATORS:] /setarmour /rtc /arevokedrugs /arevokeguns /afactionname /asetleader /sendtols /gotols /aslap");
		SCM(playerid, COLOR_WHITE, "[JUNIOR ADMINISTRATORS:] /afactioninfo /afactionrankname /alock /seenames /spectate /spectateoff /ban /unban /unbanip /offlineban");
       	SCM(playerid, COLOR_WHITE, "[GENERAL ADMINISTRATORS:] /agivegun /givemoney /setmoney /agivedrug /alockbiz /asellbiz /sethours" );
       	SCM(playerid, COLOR_WHITE, "[GENERAL ADMINISTRATORS:] /asellhouse /alockhouse /createhouse /deletehouse /alock /seenames" );
       	SCM(playerid, COLOR_WHITE, "[LEAD ADMINISTRATORS:] /restart");
    }
   	return 1;
}

COMMAND:inv(playerid, params[])
{

	new holder[500];
	new string[500];
	new Player_Weapons[30];
	new Player_Ammos[30];
	new i;
	
 	if(PlayerInfo[playerid][pDriverLicense] > 0)
	{
 		format(string, sizeof(string), "[San Jose - Drivers License]\n Age: (%d)\n\n", PlayerInfo[playerid][pAge]);
 		strcat(holder, string, sizeof(holder));
	}
    if(PlayerInfo[playerid][pBeer] > 0)
	{
 		format(string, sizeof(string), "Beers (%d)\n", PlayerInfo[playerid][pBeer]);
 		strcat(holder, string, sizeof(holder));
	}
 	if(PlayerInfo[playerid][pCigarettes] > 0)
	{
		format(string, sizeof(string), "Cigarettes (%d)\n", PlayerInfo[playerid][pCigarettes]);
 		strcat(holder, string, sizeof(holder));
	}
	if(PlayerInfo[playerid][dMarijuana] > 0)
	{
		format(string, sizeof(string), "Marijuana (%d)\n", PlayerInfo[playerid][dMarijuana]);
 		strcat(holder, string, sizeof(holder));
	}
	if(PlayerInfo[playerid][dCocaine] > 0)
	{
		format(string, sizeof(string), "Cocaine (%d)\n", PlayerInfo[playerid][dCocaine]);
 		strcat(holder, string, sizeof(holder));
	}
	if(PlayerInfo[playerid][dEcstasy] > 0)
	{
		format(string, sizeof(string), "Ecstasy (%d)\n", PlayerInfo[playerid][dEcstasy]);
 		strcat(holder, string, sizeof(holder));
	}
	if(PlayerInfo[playerid][dMeth] > 0)
	{
		format(string, sizeof(string), "Methamphetamine (%d)\n", PlayerInfo[playerid][dMeth]);
 		strcat(holder, string, sizeof(holder));
	}
	if(PlayerInfo[playerid][dLSD] > 0)
	{
		format(string, sizeof(string), "LSD (%d)\n", PlayerInfo[playerid][dLSD]);
 		strcat(holder, string, sizeof(holder));
	}
	if(PlayerInfo[playerid][pBoombox] > 0)
	{
		format(string, sizeof(string), "Boombox (%d)\n", PlayerInfo[playerid][pBoombox]);
 		strcat(holder, string, sizeof(holder));
	}
	if(PlayerInfo[playerid][pFishingRod] > 0)
	{
		format(string, sizeof(string), "Fishing Rod (%d)\n", PlayerInfo[playerid][pFishingRod]);
 		strcat(holder, string, sizeof(holder));
	}
	if(PlayerInfo[playerid][pWorms] > 0)
	{
		format(string, sizeof(string), "Worms (%d)\n", PlayerInfo[playerid][pWorms]);
 		strcat(holder, string, sizeof(holder));
	}
	if(PlayerInfo[playerid][pFishes] > 0)
	{
		format(string, sizeof(string), "Fishes in Grams (%d)\n", PlayerInfo[playerid][pFishes]);
 		strcat(holder, string, sizeof(holder));
	}
	if(PlayerInfo[playerid][HouseID] > 0)
	{
		format(string, sizeof(string), "House Key (%d)\n", PlayerInfo[playerid][HouseID]);
 		strcat(holder, string, sizeof(holder));
	}
	if(PlayerInfo[playerid][BizID] > 0)
	{
		format(string, sizeof(string), "Business Key (%d)\n", PlayerInfo[playerid][BizID]);
 		strcat(holder, string, sizeof(holder));
	}
	if(PlayerInfo[playerid][pPhone] > 0)
	{
		format(string, sizeof(string), "Cellphone (%d)\n", PlayerInfo[playerid][pNumber]);
 		strcat(holder, string, sizeof(holder));
	}
	for(i = 1;i <= 12;i++)
	{
		GetPlayerWeaponData(playerid, i, Player_Weapons[i], Player_Ammos[i]);
		if(Player_Weapons[i] != 0 && Player_Ammos[i] != 0)
		{
			new weaponName[128];
			GetWeaponName(Player_Weapons[i], weaponName, 128);
			format(string, sizeof(string), "%s (%d)\n", weaponName, Player_Ammos[i]);
 			strcat(holder, string, sizeof(holder));
		}
	}
	if(GetPlayerMoney(playerid) > 0)
	{
		format(string, sizeof(string), "Money ($%d)\n", GetPlayerMoney(playerid));
 		strcat(holder, string, sizeof(holder));
	}
	ShowPlayerDialog(playerid, DIALOG_USE, DIALOG_STYLE_MSGBOX, "Inventory", holder, "Exit", "");
	return 1;
}

CMD:agiveboombox(playerid, params[])
{
	new
	targetid, string[64];

	if(!IsPlayerAdmin(playerid)) return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", targetid)) return SCM(playerid, COLOR_GREY, "[Usage:] /agiveboombox [playerid]");
	PlayerInfo[targetid][pBoombox] = 1;

	format(string, sizeof(string), "AdmCmd: %s has given %s a boombox.", GetName(playerid), GetName(targetid));
	ABroadCast(COLOR_LIGHTRED, string, 1);

 	format(string, sizeof(string), "AdmCmd: You have been given a boombox by %s.", GetName(playerid));
 	SendClientMessage(targetid, COLOR_LIGHTRED, string);
	return 1;
}

CMD:pay(playerid, params[])
{
    new
	string[64], id, amount;
	
	new Float:x, Float:y, Float:z;

    if (sscanf(params, "ud", id, amount)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /pay [playerid/partname] [amount].");
	GetPlayerPos(id, x, y, z);
    if(!IsPlayerInRangeOfPoint(playerid, 7.0, x, y, z)) return SCM(playerid, COLOR_LIGHTRED, "You are not close to that player.");
    if (id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");
    if (amount > GetPlayerMoney(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much of money.");
    if (playerid == id) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't give yourself money.");
    if (amount < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't give yourself money.");
    if (PlayerInfo[playerid][pPlayingHours] < 2) return SendClientMessage(playerid, COLOR_LIGHTRED, "You need to play two hours before you can use this command. (To prevent money-farming).");


	// Logging pays
    new paystring[256];
    new playername[MAX_PLAYER_NAME];
	new targetname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	GetPlayerName(id, targetname, sizeof(targetname));
	
	new Hour, Minute, Second;
	gettime(Hour, Minute, Second);

	format(paystring, sizeof(paystring), "[%d:%d:%d] %s transferred $%d to %s.", Hour, Minute, Second, playername, amount, targetname);
	PayLog(paystring);
	// -------------------------------------------------------
	
    GivePlayerMoney(id, amount);
    GivePlayerMoney(playerid, -amount);
    format(string, sizeof(string), "You have received $%d from %s.", amount, GetName(playerid));
    SendClientMessage(id, COLOR_WHITE, string);
    format(string, sizeof(string), "%s gives some dollar bills to %s.", GetName(playerid), GetName(id));
    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	PlayerPlaySound(id, 1052, 0.0, 0.0, 0.0);
	ApplyPlayerAnimation(playerid, "DEALER", "SHOP_PAY", 4.0, 0, 0, 0, 0, 0, 1);

    format(string, sizeof(string), "You have given %s $%d.", GetName(id), amount);
    SendClientMessage(playerid, COLOR_WHITE, string);
    return 1;
}

CMD:givedrug(playerid, params[])
{
    new
	give[24], id, amount, string[128];

    if(sscanf(params, "is[24]d", id, give, amount)) return SendClientMessage(playerid, COLOR_GREY, "[SERVER] /givedrug [playerid] (beer, cigarette, lsd, marijuana, cocaine, meth, ecstasy, seeds, heroin, crack) [amount]");
    if(!strcmp(give, "lsd", true))
    {
   		new Float:x, Float:y, Float:z;
		GetPlayerPos(id, x, y, z);
    	if(!IsPlayerInRangeOfPoint(playerid, 7.0, x, y, z)) return SCM(playerid, COLOR_LIGHTRED, "You are not close to that player.");
	    if (id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");
	    if (amount > PlayerInfo[playerid][dLSD]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much LSD.");
	    if (playerid == id) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't give yourself LSD.");

	    PlayerInfo[id][dLSD] += amount;
	    PlayerInfo[playerid][dLSD] -= amount;
	    format(string, sizeof(string), "You have received %dg LSD from %s.", amount, GetName(playerid));
	    SendClientMessage(id, COLOR_WHITE, string);
	    format(string, sizeof(string), "%s gives a baggie to %s.", GetName(playerid), GetName(id));
	    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
     	new string2[128];
	    format(string2, sizeof(string2), "* %s gives a baggie to %s.", GetName(playerid), GetName(id));
	    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
	    format(string, sizeof(string), "You have given %s %dg of LSD.", GetName(id), amount);
	    SendClientMessage(playerid, COLOR_WHITE, string);
    }
    else if(!strcmp(give, "marijuana", true))
    {
  		new Float:x, Float:y, Float:z;
		GetPlayerPos(id, x, y, z);
    	if(!IsPlayerInRangeOfPoint(playerid, 7.0, x, y, z)) return SCM(playerid, COLOR_LIGHTRED, "You are not close to that player.");
	    if (id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");
	    if (amount > PlayerInfo[playerid][dMarijuana]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much marijuana.");
	    if (playerid == id) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't give yourself marijuana.");

	    PlayerInfo[id][dMarijuana] += amount;
	    PlayerInfo[playerid][dMarijuana] -= amount;
	    format(string, sizeof(string), "You have received %dg marijuana from %s.", amount, GetName(playerid));
	    SendClientMessage(id, COLOR_WHITE, string);
	    format(string, sizeof(string), "%s gives a baggie to %s.", GetName(playerid), GetName(id));
	    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    	new string2[128];
	    format(string2, sizeof(string2), "* %s gives a baggie to %s.", GetName(playerid), GetName(id));
	    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);

	    format(string, sizeof(string), "You have given %s %dg of marijuana.", GetName(id), amount);
	    SendClientMessage(playerid, COLOR_WHITE, string);
    }
    else if(!strcmp(give, "cocaine", true))
    {
  		new Float:x, Float:y, Float:z;
		GetPlayerPos(id, x, y, z);
    	if(!IsPlayerInRangeOfPoint(playerid, 7.0, x, y, z)) return SCM(playerid, COLOR_LIGHTRED, "You are not close to that player.");
	    if (id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");
	    if (amount > PlayerInfo[playerid][dCocaine]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much cocaine.");
	    if (playerid == id) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't give yourself cocaine.");

	    PlayerInfo[id][dCocaine] += amount;
	    PlayerInfo[playerid][dCocaine] -= amount;
	    format(string, sizeof(string), "You have received %dg cocaine from %s.", amount, GetName(playerid));
	    SendClientMessage(id, COLOR_WHITE, string);
	    format(string, sizeof(string), "%s gives a baggie to %s.", GetName(playerid), GetName(id));
	    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
     	new string2[128];
	    format(string2, sizeof(string2), "* %s gives a baggie to %s.", GetName(playerid), GetName(id));
	    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
	    format(string, sizeof(string), "You have given %s %dg of cocaine.", GetName(id), amount);
	    SendClientMessage(playerid, COLOR_WHITE, string);
    }
    else if(!strcmp(give, "cigarette", true))
    {
  		new Float:x, Float:y, Float:z;
		GetPlayerPos(id, x, y, z);
    	if(!IsPlayerInRangeOfPoint(playerid, 7.0, x, y, z)) return SCM(playerid, COLOR_LIGHTRED, "You are not close to that player.");
	    if (id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");
	    if (amount > PlayerInfo[playerid][pCigarettes]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that many cigarettes.");
	    if (playerid == id) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't give yourself cigarettes.");

	    PlayerInfo[id][pCigarettes] += amount;
	    PlayerInfo[playerid][pCigarettes] -= amount;
	    format(string, sizeof(string), "You have received %d cigarettes from %s.", amount, GetName(playerid));
	    SendClientMessage(id, COLOR_WHITE, string);
	    format(string, sizeof(string), "%s gives cigarettes to %s.", GetName(playerid), GetName(id));
	    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    	new string2[128];
	    format(string2, sizeof(string2), "* %s gives %s ciggarettes.", GetName(playerid), GetName(id));
	    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);

	    format(string, sizeof(string), "You have given %s %d cigarettes.", GetName(id), amount);
	    SendClientMessage(playerid, COLOR_WHITE, string);
    }
    else if(!strcmp(give, "beer", true))
    {
  		new Float:x, Float:y, Float:z;
		GetPlayerPos(id, x, y, z);
    	if(!IsPlayerInRangeOfPoint(playerid, 7.0, x, y, z)) return SCM(playerid, COLOR_LIGHTRED, "You are not close to that player.");
	    if (id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");
	    if (amount > PlayerInfo[playerid][pBeer]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much beer.");
	    if (playerid == id) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't give yourself beer.");

	    PlayerInfo[id][pBeer] += amount;
	    PlayerInfo[playerid][pBeer] -= amount;
	    format(string, sizeof(string), "You have received %d bottles of beer from %s.", amount, GetName(playerid));
	    SendClientMessage(id, COLOR_WHITE, string);
	    format(string, sizeof(string), "%s gives beer to %s.", GetName(playerid), GetName(id));
	    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    	new string2[128];
	    format(string2, sizeof(string2), "* %s gives %s beer.", GetName(playerid), GetName(id));
	    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);

	    format(string, sizeof(string), "You have given %s %d bottles of beer.", GetName(id), amount);
	    SendClientMessage(playerid, COLOR_WHITE, string);
    }
    else if(!strcmp(give, "meth", true))
    {
  		new Float:x, Float:y, Float:z;
		GetPlayerPos(id, x, y, z);
    	if(!IsPlayerInRangeOfPoint(playerid, 7.0, x, y, z)) return SCM(playerid, COLOR_LIGHTRED, "You are not close to that player.");
	    if (id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");
	    if (amount > PlayerInfo[playerid][dMeth]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much cocaine.");
	    if (playerid == id) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't give yourself cocaine.");

	    PlayerInfo[id][dMeth] += amount;
	    PlayerInfo[playerid][dMeth] -= amount;
	    format(string, sizeof(string), "You have received %dg meth from %s.", amount, GetName(playerid));
	    SendClientMessage(id, COLOR_WHITE, string);
	    format(string, sizeof(string), "%s gives a baggie to %s.", GetName(playerid), GetName(id));
	    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
     	new string2[128];
	    format(string2, sizeof(string2), "* %s gives a baggie to %s.", GetName(playerid), GetName(id));
	    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
	    format(string, sizeof(string), "You have given %s %dg of meth.", GetName(id), amount);
	    SendClientMessage(playerid, COLOR_WHITE, string);
    }
    else if(!strcmp(give, "ecstasy", true))
    {
  		new Float:x, Float:y, Float:z;
		GetPlayerPos(id, x, y, z);
    	if(!IsPlayerInRangeOfPoint(playerid, 7.0, x, y, z)) return SCM(playerid, COLOR_LIGHTRED, "You are not close to that player.");
	    if (id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");
	    if (amount > PlayerInfo[playerid][dEcstasy]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much cocaine.");
	    if (playerid == id) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't give yourself cocaine.");

	    PlayerInfo[id][dEcstasy] += amount;
	    PlayerInfo[playerid][dEcstasy] -= amount;
	    format(string, sizeof(string), "You have received %dg ecstasy from %s.", amount, GetName(playerid));
	    SendClientMessage(id, COLOR_WHITE, string);
	    format(string, sizeof(string), "%s gives a baggie to %s.", GetName(playerid), GetName(id));
	    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
     	new string2[128];
	    format(string2, sizeof(string2), "* %s gives a baggie to %s.", GetName(playerid), GetName(id));
	    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
	    format(string, sizeof(string), "You have given %s %dg of ecstasy.", GetName(id), amount);
	    SendClientMessage(playerid, COLOR_WHITE, string);
    }
    else if(!strcmp(give, "seeds", true))
    {
  		new Float:x, Float:y, Float:z;
		GetPlayerPos(id, x, y, z);
    	if(!IsPlayerInRangeOfPoint(playerid, 7.0, x, y, z)) return SCM(playerid, COLOR_LIGHTRED, "You are not close to that player.");
	    if (id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");
	    if (amount > PlayerInfo[playerid][dEcstasy]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much seeds.");
	    if (playerid == id) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't give yourself seeds.");

	    PlayerInfo[id][dSeeds] += amount;
	    PlayerInfo[playerid][dSeeds] -= amount;
	    format(string, sizeof(string), "You have received %d seeds from %s.", amount, GetName(playerid));
	    SendClientMessage(id, COLOR_WHITE, string);
	    format(string, sizeof(string), "%s gives a baggie to %s.", GetName(playerid), GetName(id));
	    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
     	new string2[128];
	    format(string2, sizeof(string2), "* %s gives a baggie to %s.", GetName(playerid), GetName(id));
	    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
	    format(string, sizeof(string), "You have given %s %d seeds.", GetName(id), amount);
	    SendClientMessage(playerid, COLOR_WHITE, string);
    }
    else if(!strcmp(give, "heroin", true))
    {
  		new Float:x, Float:y, Float:z;
		GetPlayerPos(id, x, y, z);
    	if(!IsPlayerInRangeOfPoint(playerid, 7.0, x, y, z)) return SCM(playerid, COLOR_LIGHTRED, "You are not close to that player.");
	    if (id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");
	    if (amount > PlayerInfo[playerid][dHeroin]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much seeds.");
	    if (playerid == id) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't give yourself heroin.");

	    PlayerInfo[id][dHeroin] += amount;
	    PlayerInfo[playerid][dHeroin] -= amount;
	    format(string, sizeof(string), "You have received %d syringes of heroin from %s.", amount, GetName(playerid));
	    SendClientMessage(id, COLOR_WHITE, string);
	    format(string, sizeof(string), "%s gives a syringe to %s.", GetName(playerid), GetName(id));
	    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
     	new string2[128];
	    format(string2, sizeof(string2), "* %s gives a syringe to %s.", GetName(playerid), GetName(id));
	    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
	    format(string, sizeof(string), "You have given %s %d syringes of heroin.", GetName(id), amount);
	    SendClientMessage(playerid, COLOR_WHITE, string);
    }
    else if(!strcmp(give, "crack", true))
    {
  		new Float:x, Float:y, Float:z;
		GetPlayerPos(id, x, y, z);
    	if(!IsPlayerInRangeOfPoint(playerid, 7.0, x, y, z)) return SCM(playerid, COLOR_LIGHTRED, "You are not close to that player.");
	    if (id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");
	    if (amount > PlayerInfo[playerid][dCrack]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have that much crack.");
	    if (playerid == id) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't give yourself crack.");

	    PlayerInfo[id][dCrack] += amount;
	    PlayerInfo[playerid][dCrack] -= amount;
	    format(string, sizeof(string), "You have received %d grams of crack from %s.", amount, GetName(playerid));
	    SendClientMessage(id, COLOR_WHITE, string);
	    format(string, sizeof(string), "%s gives a baggie to %s.", GetName(playerid), GetName(id));
	    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
     	new string2[128];
	    format(string2, sizeof(string2), "* %s gives a baggie to %s.", GetName(playerid), GetName(id));
	    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
	    format(string, sizeof(string), "You have given %s %d grams of crack.", GetName(id), amount);
	    SendClientMessage(playerid, COLOR_WHITE, string);
    }
    return 1;
}

CMD:me(playerid, params[])
{
	if(gMuted[playerid]) return SCM(playerid, COLOR_LIGHTRED, "You're muted.");

    if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /me [text]");
	new string[144];
	
 	if(MaskOn[playerid] == 1)
	{
		format(string, sizeof(string), "Stranger_%d%d %s", playerid, masknumber[playerid], params);
		ProxDetector(8.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		return 1;
	}

    else if(strlen(params) > 90)
    {
        new text1[91], 
            text2[91];

        strmid(text2, params, 90, 128);
        strmid(text1, params, 0, 90);

        format(string, 128, "* %s %s ...", GetName(playerid), text1);
        ProxDetector(8.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);

        format(string, 128, "... %s", text2);
        ProxDetector(8.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else
	{
	 	format(string, sizeof string, "* %s %s", GetName(playerid), params);
	 	ProxDetector(8.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	return 1;
}


CMD:do(playerid, params[])
{
	if(gMuted[playerid]) return SCM(playerid, COLOR_LIGHTRED, "You're muted.");

	if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /do [text]");
	new string[144];

	if(MaskOn[playerid] == 1)
	{
		format(string, sizeof(string), "* %s (( Stranger_%d%d ))", params, playerid, masknumber[playerid]);
		ProxDetector(8.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
    if(strlen(params) > 64)
    {
        new text1[65], 
            text2[65];

        strmid(text2, params, 64, 128);
        strmid(text1, params, 0, 64);

        format(string, 128, "* %s ", text1);
        ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);

        format(string, 128, "... %s (( %s ))", text2, GetName(playerid));
        ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else
	{
	 	format(string, sizeof string, "* %s (( %s ))", params, GetName(playerid));
	 	ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
    return 1;
}



CMD:b(playerid, params[])
{
	if(gMuted[playerid]) return SCM(playerid, COLOR_LIGHTRED, "You're muted.");

    if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /b [text]");
    new string[144];

	if(PlayerInfo[playerid][pAdmin] > 1)
	{
 		if(strlen(params) > 64)
 		{
 			new text1[65], 
 			text2[65];

			strmid(text2, params, 64, 128);
			strmid(text1, params, 0, 64);

			format(string, 128, "(( "COL_ADMIN"%s:"COL_WHITE" %s ...", GetName(playerid), text1);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1);

			format(string, 128, "... %s ))", text2);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1);
		}
		else
		{
			format(string, sizeof string, "(( "COL_ADMIN"%s:"COL_WHITE" %s ))", GetName(playerid), params);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1);
		}
	}
	else if(PlayerInfo[playerid][pAdmin] > 0)
	{
 		if(strlen(params) > 64)
 		{
 			new text1[65], 
 			text2[65];

			strmid(text2, params, 64, 128);
			strmid(text1, params, 0, 64);

			format(string, 128, "(( "COL_BROWN"%s:"COL_WHITE" %s ...", GetName(playerid), text1);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1);

			format(string, 128, "... %s ))", text2);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1);
		}
		else
		{
			format(string, sizeof string, "(( "COL_BROWN"%s:"COL_WHITE" %s ))", GetName(playerid), params);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1);
		}
	}
	else if(PlayerInfo[playerid][pDonator] == 1)
	{
	    if(strlen(params) > 64)
	    {
	        new text1[65], 
	            text2[65];

	        strmid(text2, params, 64, 128);
	        strmid(text1, params, 0, 64);

	        format(string, 128, "(( "COL_BRONZE"%s:"COL_WHITE" %s ...", GetName(playerid), text1);
	        ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1);

	        format(string, 128, "... %s ))", text2);
	        ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1);
	    }
	    else
		{
		 	format(string, sizeof string, "(( "COL_BRONZE"%s:"COL_WHITE" %s ))", GetName(playerid), params);
		 	ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1);
		}
	}
	else if(PlayerInfo[playerid][pDonator] == 2)
	{
 		if(strlen(params) > 64)
 		{
 			new text1[65], 
 			text2[65];

			strmid(text2, params, 64, 128);
			strmid(text1, params, 0, 64);

			format(string, 128, "(( "COL_SILVER"%s:"COL_WHITE" %s ...", GetName(playerid), text1);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1);

			format(string, 128, "... %s ))", text2);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1);
		}
		else
		{
			format(string, sizeof string, "(( "COL_SILVER"%s:"COL_WHITE" %s ))", GetName(playerid), params);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1);
		}
	}
	else if(PlayerInfo[playerid][pDonator] == 3)
	{
 		if(strlen(params) > 64)
 		{
 			new text1[65], 
 			text2[65];

			strmid(text2, params, 64, 128);
			strmid(text1, params, 0, 64);

			format(string, 128, "(( "COL_GOLD"%s:"COL_WHITE" %s ...", GetName(playerid), text1);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1);

			format(string, 128, "... %s ))", text2);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1);
		}
		else
		{
			format(string, sizeof string, "(( "COL_GOLD"%s:"COL_WHITE" %s ))", GetName(playerid), params);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1);
		}
	}
	else
	{
	    if(strlen(params) > 64)
 		{
 			new text1[65], 
 			text2[65];

			strmid(text2, params, 64, 128);
			strmid(text1, params, 0, 64);

			format(string, 128, "(( %s: %s ...", GetName(playerid), text1);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1);

			format(string, 128, "... %s ))", text2);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1);
		}
		else
		{
			format(string, sizeof string, "(( %s: %s ))", GetName(playerid), params);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1);
		}
	}
    return 1;
}

CMD:ooc(playerid, params[])
{
	if(gMuted[playerid]) return SCM(playerid, COLOR_LIGHTRED, "You're muted.");
	if(!OOCenable) return SendClientMessage(playerid, COLOR_LIGHTRED, "The OOC chat is currently disabled.");

    if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /(o)oc [text]");
    new string[144];

    if(strlen(params) > 64)
    {
        new text1[65], 
            text2[65];

        strmid(text2, params, 64, 128);
        strmid(text1, params, 0, 64);

        format(string, 128, "(( [OOC:] %s: %s ...", GetName(playerid), text1);
        SendClientMessageToAll(COLOR_OOC, string);

        format(string, 128, "... %s ))", text2);
        SendClientMessageToAll(COLOR_OOC, string);
    }
    else
	{
	 	format(string, sizeof string, "(( [OOC:] %s: %s ))", GetName(playerid), params);
		SendClientMessageToAll(COLOR_OOC, string);
	}
    return 1;
}

CMD:oocstatus(playerid, params[])
{
	new string[128];
    if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");

   	if(!OOCenable)
	{
  		format(string, sizeof(string), "AmdCmd: %s has enabled the OOC chat.", GetName(playerid));
    	SendClientMessageToAll(COLOR_LIGHTRED, string);
		OOCenable = true;
	}
	else if(OOCenable)
	{
  		format(string, sizeof(string), "AmdCmd: %s has disabled the OOC chat.", GetName(playerid));
    	SendClientMessageToAll(COLOR_LIGHTRED, string);
		OOCenable = false;
	}
	return 1;
}


CMD:low(playerid, params[])
{
	if(gMuted[playerid]) return SCM(playerid, COLOR_LIGHTRED, "You're muted.");

    if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /(l)ow [text]");
    new string[144];
    
   	if(MaskOn[playerid] == 1)
	{
		format(string, sizeof(string), "Stranger_%d%d [low:] %s", playerid, masknumber[playerid], params);
		ProxDetector(8.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		return 0;
	}
    format(string, sizeof(string), "%s [low:] %s", GetName(playerid), params);
    ProxDetector(3.0, playerid, string, COLOR_GREY, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4);
    return 1;
}

CMD:boombox(playerid, params[])
{
	if(PlayerInfo[playerid][pBoombox] == 0) return SCM(playerid, COLOR_LIGHTRED, "You do not own a boombox.");
	ShowPlayerDialog(playerid, 76, DIALOG_STYLE_LIST, "Boombox", "Use\nChange Channel\nPickup", "Use", "Cancel");
	return 1;
}

CMD:drink(playerid, params[])
{
	if (PlayerInfo[playerid][pBeer] < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have any beers.");

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
	IsDrinkingBeer[playerid] = 1;
	new string2[128];
	format(string2, sizeof(string2), "* %s opens a beer.", GetName(playerid));
	SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);

	PlayerInfo[playerid][pBeer] -= 1;
	return 1;
}

CMD:forumname(playerid, params[])
{
	ShowPlayerDialog(playerid, DIALOG_FORUMNAME , DIALOG_STYLE_INPUT, "Forumname", "Please enter your forumname below.", "Enter", "Cancel");
	return 1;
}

CMD:fishingrod(playerid, params[])
{
	if(PlayerInfo[playerid][pFishingRod] < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have a fishing rod.");
	if(Equipped[playerid] == 0)
	{
 		RodObject = SetPlayerAttachedObject(playerid, 0, 18632, 6, 0.079376, 0.037070, 0.007706, 181.482910, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
 		Equipped[playerid] = 1;
	}
	else if(Equipped[playerid] == 1)
	{
		RemovePlayerAttachedObject(playerid, 0);
		RemovePlayerAttachedObject(playerid, RodObject);
		Equipped[playerid] = 0;
	}
	return 1;
}
CMD:blockpm(playerid, params[])
{
	if (PlayerInfo[playerid][pDonator] < 1) return SCM(playerid, COLOR_LIGHTRED, "You are not a donator.");

	if(PlayerInfo[playerid][pBlockPM] == 1)
	{
		PlayerInfo[playerid][pBlockPM] = 0;
		SCM(playerid, -1, "You have un-blocked your private messages.");
	}
	else
	{
	    PlayerInfo[playerid][pBlockPM] = 1;
	    SCM(playerid, -1, "You have blocked your private messages.");
	}
	return 1;
}


CMD:smoke(playerid, params[])
{
	if (PlayerInfo[playerid][pCigarettes] < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have any cigarettes.");

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
	IsSmokingCigarette[playerid] = 1;
	new string2[128];
	format(string2, sizeof(string2), "* %s lights up a cigarette.", GetName(playerid));
	SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);

	PlayerInfo[playerid][pCigarettes] -= 1;
	PlayerActionMessage(playerid, 15.0, "lights up a cigarette.");
	return 1;
}

CMD:usedrug(playerid, params[])
{

    new
	give[24], string[256];

    if(sscanf(params, "s[24]", give)) return SendClientMessage(playerid, COLOR_GREY, "[SERVER] /usedrug (lsd, marijuana, cocaine, meth, ecstasy, heroin, crack)");
    if(!strcmp(give, "marijuana", true))
    {
		if (PlayerInfo[playerid][dMarijuana] < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have any marijuana.");
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		IsSmokingJoint[playerid] = 1;

		SetTimerEx("MarijuanaEffect", 60000, 0, "i", playerid);

		new string2[128];
		format(string2, sizeof(string2), "* %s lights up a large spliff.", GetName(playerid));
		SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
		PlayerInfo[playerid][dMarijuana] -= 1;
		PlayerActionMessage(playerid, 8.0, "lights up a large spliff.");
	}
    else if(!strcmp(give, "cocaine", true))
    {
		new
		Float: fArmour;
		GetPlayerArmour( playerid, fArmour );
		if (PlayerInfo[playerid][dCocaine] < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have any cocaine.");
		if (fArmour > 35) return SCM(playerid, COLOR_LIGHTRED, "You can't do any more cocaine.");
		if(IsCocaineHigh[playerid] == 1) return SCM(playerid, COLOR_LIGHTRED, "You have to wait a while before taking more cocaine.");

		SetTimerEx("CocaineEffect", 300000, 0, "i", playerid);

		PlayerInfo[playerid][dCocaine] -= 1;
		IsCocaineHigh[playerid] = 1;
		PlayerActionMessage(playerid, 8.0, "takes cocaine.");

		format(string, sizeof(string), "* %s takes cocaine.", GetName(playerid));
		SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
	}
    else if(!strcmp(give, "lsd", true))
    {
		if (PlayerInfo[playerid][dLSD] < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have any LSD.");
		if(IsLSDHigh[playerid] == 1) return SCM(playerid, COLOR_LIGHTRED, "You have to wait a while before taking more LSD.");

		SetTimerEx("LSDEffect", 300000, 0, "i", playerid);


		PlayerInfo[playerid][dLSD] -= 1;
		IsLSDHigh[playerid] = 1;
		PlayerActionMessage(playerid, 8.0, "takes LSD.");

		format(string, sizeof(string), "* %s takes LSD.", GetName(playerid));
		SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
	}
    else if(!strcmp(give, "meth", true))
    {
		new
		Float: fArmour;
		GetPlayerArmour( playerid, fArmour );
		if (PlayerInfo[playerid][dMeth] < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have any meth.");
		if (fArmour > 45) return SCM(playerid, COLOR_LIGHTRED, "You can't do any more meth.");
		if(IsCocaineHigh[playerid] == 1) return SCM(playerid, COLOR_LIGHTRED, "You have to wait a while before taking more meth.");

		SetTimerEx("CocaineEffect", 300000, 0, "i", playerid);

		PlayerInfo[playerid][dMeth] -= 1;
		IsCocaineHigh[playerid] = 1;
		PlayerActionMessage(playerid, 8.0, "takes meth.");

		format(string, sizeof(string), "* %s takes meth.", GetName(playerid));
		SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
	}
    else if(!strcmp(give, "ecstasy", true))
    {
		new
		Float: fArmour;
		GetPlayerArmour( playerid, fArmour );
		if (PlayerInfo[playerid][dEcstasy] < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have any ecstasy.");
		if (fArmour > 20) return SCM(playerid, COLOR_LIGHTRED, "You can't do any more ecstasy.");
		if(IsCocaineHigh[playerid] == 1) return SCM(playerid, COLOR_LIGHTRED, "You have to wait a while before taking more ecstasy.");

		SetTimerEx("CocaineEffect", 300000, 0, "i", playerid);

		PlayerInfo[playerid][dEcstasy] -= 1;
		IsCocaineHigh[playerid] = 1;
		PlayerActionMessage(playerid, 8.0, "takes ecstasy.");

		format(string, sizeof(string), "* %s takes ecstasy.", GetName(playerid));
		SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
	}
    else if(!strcmp(give, "heroin", true))
    {
		new
		Float: fArmour;
		GetPlayerArmour( playerid, fArmour );
		if (PlayerInfo[playerid][dHeroin] < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have any heroin.");
		if (fArmour > 35) return SCM(playerid, COLOR_LIGHTRED, "You can't do any more heroin.");
		if(IsCocaineHigh[playerid] == 1) return SCM(playerid, COLOR_LIGHTRED, "You have to wait a while before taking more ecstasy.");

		SetTimerEx("CocaineEffect", 300000, 0, "i", playerid);

		PlayerInfo[playerid][dHeroin] -= 1;
		IsCocaineHigh[playerid] = 1;
		PlayerActionMessage(playerid, 8.0, "takes heroin.");

		format(string, sizeof(string), "* %s takes heroin.", GetName(playerid));
		SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
	}
    else if(!strcmp(give, "crack", true))
    {
		new
		Float: fArmour;
		GetPlayerArmour( playerid, fArmour );
		if (PlayerInfo[playerid][dCrack] < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have any crack.");
		if (fArmour > 30) return SCM(playerid, COLOR_LIGHTRED, "You can't do any more crack.");
		if(IsCocaineHigh[playerid] == 1) return SCM(playerid, COLOR_LIGHTRED, "You have to wait a while before taking more crack.");

		SetTimerEx("CocaineEffect", 300000, 0, "i", playerid);

		PlayerInfo[playerid][dCrack] -= 1;
		IsCocaineHigh[playerid] = 1;
		PlayerActionMessage(playerid, 8.0, "takes crack.");

		format(string, sizeof(string), "* %s takes crack.", GetName(playerid));
		SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
	}
	return 1;
}

CMD:help(playerid, params[])
{
	SCM(playerid, COLOR_WHITE, "[Server:] If you need help, please type /helpme and describe your situation.");
    return 1;
}

CMD:shout(playerid, params[])
{
	if(gMuted[playerid]) return SCM(playerid, COLOR_LIGHTRED, "You're muted.");

    if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /(s)hout [text]");
	new string[144];
	format(string, sizeof(string), "%s shouts: %s", GetName(playerid), params);
	ProxDetector(50.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	return 1;
}

CMD:revokelicense(playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "[Usage:] /revokelicense [playerid/partofname]");
	if(PlayerInfo[playerid][pFaction] != 2) return SCM(playerid, COLOR_LIGHTRED, "You are not a police officer.");
	
	PlayerInfo[id][pDriverLicense] = 0;
	
	format(string, sizeof(string), "%s has revoked your license.", GetName(playerid));
 	SendClientMessage(id, COLOR_SJPD, string);
 	
	format(string, sizeof(string), "You have revoked %s's license.", GetName(id));
 	SendClientMessage(playerid, COLOR_SJPD, string);
	return 1;
}

CMD:stats(playerid, params[])
{

	new fishingrodtext[18];
	switch(PlayerInfo[playerid][pFishingRod])
	{
		case 1: fishingrodtext = "Yes";
		case 0: fishingrodtext = "No";
	}

	new jobtext[32];
	switch(PlayerInfo[playerid][pJob])
	{
	    case 11: jobtext = "Pizzaboy.";
	    case 10: jobtext = "Bus Driver.";
	    case 3: jobtext = "24/7 Worker.";
	    case 2: jobtext = "Lumber Jack.";
		case 1: jobtext = "Junk Collector.";
		case 0: jobtext = "None.";
	}
	
	new donatortext[32];
	switch(PlayerInfo[playerid][pDonator])
	{
	    case 3: donatortext = "Gold Donator";
	    case 2: donatortext = "Silver Donator";
		case 1: donatortext = "Bronze Donator";
		case 0: donatortext = "Regular Player";
	}

	new
	string[600], Float:Health;
	GetPlayerHealth(playerid, Health);

	new faction = PlayerInfo[playerid][pFaction];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
		format(string, sizeof(string), "_______________________________[%s]_______________________________", GetName(playerid));
		SCM(playerid, COLOR_WHITE, string);

		format(string, sizeof(string), "[GENERAL:] Age: %d | Name: %s | Register Date: %d-%d-%d", PlayerInfo[playerid][pAge], GetName(playerid), PlayerInfo[playerid][pYear], PlayerInfo[playerid][pMonth], PlayerInfo[playerid][pDay]);
		SCM(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "[GENERAL:] Donator Status: %s | Playing Hours: %d | Bank: $%d", donatortext, PlayerInfo[playerid][pPlayingHours], PlayerInfo[playerid][pBankAccount]);
		SCM(playerid, COLOR_WHITE, string);
		
		if(PlayerInfo[playerid][fRank] == 1)
		{
			format(string, sizeof(string), "[FACTION:] Name: %s | Rank: %s ", FactionInfo[faction][fName], FactionInfo[faction][fRank1]);
			SCM(playerid, COLOR_WHITE, string);
		}
		else if (PlayerInfo[playerid][fRank] == 2)
		{
			format(string, sizeof(string), "[FACTION:] Name: %s | Rank: %s ", FactionInfo[faction][fName], FactionInfo[faction][fRank2]);
			SCM(playerid, COLOR_WHITE, string);
		}
		else if (PlayerInfo[playerid][fRank] == 3)
		{
			format(string, sizeof(string), "[FACTION:] Name: %s | Rank: %s ", FactionInfo[faction][fName], FactionInfo[faction][fRank3]);
			SCM(playerid, COLOR_WHITE, string);
		}
		else if (PlayerInfo[playerid][fRank] == 4)
		{
			format(string, sizeof(string), "[FACTION:] Name: %s | Rank: %s ", FactionInfo[faction][fName], FactionInfo[faction][fRank4]);
			SCM(playerid, COLOR_WHITE, string);
		}

		format(string, sizeof(string), "[JOB:] %s", jobtext);
		SCM(playerid, COLOR_WHITE, string);
		SCM(playerid, COLOR_LIGHTRED, "HINT: Type /inv to see your possesions and currency.");
	}
	else
	{
		format(string, sizeof(string), "_______________________________[%s]_______________________________", GetName(playerid));
		SCM(playerid, COLOR_WHITE, string);

		format(string, sizeof(string), "[GENERAL:] Age: %d | Name: %s | Register Date: %d-%d-%d | Admin Level: %d", PlayerInfo[playerid][pAge], GetName(playerid), PlayerInfo[playerid][pYear], PlayerInfo[playerid][pMonth], PlayerInfo[playerid][pDay], PlayerInfo[playerid][pAdmin]);
		SCM(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "[GENERAL:] Donator Status: %s | Playing Hours: %d | Bank: $%d", donatortext, PlayerInfo[playerid][pPlayingHours], PlayerInfo[playerid][pBankAccount]);
		SCM(playerid, COLOR_WHITE, string);

		if(PlayerInfo[playerid][fRank] == 1)
		{
			format(string, sizeof(string), "[FACTION:] Name: %s | Rank: %s ", FactionInfo[faction][fName], FactionInfo[faction][fRank1]);
			SCM(playerid, COLOR_WHITE, string);
		}
		else if (PlayerInfo[playerid][fRank] == 2)
		{
			format(string, sizeof(string), "[FACTION:] Name: %s | Rank: %s ", FactionInfo[faction][fName], FactionInfo[faction][fRank2]);
			SCM(playerid, COLOR_WHITE, string);
		}
		else if (PlayerInfo[playerid][fRank] == 3)
		{
			format(string, sizeof(string), "[FACTION:] Name: %s | Rank: %s ", FactionInfo[faction][fName], FactionInfo[faction][fRank3]);
			SCM(playerid, COLOR_WHITE, string);
		}
		else if (PlayerInfo[playerid][fRank] == 4)
		{
			format(string, sizeof(string), "[FACTION:] Name: %s | Rank: %s ", FactionInfo[faction][fName], FactionInfo[faction][fRank4]);
			SCM(playerid, COLOR_WHITE, string);
		}
		
		format(string, sizeof(string), "[JOB:] %s", jobtext);
		SCM(playerid, COLOR_WHITE, string);
		SCM(playerid, COLOR_LIGHTRED, "HINT: Type /inv to see your possesions and currency.");
	}
	return 1;
}

CMD:astats(playerid, params[])
{

	
	new
	string[200], Float:Health;
	GetPlayerHealth(playerid, Health);

	new id;
	new faction = PlayerInfo[id][pFaction];
	new donatortext[32];
	switch(PlayerInfo[id][pDonator])
	{
	    case 3: donatortext = "Gold Donator";
	    case 2: donatortext = "Silver Donator";
		case 1: donatortext = "Bronze Donator";
		case 0: donatortext = "Regular Player";
	}
	
    if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_GREY, "You're not authorized to use that command.");
    if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "[Usage:] /astats [playerid/partofname]");
	format(string, sizeof(string), "_______________________________[%s]_______________________________", GetName(id));
	SCM(playerid, COLOR_WHITE, string);

	format(string, sizeof(string), "[GENERAL:] Age: %d | Name: %s | Money: $%d | Number: %d | Cigarettes: %d | Beers: %d | Register Date: %d-%d-%d", PlayerInfo[id][pAge], GetName(id), GetPlayerMoney(id), PlayerInfo[id][pNumber], PlayerInfo[id][pCigarettes], PlayerInfo[id][pBeer],  PlayerInfo[id][pYear], PlayerInfo[id][pMonth], PlayerInfo[id][pDay]);
	SCM(playerid, COLOR_WHITE, string);

	format(string, sizeof(string), "[GENERAL:] Donator Status: %s | Admin Level: %d | Business Key: %d | House Key: %d | Bank: $%d | Playing Hours: %d", donatortext, PlayerInfo[id][pAdmin], PlayerInfo[id][BizID], PlayerInfo[id][HouseID], PlayerInfo[id][pBankAccount], PlayerInfo[id][pPlayingHours]);
	SCM(playerid, COLOR_WHITE, string);

	format(string, sizeof(string), "[DRUGS:] Marijuana: %dg | Cocaine: %dg | LSD: %dg | Ecstasy: %dg | Methamphetamine: %dg | Heroin: %d | Crack: %d", PlayerInfo[id][dMarijuana], PlayerInfo[id][dCocaine], PlayerInfo[id][dLSD], PlayerInfo[id][dEcstasy], PlayerInfo[id][dMeth], PlayerInfo[id][dHeroin], PlayerInfo[id][dCrack]);
	SCM(playerid, COLOR_WHITE, string);

	format(string, sizeof(string), "[FISHING:] FIG(fishes in grams): %d | Worms: %d", PlayerInfo[id][pFishes], PlayerInfo[id][pWorms]);
	SCM(playerid, COLOR_WHITE, string);

	if(PlayerInfo[id][fRank] == 1)
	{
		format(string, sizeof(string), "[FACTION:] Name: %s | Rank: %s ", FactionInfo[faction][fName], FactionInfo[faction][fRank1]);
		SCM(playerid, COLOR_WHITE, string);
	}
	else if (PlayerInfo[id][fRank] == 2)
	{
		format(string, sizeof(string), "[FACTION:] Name: %s | Rank: %s ", FactionInfo[faction][fName], FactionInfo[faction][fRank2]);
		SCM(playerid, COLOR_WHITE, string);
	}
	else if (PlayerInfo[id][fRank] == 3)
	{
		format(string, sizeof(string), "[FACTION:] Name: %s | Rank: %s ", FactionInfo[faction][fName], FactionInfo[faction][fRank3]);
		SCM(playerid, COLOR_WHITE, string);
	}
	else if (PlayerInfo[id][fRank] == 4)
	{
		format(string, sizeof(string), "[FACTION:] Name: %s | Rank: %s ", FactionInfo[faction][fName], FactionInfo[faction][fRank4]);
		SCM(playerid, COLOR_WHITE, string);
	}
	return 1;
}
		
/*

	[=Police Commands=]

*/

/* COMMAND:taze(playerid, params[])
{
    new
	criminal, string[128], Float:X, Float:Y, Float:Z;

    if(sscanf(params, "u", criminal)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /taze [ID].");
    if(criminal == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");
    if(criminal == playerid) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't taze yourself.");
    if(PlayerInfo[playerid][pFaction] != 2) return SCM(playerid, COLOR_LIGHTRED, "You are not a police officer.");

    GetPlayerPos(criminal, X, Y, Z);
    if(IsPlayerInRangeOfPoint(playerid, 10.0, X, Y, Z))
	{
	   	format(string, sizeof(string), "%s tazes %s.", GetName(playerid), GetName(criminal));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		TogglePlayerControllable(criminal, 0);
		SetTimerEx("LoadDeathAnim", 1000, false, "i", criminal);
		SetTimerEx("UnloadTazer", 10000, false, "i", criminal);

	} else return SCM(playerid, COLOR_LIGHTRED, "You are not close enough.");
	return 1;
}

*/

COMMAND:roadblock(playerid, params[])
{
	new give[10];
	if(sscanf(params, "s[10]", give)) return SendClientMessage(playerid, COLOR_GREY, "[SERVER] /roadblock [1-7]");
    if(!strcmp(give, "1", true))
    {
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		new Float:plocx, Float:plocy, Float:plocz, Float:ploca;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		GetPlayerFacingAngle(playerid, ploca);
		CreateRoadblock(1459, plocx, plocy, plocz, ploca);
		GameTextForPlayer(playerid, "~w~Roadblock ~b~Placed!", 3000, 1);
		return 1;
	}
    else if(!strcmp(give, "2", true))
    {
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		new Float:plocx, Float:plocy, Float:plocz, Float:ploca;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		GetPlayerFacingAngle(playerid, ploca);
		CreateRoadblock(978, plocx, plocy, plocz+0.6, ploca);
		GameTextForPlayer(playerid, "~w~Roadblock ~b~Placed!", 3000, 1);
		return 1;
	}
    else if(!strcmp(give, "3", true))
    {
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		new Float:plocx, Float:plocy, Float:plocz, Float:ploca;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		GetPlayerFacingAngle(playerid, ploca);
		CreateRoadblock(981, plocx, plocy, plocz+0.9, ploca+180);
		GameTextForPlayer(playerid, "~w~Roadblock ~g~Placed!", 3000, 1);
		SafeSetPlayerPos(playerid, plocx, plocy+5, plocz);
		return 1;
	}
    else if(!strcmp(give, "4", true))
    {
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		new Float:plocx, Float:plocy, Float:plocz, Float:ploca;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		GetPlayerFacingAngle(playerid, ploca);
		CreateRoadblock(1238, plocx, plocy, plocz+0.2, ploca);
		GameTextForPlayer(playerid, "~w~Cone ~g~Placed!", 3000, 1);
		return 1;
	}
    else if(!strcmp(give, "5", true))
    {
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		new Float:plocx, Float:plocy, Float:plocz, Float:ploca;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		GetPlayerFacingAngle(playerid, ploca);
		CreateRoadblock(1425, plocx, plocy, plocz+0.6, ploca);
		GameTextForPlayer(playerid, "~w~Sign ~g~Placed!", 3000, 1);
		return 1;
	}
    else if(!strcmp(give, "6", true))
    {
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		new Float:plocx, Float:plocy, Float:plocz, Float:ploca;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		GetPlayerFacingAngle(playerid, ploca);
		CreateRoadblock(3265, plocx, plocy, plocz-0.5, ploca);
		GameTextForPlayer(playerid, "~w~Sign ~g~Placed!", 3000, 1);
		return 1;
	}
    else if(!strcmp(give, "7", true))
    {
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		new Float:plocx, Float:plocy, Float:plocz, Float:ploca;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		GetPlayerFacingAngle(playerid, ploca);
		CreateRoadblock(3091, plocx, plocy, plocz+0.5, ploca+180);
		GameTextForPlayer(playerid, "~w~Sign ~g~Placed!", 3000, 1);
		return 1;
	}
	return 1;
}

COMMAND:removeroadblock(playerid, params[])
{
    GameTextForPlayer(playerid, "~w~Roadblock \n~r~Removed!", 3000, 1);
    for(new i = 0; i < sizeof(Roadblocks); i++)
    {
    	if(IsPlayerInRangeOfPoint(playerid, 5.0, Roadblocks[i][sX], Roadblocks[i][sY], Roadblocks[i][sZ]))
        {
        	if(Roadblocks[i][sCreated] == 1)
            {
                Roadblocks[i][sCreated] = 0;
                Roadblocks[i][sX] = 0.0;
                Roadblocks[i][sY] = 0.0;
                Roadblocks[i][sZ] = 0.0;
                DestroyDynamicObject(Roadblocks[i][sObject]);
                return 1;
            }
		}
	}
    return 1;
}

COMMAND:spike(playerid, params[])
{
	new Float:plocx, Float:plocy, Float:plocz, Float:ploca;
    GetPlayerPos(playerid, plocx, plocy, plocz);
    GetPlayerFacingAngle(playerid, ploca);
    CreateSpike(plocx, plocy, plocz, ploca);
    return 1;
}

COMMAND:removespike(playerid, params[])
{
	for(new i = 0; i < sizeof(SpikeInfo); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ]))
		{
			if(SpikeInfo[i][sCreated] == 1)
			{
				SpikeInfo[i][sCreated]=0;
				SpikeInfo[i][sX]=0.0;
				SpikeInfo[i][sY]=0.0;
				SpikeInfo[i][sZ]=0.0;
				DestroyObject(SpikeInfo[i][sObject]);
				return 1;
			}
		}
	}
	return 1;
}

COMMAND:signwelfare(playerid, params[])
{
	new string[128];
	if(PlayerInfo[playerid][pJob] != 0) return SCM(playerid, COLOR_LIGHTRED, "You have a job. You can't sign up for a welfare bonus while having a job.");
	PlayerInfo[playerid][pWelfare] = 1;
	format(string, sizeof(string), "SMS from: 555-1999. MSG: Your information has been set-up, you will now receive a welfare bonus, %s.", GetName(playerid));
	SCM(playerid, COLOR_GREEN, string);
	SCM(playerid, COLOR_WHITE, "You have signed up for the welfare system. You will now get a bonus every PayDay. If you want to get a job, type /quitwelfare.");
	return 1;
}

COMMAND:quitwelfare(playerid, params[])
{
    new string[128];
	if(PlayerInfo[playerid][pWelfare] == 0) return SCM(playerid, COLOR_LIGHTRED, "You are not signed up to the welfare program.");
	PlayerInfo[playerid][pWelfare] = 0;
	format(string, sizeof(string), "SMS from: 555-1999. MSG: Your welfare bonuses have been cancelled, %s.", GetName(playerid));
	SCM(playerid, COLOR_GREEN, string);
	SCM(playerid, COLOR_WHITE, "You have quit the welfare system.");
	return 1;
}

COMMAND:ticket(playerid, params[])
{
    new Float:X, Float:Y, Float:Z;
    GetPlayerPos(playerid, X, Y, Z);
	new criminal, string[128], amount, reason[128];

    if(sscanf(params, "uis[128]", criminal, amount, reason)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /ticket [ID] [price] [reason].");
    if(criminal == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");
    if(amount < 1 || amount > 1000) return SendClientMessage(playerid, COLOR_LIGHTRED, "Tickets can only range between 1-1000 dollars.");
    if(PlayerInfo[playerid][pFaction] != 2) return SCM(playerid, COLOR_LIGHTRED, "You are not a police officer.");

	if(PlayerInfo[criminal][pTicket1] == 0)
	{
	    GetPlayerPos(criminal, X, Y, Z);
	    if(IsPlayerInRangeOfPoint(playerid, 10.0, X, Y, Z))
		{
		   	format(string, sizeof(string), "%s has written %s a ticket of $%d dollars.", GetName(playerid), GetName(criminal), amount);
			ProxDetector(15.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			PlayerInfo[criminal][pTicketReason1] = reason;
			format(string, sizeof(string), "A ticket of $%d has been added to your register. /list_tickets to pay it.", amount);
			SCM(criminal, -1, string);
			PlayerInfo[criminal][pTicket1] = 1;
			PlayerInfo[criminal][pTicketPrice1] = amount;
		} else return SCM(playerid, COLOR_LIGHTRED, "You're not close enough.");
	}
	else if(PlayerInfo[criminal][pTicket2] == 0)
	{
	    GetPlayerPos(criminal, X, Y, Z);
	    if(IsPlayerInRangeOfPoint(playerid, 10.0, X, Y, Z))
		{
		   	format(string, sizeof(string), "%s has written %s a ticket of $%d dollars.", GetName(playerid), GetName(criminal), amount);
			ProxDetector(15.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			PlayerInfo[criminal][pTicketReason2] = reason;
			format(string, sizeof(string), "A ticket of $%d has been added to your register. /list_tickets to pay it.", amount);
			SCM(criminal, -1, string);
			PlayerInfo[criminal][pTicket2] = 1;
			PlayerInfo[criminal][pTicketPrice2] = amount;
		} else return SCM(playerid, COLOR_LIGHTRED, "You're not close enough.");
	}
	else return SCM(playerid, COLOR_LIGHTRED, "That player already has two unpaid tickets, arrest them.");
	return 1;
}

COMMAND:payticket(playerid, params[])
{
	if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /payticket [ID].");

	new string[128];
	if(!strcmp(params, "1", true))
    {
        if(GetPlayerMoney(playerid) < PlayerInfo[playerid][pTicketPrice1]) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money to pay that ticket.");
		format(string, sizeof(string), "You have paid this ticket of $%d.", PlayerInfo[playerid][pTicketPrice1]);
		SCM(playerid, -1, string);
		GivePlayerMoney(playerid, PlayerInfo[playerid][pTicketPrice1]);
		PlayerInfo[playerid][pTicket1] = 0;
		strdel(PlayerInfo[playerid][pTicketReason1], 0, 128);
		PlayerInfo[playerid][pTicketPrice1] = 0;
    }
    else if(!strcmp(params, "2", true))
    {
        if(GetPlayerMoney(playerid) < PlayerInfo[playerid][pTicketPrice2]) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money to pay that ticket.");
  		format(string, sizeof(string), "You have paid this ticket of $%d.", PlayerInfo[playerid][pTicketPrice2]);
		SCM(playerid, -1, string);
        GivePlayerMoney(playerid, PlayerInfo[playerid][pTicketPrice2]);
        PlayerInfo[playerid][pTicket2] = 0;
        strdel(PlayerInfo[playerid][pTicketReason2], 0, 128);
        PlayerInfo[playerid][pTicketPrice2] = 0;
    }
	return 1;
}

COMMAND:list_tickets(playerid, params[])
{
	new string[128];
	SCM(playerid, COLOR_YELLOW, "Type /payticket [ID] to pay your tickets.");
	if(PlayerInfo[playerid][pTicket1] == 1 && PlayerInfo[playerid][pTicket2] == 1)
	{
		format(string, sizeof(string), "[TICKET 1:] %s, Price: $%d.", PlayerInfo[playerid][pTicketReason1], PlayerInfo[playerid][pTicketPrice1]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "[TICKET 2:] %s, Price: $%d.", PlayerInfo[playerid][pTicketReason2], PlayerInfo[playerid][pTicketPrice2]);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if(PlayerInfo[playerid][pTicket1] == 1)
	{
		format(string, sizeof(string), "[TICKET 1:] %s, Price: $%d.", PlayerInfo[playerid][pTicketReason1], PlayerInfo[playerid][pTicketPrice1]);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if(PlayerInfo[playerid][pTicket2] == 1)
 	{
		format(string, sizeof(string), "[TICKET 2:] %s, Price: $%d.", PlayerInfo[playerid][pTicketReason2], PlayerInfo[playerid][pTicketPrice2]);
		SendClientMessage(playerid, COLOR_WHITE, string);
	} else return SCM(playerid, COLOR_LIGHTRED, "You do not have any tickets.");
	return 1;
}


COMMAND:cuff(playerid, params[])
{
    new Float:X, Float:Y, Float:Z;
    GetPlayerPos(playerid, X, Y, Z);
	new criminal, string[128];

    if(sscanf(params, "u", criminal)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /cuff [ID].");
    if(criminal == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");
    if(criminal == playerid) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't cuff yourself.");
    if(PlayerInfo[playerid][pFaction] != 2) return SCM(playerid, COLOR_LIGHTRED, "You are not a police officer.");

    GetPlayerPos(criminal, X, Y, Z);
    if(IsPlayerInRangeOfPoint(playerid, 7.0, X, Y, Z))
	{
	   	SetPlayerSpecialAction(criminal, SPECIAL_ACTION_CUFFED);
	   	SetPlayerAttachedObject(criminal, 9, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
	   	format(string, sizeof(string), "%s cuffs %s.", GetName(playerid), GetName(criminal));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	} else return SCM(playerid, COLOR_LIGHTRED, "You're not close enough.");
	return 1;
}

COMMAND:carsign(playerid, params[])
{
    new getcar = GetPlayerVehicleID(playerid);
	if(!(IsPlayerInAnyVehicle(playerid))) return SCM(playerid, COLOR_LIGHTRED, "You have to be in a vehicle.");
	if(isnull(params)) return SCM(playerid, COLOR_GREY, "[Usage:] /carsign [text].");
	
	Delete3DTextLabel(vehicle3Dtext4[getcar]);
 	vehicle3Dtext4[getcar] = Create3DTextLabel(params, -1, 0.0, 0.0, 0.0, 50.0, 0, 1);
  	Attach3DTextLabelToVehicle(vehicle3Dtext4[getcar], getcar, -0.8, -2.8, -0.3);
  	SCM(playerid, COLOR_GREY, "Remember to /remove_carsign when you're done.");
	return 1;
}

COMMAND:remove_carsign(playerid, params[])
{
    new getcar = GetPlayerVehicleID(playerid);
	if(!(IsPlayerInAnyVehicle(playerid))) return SCM(playerid, COLOR_LIGHTRED, "You have to be in a vehicle.");
	Delete3DTextLabel(vehicle3Dtext4[getcar]);
	return 1;
}

COMMAND:uncuff(playerid, params[])
{
    new
	criminal, string[128], Float:X, Float:Y, Float:Z;

    if(sscanf(params, "u", criminal)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /uncuff [ID].");
    if(criminal == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");
    if(PlayerInfo[playerid][pFaction] != 2) return SCM(playerid, COLOR_LIGHTRED, "You are not a police officer.");

    GetPlayerPos(criminal, X, Y, Z);
    if(IsPlayerInRangeOfPoint(playerid, 7.0, X, Y, Z))
	{
	    SetPlayerSpecialAction(criminal, SPECIAL_ACTION_NONE);
	    RemovePlayerAttachedObject(criminal, 9);
	    format(string, sizeof(string), "%s uncuffs %s.", GetName(playerid), GetName(criminal));
	   	ProxDetector(15.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	} else return SCM(playerid, COLOR_LIGHTRED, "You're not close enough.");
  	return 1;
}

CMD:megaphone(playerid, params[])
{
	if(gMuted[playerid]) return SCM(playerid, COLOR_LIGHTRED, "You're muted.");
	if(PlayerInfo[playerid][pFaction] != 2) return SCM(playerid, COLOR_LIGHTRED, "You are not a police officer.");
    if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /(m)egaphone [text]");
	new string[144];
	format(string, sizeof(string), "[MEGAPHONE] %s: %s", GetName(playerid), params);
	ProxDetector(50.0, playerid, string, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
	return 1;
}

CMD:radio(playerid, params[])
{
	new
	string[128], message[144];

    if(PlayerInfo[playerid][pFaction] != 2) return SCM(playerid, COLOR_LIGHTRED, "You are not a police officer.");
    if(sscanf(params, "s[144]", message)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /radio [message]");

	format(string, sizeof(string), "**[CH: SJPD, 993] %s: %s", GetName(playerid), message);
   	PoliceBroadcast(COLOR_LIGHTORANGE, string, 1);

	format(string, sizeof(string), "%s speaks into radio: %s", GetName(playerid), message);
	ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);

    format(string, sizeof(string), "* %s talks into his radio.", GetName(playerid));
    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
	return 1;
}

CMD:duty(playerid, params[])
{
	new string[128];

	if(Duty[playerid] == 0 && PlayerInfo[playerid][pFaction] == 2)
	{
		Duty[playerid] = 1;
		Previous_Colour[playerid] = GetPlayerColor(playerid);
  		format(string, sizeof(string), "San Jose Police Department: %s has went on duty.", GetName(playerid));
    	PoliceBroadcast(COLOR_SJPD, string, 1);
		SetPlayerColor(playerid, COLOR_SJPD);
	}
	else if(Duty[playerid] == 1 && PlayerInfo[playerid][pFaction] == 2)
	{
		Duty[playerid] = 0;
		format(string, sizeof(string), "San Jose Police Department: %s has went off duty.", GetName(playerid));
    	PoliceBroadcast(COLOR_SJPD, string, 1);
		SetPlayerColor(playerid, Previous_Colour[playerid]);
	}
	return 1;
}

CMD:namebug(playerid, params[])
{
	SetPlayerColor(playerid, COLOR_WHITE);
	return 1;
}

COMMAND:fixmapping(playerid, params[])
{
	new criminal;
    if(sscanf(params, "u", criminal)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /fixmapping [ID].");
	SetPlayerVirtualWorld(criminal, 0);
	SetPlayerInterior(criminal, 0);
  	return 1;
}

COMMAND:free(playerid, params[])
{
    new
	criminal, string[128];
	
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
    if(sscanf(params, "u", criminal)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /free [ID].");
    if(criminal == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");

	PlayerInfo[criminal][pInJailTime] = 0;
	SetPlayerPos(criminal, 1555.3206, -1675.6517, 16.1953);
	SetPlayerVirtualWorld(criminal, 0);
	SetPlayerInterior(criminal, 0);
	PlayerInfo[playerid][pJailed] = 0;
	KillTimer(Timer3[criminal]);
	
	format(string, sizeof(string), "AdmCmd: %s has been released by administrator %s.", GetName(criminal), GetName(playerid));
 	SendClientMessageToAll(COLOR_LIGHTRED, string);
  	return 1;
}

COMMAND:suspect(playerid, params[])
{
    new criminal, string[128], offense[128];
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(criminal, X, Y, Z);

    if(sscanf(params, "us[128]", criminal, offense)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /suspect [ID/name] [offense/reason].");
    if(criminal == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");
    if(PlayerInfo[playerid][pFaction] != 2) return SCM(playerid, COLOR_LIGHTRED, "You are not a police officer.");

	format(string, sizeof(string), "[SJPD:] %s has reported %s as a suspect, offense: %s", GetName(playerid), GetName(criminal), offense);
	PoliceBroadcast(COLOR_SJPD, string, 1);
	PlayerInfo[criminal][pActiveOffense] = offense;
	PlayerInfo[criminal][pActiveOffenses] += 1;
  	return 1;
}

COMMAND:mdc(playerid, params[])
{
    new criminal, string[128];
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(criminal, X, Y, Z);
	
    if(sscanf(params, "u", criminal)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /mdc [name].");
    if(criminal == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");
    if(PlayerInfo[playerid][pFaction] != 2) return SCM(playerid, COLOR_LIGHTRED, "You are not a police officer.");
	
	format(string, sizeof(string), "_______________________________[%s]_______________________________", GetName(criminal));
	SCM(playerid, COLOR_WHITE, string);
	if(PlayerInfo[criminal][pActiveOffenses] < 1)
	{
		SendClientMessage(playerid, COLOR_SJPD, "[SJPD Database:] "COL_WHITE"None.");
	}
	else
	{
		format(string, sizeof(string), "[SJPD Database:] "COL_WHITE"%s", PlayerInfo[criminal][pActiveOffense]);
		SCM(playerid, COLOR_SJPD, string);
	}
  	return 1;
}

COMMAND:vmdc(playerid, params[])
{
    new plate, string[128];

    if(sscanf(params, "d", plate)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /vmdc [plate].");
    if(PlayerInfo[playerid][pFaction] != 2) return SCM(playerid, COLOR_LIGHTRED, "You are not a police officer.");
    
    foreach(new i : Player)
    {
	    if(plate == PlayerInfo[i][pPlate1] || plate == PlayerInfo[i][pPlate2] || plate == PlayerInfo[i][pPlate3])
	    {
			format(string, sizeof(string), "_______________________________[SJ-%d]_______________________________", plate);
			SCM(playerid, COLOR_WHITE, string);

			format(string, sizeof(string), "[Vehicle Owner:] "COL_WHITE"%s.", PlayerInfo[i][pName]);
			SCM(playerid, COLOR_SJPD, string);
		} else return SCM(playerid, COLOR_LIGHTRED, "There is no player with that license plate.");
	}
  	return 1;
}

COMMAND:arrest(playerid, params[])
{
    new criminal, time, string[128];
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(criminal, X, Y, Z);

    if(sscanf(params, "ud", criminal, time)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /arrest [ID] [minutes].");
    if(criminal == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");
    if(PlayerInfo[playerid][pFaction] != 2) return SCM(playerid, COLOR_LIGHTRED, "You are not a police officer.");
    if(time > 120) return SCM(playerid, COLOR_LIGHTRED, "You can't give jail sentances that exceed two hours.");

 	if (GetDistanceBetweenPlayers(playerid, criminal) > 5)
	{
		PlayerInfo[criminal][pInJailTime] = time*60;
		format(string, sizeof(string), "[SJPD:] %s has jailed %s for %d minutes.", GetName(playerid), GetName(criminal), time);
		SendClientMessageToAll(COLOR_SJPD, string);
		SetPlayerPos(criminal, 223.3741, 110.1803, 999.0156);
		SetPlayerInterior(criminal, 10);
		PlayerInfo[criminal][pJailed] = 1;
		ResetPlayerWeapons(criminal);
		PlayerInfo[criminal][pActiveOffenses] = 0;
	} else return SCM(playerid, COLOR_LIGHTRED, "You're not close to that player.");
  	return 1;
}

COMMAND:locker(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != 2) return SCM(playerid, COLOR_LIGHTRED, "You are not a police officer.");
 	if(IsPlayerInRangeOfPoint(playerid, 6.0, 258.3803, 117.9075, 1003.2188))
	{
		ShowPlayerDialog(playerid, DIALOG_LOCKER, DIALOG_STYLE_LIST, "SJPD Locker", "Armour\nNightstick\nPepper-Spray\nDeagle\nShotgun\nMP5\nM4\nTazer\nUniform", "Choose", "Cancel");
	} else return SCM(playerid, COLOR_LIGHTRED, "You're not by the lockers.");
	return 1;
}

CMD:backup(playerid, params[])
{
	new string[128], Float:X, Float:Y, Float:Z;

	if(PlayerInfo[playerid][pFaction] == 2)
	{
		GetPlayerPos(playerid, X, Y, Z);
		format(string, sizeof(string), "(Police Radio): %s is requesting backup at his position.", GetName(playerid));
		PoliceBroadcast(COLOR_SJPD, string, 1);
		for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
		{
	        if(PlayerInfo[i][pFaction] == 2)
	        {
				SetPlayerCheckpoint(i, X, Y, Z, 3.0);
				BackupCP[playerid] = 1;
			}
		}
	}
	return 1;
}

CMD:opengate(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 2)
	{
 		if(IsPlayerInRangeOfPoint(playerid, 7.0, 1544.69177, -1630.98474, 13.17190))
		{
		    MoveObject(gate0, 1544.69177, -1630.98474, 13.17190, 0.50, -0.12001, 1.07993, 90.96000);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 7.0, 1588.60095, -1637.98071, 12.94264))
		{
		    MoveObject(gate1, 1588.60095, -1637.98071, 5.75035, 0.50, 0.00000, 0.00000, -0.06000);
		}
	} else return SCM(playerid, COLOR_LIGHTRED, "You are not a police officer.");
	return 1;
}

CMD:closegate(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 2)
	{
 		if(IsPlayerInRangeOfPoint(playerid, 7.0, 1544.69177, -1630.98474, 13.17190))
		{
		    MoveObject(gate0, 1544.69177, -1630.98474, 13.17190, 0.50, 2.16000, 90.06000, 90.96000);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 7.0, 1588.60095, -1637.98071, 14.13662))
		{
		    MoveObject(gate1, 1588.60095, -1637.98071, 14.13662, 0.50, 0.00000, 0.00000, -0.06000);
		}
	} else return SCM(playerid, COLOR_LIGHTRED, "You are not a police officer.");
	return 1;
}

CMD:opencell(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 2)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1491.21484375, -1764.90002441, 3284.25048828)) //Cell0
		{
		    MoveObject(cell0, 1491.21484375-1.25, -1764.90002441, 3284.25048828, 0.50);
		    PlayerActionMessage(playerid, 20.0, "inserts the keys and opens the cell.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1494.41210938, -1764.90002441, 3284.25048828)) //Cell1
		{
		    MoveObject(cell1, 1494.41210938-1.25, -1764.90002441, 3284.25048828, 0.50);
		    PlayerActionMessage(playerid, 20.0, "inserts the keys and opens the cell.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1497.61132812, -1764.90002441, 3284.25048828)) //Cell2
		{
		    MoveObject(cell2, 1497.61132812-1.25, -1764.90002441, 3284.25048828, 0.50);
		    PlayerActionMessage(playerid, 20.0, "inserts the keys and opens the cell.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1500.81445312, -1764.90002441, 3284.25048828)) //Cell3
		{
		    MoveObject(cell3, 1500.81445312-1.25, -1764.90002441, 3284.25048828, 0.50);
		    PlayerActionMessage(playerid, 20.0, "inserts the keys and opens the cell.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1500.81994629, -1761.51000977, 3284.25048828)) //Cell4
		{
		    MoveObject(cell4, 1500.81994629-1.25, -1761.51000977, 3284.25048828, 0.50);
		    PlayerActionMessage(playerid, 20.0, "inserts the keys and opens the cell.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1491.22094727, -1761.50000000, 3284.25048828)) //Cell5
		{
		    MoveObject(cell5, 1491.22094727-1.25, -1761.50000000, 3284.25048828, 0.50);
		    PlayerActionMessage(playerid, 20.0, "inserts the keys and opens the cell.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1494.41894531, -1761.51000977, 3284.25048828)) //Cell6
		{
		    MoveObject(cell6, 1494.41894531-1.25, -1761.51000977, 3284.25048828, 0.50);
		    PlayerActionMessage(playerid, 20.0, "inserts the keys and opens the cell.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1497.61999512, -1761.51000977, 3284.25048828)) //Cell7
		{
		    MoveObject(cell7, 1497.61999512-1.25, -1761.51000977, 3284.25048828, 0.50);
		    PlayerActionMessage(playerid, 20.0, "inserts the keys and opens the cell.");
		} else return SCM(playerid, COLOR_LIGHTRED, "[Error:] You're not by any cell.");
	} else return SCM(playerid, COLOR_LIGHTRED, "[Error:] You're not a police officer.");
	return 1;
}

CMD:closecell(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 2)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1491.21484375, -1764.90002441, 3284.25048828)) //Cell0
		{
		    MoveObject(cell0, 1491.21484375, -1764.90002441, 3284.25048828, 0.50);
		    PlayerActionMessage(playerid, 20.0, "inserts the keys and closes the cell.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1494.41210938, -1764.90002441, 3284.25048828)) //Cell1
		{
		    MoveObject(cell1, 1494.41210938, -1764.90002441, 3284.25048828, 0.50);
		    PlayerActionMessage(playerid, 20.0, "inserts the keys and closes the cell.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1497.61132812, -1764.90002441, 3284.25048828)) //Cell2
		{
		    MoveObject(cell2, 1497.61132812, -1764.90002441, 3284.25048828, 0.50);
		    PlayerActionMessage(playerid, 20.0, "inserts the keys and closes the cell.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1500.81445312, -1764.90002441, 3284.25048828)) //Cell3
		{
		    MoveObject(cell3, 1500.81445312, -1764.90002441, 3284.25048828, 0.50);
		    PlayerActionMessage(playerid, 20.0, "inserts the keys and closes the cell.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1500.81994629, -1761.51000977, 3284.25048828)) //Cell4
		{
		    MoveObject(cell4, 1500.81994629, -1761.51000977, 3284.25048828, 0.50);
		    PlayerActionMessage(playerid, 20.0, "inserts the keys and closes the cell.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1491.22094727, -1761.50000000, 3284.25048828)) //Cell5
		{
		    MoveObject(cell5, 1491.22094727, -1761.50000000, 3284.25048828, 0.50);
		    PlayerActionMessage(playerid, 20.0, "inserts the keys and closes the cell.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1494.41894531, -1761.51000977, 3284.25048828)) //Cell6
		{
		    MoveObject(cell6, 1494.41894531, -1761.51000977, 3284.25048828, 0.50);
		    PlayerActionMessage(playerid, 20.0, "inserts the keys and closes the cell.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1497.61999512, -1761.51000977, 3284.25048828)) //Cell7
		{
		    MoveObject(cell7, 1497.61999512, -1761.51000977, 3284.25048828, 0.50);
		    PlayerActionMessage(playerid, 20.0, "inserts the keys and closes the cell.");
		} else return SCM(playerid, COLOR_LIGHTRED, "[Error:] You're not by any cell.");
	} else return SCM(playerid, COLOR_LIGHTRED, "[Error:] You're not a police officer.");
	return 1;
}

CMD:opendoor(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 2)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 253.19176, 109.61185, 1002.21490)) //Door 0
		{
		    MoveObject(door0, 253.19176, 109.61185, 1002.21490, 0.50, 0.00000, 0.00000, 0.17999);
		    PlayerActionMessage(playerid, 20.0, "unlocks and opens the door.");

		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 239.62959, 118.09150, 1002.21490)) //Door 1
		{
		    MoveObject(door1, 239.62959, 118.09150, 1002.21490, 0.50, 0.00000, 0.00000, -179.15996);
		    PlayerActionMessage(playerid, 20.0, "unlocks and opens the door.");

		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 239.55771, 125.59232, 1002.21490)) //Door 2
		{
		    MoveObject(door2, 239.55771, 125.59232, 1002.21490, 0.50, 0.00000, 0.00000, -182.57994);
		    PlayerActionMessage(playerid, 20.0, "unlocks and opens the door.");

		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 253.20477, 125.75697, 1002.21490)) //Door 3
		{
		    MoveObject(door3, 253.20477, 125.75697, 1002.21490, 0.50, 0.00000, 0.00000, -0.06001);
		    PlayerActionMessage(playerid, 20.0, "unlocks and opens the door.");
		} else return SCM(playerid, COLOR_LIGHTRED, "[Error:] You're not by any door.");
	} else return SCM(playerid, COLOR_LIGHTRED, "[Error:] You're not a police officer.");
	return 1;
}
	
CMD:closedoor(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 2)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 253.19176, 109.61185, 1002.21490)) //Door 0
		{
		    MoveObject(door0, 253.19176, 109.61185, 1002.21490, 0.50, 0.00000, 0.00000, -90.12001);
		    PlayerActionMessage(playerid, 20.0, "closes the door and locks it.");
		}
	 	else if(IsPlayerInRangeOfPoint(playerid, 2.0, 239.62959, 118.09150, 1002.21490)) //Door 1
		{
		    MoveObject(door1, 239.62959, 118.09150, 1002.21490, 0.50, 0.00000, 0.00000, -90.12000);
  			PlayerActionMessage(playerid, 20.0, "closes the door and locks it.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 239.55771, 125.59232, 1002.21490)) //Door 2
		{
		    MoveObject(door2, 239.55771, 125.59232, 1002.21490, 0.50, 0.00000, 0.00000, -90.12000);
		    PlayerActionMessage(playerid, 20.0, "closes the door and locks it.");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 253.20477, 125.75697, 1002.21490)) //Door 3
		{
		    MoveObject(door3, 253.20477, 125.75697, 1002.21490, 0.50, 0.00000, 0.00000, -90.12000);
		    PlayerActionMessage(playerid, 20.0, "closes the door and locks it.");
		} else return SCM(playerid, COLOR_LIGHTRED, "[Error:] You're not by any door.");
	} else return SCM(playerid, COLOR_LIGHTRED, "[Error:] You're not a police officer.");
	return 1;
}

/*

	[=Administrator Commands=]

*/


CMD:givemoney(playerid, params[])
{
    new
	id, cash, string[128];

    if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, COLOR_GREY, "You're not authorized to use that command.");
    if(sscanf(params, "ui", id, cash)) return SCM(playerid, COLOR_GREY, "[Usage:] /givemoney [playerid/partofname] [amount].");
    if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_LIGHTRED, "That player is not connected.");

	GivePlayerMoney(id, cash);

	format(string, sizeof(string), "AdmCmd: %s has given %s $%d.", GetName(playerid), GetName(id), cash);
	ABroadCast(COLOR_LIGHTRED, string, 1);
	format(string, sizeof(string), "AdmCmd: You have received $%d from administrator %s.", cash, GetName(playerid));
	SendClientMessage(id, COLOR_LIGHTRED, string);
	
	// Logging admin givemoney
    new givemoneystring[256];
    new playername[MAX_PLAYER_NAME];
	new targetname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	GetPlayerName(id, targetname, sizeof(targetname));
	
	new Hour, Minute, Second;
	gettime(Hour, Minute, Second);

	format(givemoneystring, sizeof(givemoneystring), "[%d:%d:%d] Admin %s has given $%d to %s.", Hour, Minute, Second, playername, cash, targetname);
	GiveMoneyLog(givemoneystring);
	// -------------------------------------------------------
    return 1;
}

CMD:setmoney(playerid, params[])
{
    new
	id, cash, string[128];

    if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, COLOR_GREY, "You're not authorized to use that command.");
    if(sscanf(params, "ui", id, cash)) return SCM(playerid, COLOR_GREY, "[Usage:] /setmoney [playerid/partofname] [amount].");
    if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_LIGHTRED, "That player is not connected.");

    ResetPlayerMoney(id);
	GivePlayerMoney(id, cash);

	format(string, sizeof(string), "AdmCmd: %s has set %s's money to $%d.", GetName(playerid), GetName(id), cash);
	ABroadCast(COLOR_LIGHTRED, string, 1);
	format(string, sizeof(string), "AdmCmd: Your money has been set to $%d by administrator %s.", cash, GetName(playerid));
	SendClientMessage(id, COLOR_LIGHTRED, string);
	
	// Logging admin givemoney
    new setmoneystring[256];
    new playername[MAX_PLAYER_NAME];
	new targetname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	GetPlayerName(id, targetname, sizeof(targetname));
	
	new Hour, Minute, Second;
	gettime(Hour, Minute, Second);

	format(setmoneystring, sizeof(setmoneystring), "[%d:%d:%d] Admin %s has set %s's money to $%d.", Hour, Minute, Second, playername, targetname, cash);
	SetMoneyLog(setmoneystring);
	// -------------------------------------------------------
    return 1;
}

CMD:settime(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_LIGHTRED, "You can't do this.");
    if ( isnull ( params ) ) return SendClientMessage( playerid, -1, #[Usage:] /settime [ID]. );
    SetWorldTime( strval ( params ) );
    return true;
}

CMD:setweather(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_LIGHTRED, "You can't do this.");
    if ( isnull ( params ) ) return SendClientMessage( playerid, -1, #[Usage:] /setweather [ID]. );
    SetWeather( strval ( params ) );
    return true;
}

CMD:nos(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_LIGHTRED, "You can't do this.");
	if(IsPlayerInAnyVehicle(playerid))
 	{
  		AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
    	SendClientMessage(playerid, COLOR_LIGHTGREEN, "Nos installed.");
 	}
    return 1;
}

CMD:restart(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, COLOR_GREY, "You're not authorized to use that command.");
	{
        foreach(new i : Player)
        {
            OnPlayerDataSave(i);
        }
        SetTimer("ServerRestart", 60000, false);
        SendClientMessageToAll(COLOR_LIGHTRED, "[SERVER:] The server will restart in 60 seconds.");
    }
    return 1;
}

CMD:seenames(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "You're not authorized to use that command.");
	{
		for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
		{
			ShowPlayerNameTagForPlayer(playerid, i, 1);
		}
    }
    return 1;
}

/*

COMMAND:spectate(playerid, params[])
{
	new id;// This will hold the ID of the player you are going to be spectating.
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", id))return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /spectate [ID]");// Now this is where we use sscanf to check if the params were filled, if not we'll ask you to fill them
	if(id == playerid)return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't spectate yourself.");// Just making sure.
	if(id == INVALID_PLAYER_ID)return SendClientMessage(playerid, COLOR_GREY, "That player is not online.");// This is to ensure that you don't fill the param with an invalid player id.
	if(IsSpecing[playerid] == 1)return SendClientMessage(playerid, COLOR_LIGHTRED, "You are already specing someone.");// This will make you not automatically spec someone else by mistake.
	GetPlayerPos(playerid, SpecX[playerid], SpecY[playerid], SpecZ[playerid]);// This is getting and saving the player's position in a variable so they'll respawn at the same place they typed '/spec'
	if(IsSpecing[id] == 1)return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is spectating someone.");
	if(PlayerLogged[id] == false)return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not logged in.");
	Inter[playerid] = GetPlayerInterior(playerid);// Getting and saving the interior.
	Previous_Colour[playerid] = GetPlayerColor(playerid);
	vWorld[playerid] = GetPlayerVirtualWorld(playerid);//Getting and saving the virtual world.
	TogglePlayerSpectating(playerid, true);// Now before we use any of the 3 functions listed above, we need to use this one. It turns the spectating mode on.
	if(IsPlayerInAnyVehicle(id))//Checking if the player is in a vehicle.
	{
	    if(GetPlayerInterior(id) > 0)//If the player's interior is more than 0 (the default) then.....
	    {
			SetPlayerInterior(playerid, GetPlayerInterior(id));//.....set the spectator's interior to that of the player being spectated.
		}
		if(GetPlayerVirtualWorld(id) > 0)//If the player's virtual world is more than 0 (the default) then.....
		{
		    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));//.....set the spectator's virtual world to that of the player being spectated.
		}
	    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(id));// Now remember we checked if the player is in a vehicle, well if they're in a vehicle then we'll spec the vehicle.
	}
	else// If they're not in a vehicle, then we'll spec the player.
	{
	    if(GetPlayerInterior(id) > 0)
	    {
			SetPlayerInterior(playerid, GetPlayerInterior(id));
		}
		if(GetPlayerVirtualWorld(id) > 0)
		{
		    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));
		}
	    PlayerSpectatePlayer(playerid, id);// Letting the spectator spec the person and not a vehicle.
	}
	GetPlayerName(id, Name, sizeof(Name));//Getting the name of the player being spectated.
	IsSpecing[playerid] = 1;// Just saying that the spectator has begun to spectate someone.
	IsBeingSpeced[id] = 1;// Just saying that a player is being spectated (You'll see where this comes in)
	spectatorid[playerid] = id;// Saving the spectator's id into this variable.
 	return 1;// Returning 1 - saying that the command has been sent.
}

COMMAND:spectateoff(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(IsSpecing[playerid] == 0)return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not spectating anyone.");
	SetPlayerColor(playerid, Previous_Colour[playerid]);
	TogglePlayerSpectating(playerid, 0);//Toggling spectate mode, off. Note: Once this is called, the player will be spawned, there we'll need to reset their positions, virtual world and interior to where they typed '/spec'
	return 1;
}

*/

COMMAND:sendtols(playerid, params[])
{
	new id, string[128];
    if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "You're not authorized to use that command.");
    if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "[Usage:] /sendtols [playerid/partofname].");
	format(string, sizeof(string), "AdmCmd: %s has sent you to Los Santos.", GetName(playerid));
	SendClientMessage(id, COLOR_LIGHTRED, string);
	format(string, sizeof(string), "AdmCmd: You have sent %s to Los Santos.", GetName(id));
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	SetPlayerPos(id, 1522.4865, -1677.2191, 13.5469);
	SetPlayerVirtualWorld(id, 0);
	SetPlayerInterior(id, 0);
	return 1;
}

COMMAND:gotols(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "You're not authorized to use that command.");
	SetPlayerPos(playerid, 1522.4865, -1677.2191, 13.5469);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	return 1;
}
	
CMD:warn(playerid, params[])
{
    new
	id, reason[124], string[124], plrIP[16];

    if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_GREY, "You're not authorized to use that command.");
    if(sscanf(params, "us[124]", id, reason)) return SCM(playerid, COLOR_GREY, "[Usage:] /warn [playerid/partofname] [reason].");
    if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_LIGHTRED, "That player is not connected.");
    if(Warns[playerid] >= 5)
	{
		format(string, sizeof(string), "AdmCmd: %s was banned by %s. Reason: 5 warnings.", GetName(playerid), GetName(id));
		SendClientMessageToAll(COLOR_LIGHTRED, string);
		GetPlayerIp(id, plrIP, sizeof(plrIP));
		SendClientMessage(id, COLOR_LIGHTRED, "|___________[BAN INFO]___________|");
		format(string, sizeof(string), "Your name: %s.", GetName(id));
		SendClientMessage(id, COLOR_LIGHTRED, string);
		format(string, sizeof(string), "Your IP: %s.", plrIP);
		SendClientMessage(id, COLOR_LIGHTRED, string);
		format(string, sizeof(string), "Banned by: %s.", GetName(playerid));
		SendClientMessage(id, COLOR_LIGHTRED, string);
		SendClientMessage(id, COLOR_LIGHTRED, "Reason: 5 warnings.");
		SendClientMessage(id, COLOR_LIGHTRED, "|___________[BAN INFO]___________|");
		SetTimerEx("UnsetBan", 500, 0, "i", id);
  	}
	Warns[playerid] += 1;

	format(string, sizeof(string), "AdmCmd: %s was warned by %s, reason: %s", GetName(id), GetName(playerid), reason);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	return 1;
}

CMD:ban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
 		new
 		PID, reason[64], str[128], plrIP[16];

     	if(sscanf(params, "us[64]", PID, reason)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /ban [playerid] [reason]");

		if(!IsPlayerConnected(PID))
		return SendClientMessage(playerid, COLOR_GREY, "That player is not connected.");

		format(str, sizeof(str), "AdmCmd: %s has been banned by administrator %s. Reason: %s ", GetName(PID), GetName(playerid), reason);
        SendClientMessageToAll(COLOR_LIGHTRED, str);

        GetPlayerIp(playerid, plrIP, sizeof(plrIP));

        SendClientMessage(PID, COLOR_LIGHTRED, "|___________[BAN INFO]___________|");
        format(str, sizeof(str), "Your name: %s.", GetName(PID));
        SendClientMessage(PID, COLOR_LIGHTRED, str);
        format(str, sizeof(str), "Your ip is: %s.", plrIP);
        SendClientMessage(PID, COLOR_LIGHTRED, str);
        format(str, sizeof(str), "You were banned by: %s.", GetName(playerid));
        SendClientMessage(PID, COLOR_LIGHTRED, str);
        format(str, sizeof(str), "You were banned for: %s.", reason);
        SendClientMessage(PID, COLOR_LIGHTRED, str);
        SendClientMessage(PID, COLOR_LIGHTRED, "|___________[BAN INFO]___________|");
        SetTimerEx("UnsetBan", 500, 0, "i", PID);
		PlayerInfo[PID][pBanned] = 1;
		
		// Logging bans
    	new banstring[256];
    	
   		new Hour, Minute, Second;
		gettime(Hour, Minute, Second);

		format(banstring, sizeof(banstring), "[%d:%d%d] AdmCmd: %s has been banned by administrator %s. Reason: %s ", Hour, Minute, Second, GetName(PID), GetName(playerid), reason);
		BanLog(banstring);
		// -------------------------------------------------------

	}
		else
  	{
   		SendClientMessage(playerid, COLOR_GREY, "You're not authorized to use that command.");
	}
	return 1;
}

CMD:unbanip(playerid, params[])
{
    new
	ip[32], dformat[64];

    if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    if(sscanf(params, "s[32]", ip)) return SCM(playerid, COLOR_GREY, "[Usage:] /unbanip [IP]");
    format(dformat, sizeof dformat, "unbanip %s", ip);
    SendRconCommand(dformat);
    return 1;
}

CMD:offlineban(playerid, params[])
{
    new targetname[24], filestring[79];
    if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    if(sscanf(params, "s[24]", targetname)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /offlineban [playerName]");
    format(filestring, sizeof(filestring), "/users/%s.ini", targetname);
    if(!fexist(filestring)) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player does not exist.");
    else
    {
        new INI:File = INI_Open(filestring);
        INI_SetTag(File, "data");
        INI_WriteInt(File, "Banned", 1);
        INI_Close(File);
        new done[128];
        format(done, sizeof(done), "You have successfully banned player %s.", targetname);
        SendClientMessage(playerid, COLOR_LIGHTRED, done);
    }
    return 1;
}

CMD:unban(playerid, params[])
{
    new tname[24];
    if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    if(sscanf(params, "s[24]", tname)) return SendClientMessage(playerid, COLOR_LIGHTRED, "[Usage:] /unban [playername] ");
    new filestring[79];
    format(filestring, sizeof(filestring), "/users/%s.ini", tname);
    if(!fexist(filestring)) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player does not exist.");
    else
    {
        new INI:File = INI_Open(filestring);
        INI_SetTag(File, "data");
        INI_WriteInt(File, "Banned", 0);
        INI_Close(File);
        INI_ParseFile(filestring, "LoadIP_%s", .bExtra = true , .extra = playerid);
        new cmdstring[44];
        format(cmdstring, sizeof(cmdstring), "unbanip %s", PlayerInfo[playerid][BannedIP]);
        SendRconCommand(cmdstring);
        SendRconCommand("reloadbans");
        new done[128];
        format(done, sizeof(done), "AdmCmd: You have successfully unbanned %s.", tname);
        SendClientMessage(playerid, COLOR_LIGHTRED, done);
    }
    return 1;
}

CMD:adminduty(playerid, params[])
{
	new string[128];

    if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
   	if(aDuty[playerid] == 0)
	{
		aDuty[playerid] = 1;
		Previous_Colour[playerid] = GetPlayerColor(playerid);
  		format(string, sizeof(string), "AmdCmd: %s has went on adminduty.", GetName(playerid));
    	ABroadCast(COLOR_LIGHTRED, string, 1);
		SetPlayerColor(playerid, COLOR_GREEN);
	}
	else if(aDuty[playerid] == 1)
	{
		aDuty[playerid] = 0;
		format(string, sizeof(string), "AmdCmd: %s has went off adminduty.", GetName(playerid));
    	ABroadCast(COLOR_LIGHTRED, string, 1);
		SetPlayerColor(playerid, COLOR_WHITE);
	}
	return 1;
}

CMD:tduty(playerid, params[])
{
	new string[128];

    if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
   	if(tDuty[playerid] == 0)
	{
		tDuty[playerid] = 1;
		Previous_Colour[playerid] = GetPlayerColor(playerid);
  		format(string, sizeof(string), "AmdCmd: %s has went on testerduty.", GetName(playerid));
    	ABroadCast(COLOR_LIGHTRED, string, 1);
		SetPlayerColor(playerid, COLOR_BROWN);
	}
	else if(tDuty[playerid] == 1)
	{
		tDuty[playerid] = 0;
		format(string, sizeof(string), "AmdCmd: %s has went off testerduty.", GetName(playerid));
    	ABroadCast(COLOR_LIGHTRED, string, 1);
		SetPlayerColor(playerid, Previous_Colour[playerid]);
	}
	return 1;
}

COMMAND:ajail(playerid, params[])
{
    new
	criminal, time, string[128], reason[128];

    if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    if(sscanf(params, "uds[128]", criminal, time, reason)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /ajail [ID] [minutes] [reason].");
    if(criminal == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");

   	format(string, sizeof(string), "AdmCmd: %s has been admin-jailed by %s for %d minutes. Reason: %s", GetName(criminal), GetName(playerid), time, reason);
 	SendClientMessageToAll(COLOR_LIGHTRED, string);

   	SetPlayerPos(criminal, 2525.1736, -1673.8074, 14.8601);
	SetPlayerVirtualWorld(criminal, 0);
	PlayerInfo[criminal][pJailed] = 1;
	
	PlayerInfo[criminal][pInJailTime] = time*60;
   	return 1;
}

CMD:setskin(playerid, params[])
{
    new
	id, skin, string[128];

    if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    else if(sscanf(params, "ui", id, skin)) return SCM(playerid, COLOR_GREY, "[Usage:] /setskin [playerid/partofname] [skinID].");
    else if(skin > 299 || skin < 1) return SCM(playerid, COLOR_LIGHTRED, "Invalid skin ID.  [0-299].");
    else if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_LIGHTRED, "That player is not connected.");

    format(string, sizeof(string), "AdmCmd: Your skin has been changed by %s.", GetName(playerid));
    SendClientMessage(id, COLOR_LIGHTRED, string);
    SetPlayerSkin(id, skin);

    PlayerInfo[playerid][pSkin] = skin;
    return 1;
}

CMD:asetleader(playerid, params[])
{
	new
	id, pID, string[128];
    if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    if(sscanf(params, "du", id, pID)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /asetleader [factionID] [playerid/partofname]");
    if(!IsPlayerConnected(pID)) return SCM(playerid, COLOR_LIGHTRED, "That player is not connected.");
	if(id < 1 || id > 10 ) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction ID.");

	FactionInfo[id][fLeader] = GetName(pID);
	PlayerInfo[pID][fRank] = 6;
	PlayerInfo[pID][pFaction] = id;
	FactionInfo[id][fMembers] += 1;
 	new file4[40];
 	format(file4, sizeof(file4), FPATH, id);
 	new INI:File = INI_Open(file4);
 	INI_SetTag(File, "data");
 	INI_WriteString(File, "Leader", FactionInfo[id][fLeader]);
 	INI_WriteInt(File, "Members", FactionInfo[id][fMembers]);
 	INI_Close(File);
	format(string, sizeof(string), "You have set %s as the leader for %s.", GetName(pID), FactionInfo[id][fName]);
	SendClientMessage(playerid, COLOR_WHITE, string);
    return 1;
}

CMD:factioninfo(playerid, params[])
{
	new
	string[128], string2[256], id;

	if(sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /factioninfo [factionID]");
	if(id < 1 || id > 10 ) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction ID.");

	SCM(playerid, COLOR_WHITE, "_______________________________[FACTION INFO]_______________________________");
	format(string, sizeof(string), "Name: %s", FactionInfo[id][fName]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Members: %d", FactionInfo[id][fMembers]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string2, sizeof(string2), "Information: %s", FactionInfo[id][fInformation]);
	SendClientMessage(playerid, COLOR_WHITE, string2);
	return 1;
}

CMD:invite(playerid, params[])
{
	new
	pID;

	if(sscanf(params, "ud", pID)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /invite [playerid/partofname]");
 	if(!IsPlayerConnected(pID)) return SCM(playerid, COLOR_LIGHTRED, "That player is not connected.");
 	if(PlayerInfo[playerid][fRank] > 2)
 	{
 	    new string[128];
 	    new faction = PlayerInfo[playerid][pFaction];
		format(string, sizeof(string), "You have been invited to join %s. (/acceptinvite)", FactionInfo[faction][fName]);
		SendClientMessage(pID, COLOR_FACTIONCHAT, string);
		format(string, sizeof(string), "You have sent an invitation to %s.", GetName(pID));
		SendClientMessage(playerid, COLOR_FACTIONCHAT, string);
		factionInvited[pID] = true;
		Player_Invited[pID] = playerid;
	}
	return 1;
}

CMD:acceptinvite(playerid, params[])
{
	if(factionInvited[playerid] == false) return SCM(playerid, COLOR_LIGHTRED, "You're not invited to any faction.");

	new faction = PlayerInfo[Player_Invited[playerid]][pFaction];
	new wstring[128];

 	PlayerInfo[playerid][pFaction] = PlayerInfo[Player_Invited[playerid]][pFaction];
 	PlayerInfo[playerid][fRank] = 1;
	FactionInfo[faction][fMembers] += 1;

	format(wstring, sizeof(wstring), "[Faction:] %s has joined the faction.", GetName(playerid));
	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_FACTIONCHAT, wstring);
	return 1;
}

CMD:afactionrankname(playerid, params[])
{
	new
	rankname[64], id, rank, string[128];
    if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    if(sscanf(params, "dds[128]", id, rank, rankname)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /afactionrankname [factionID] [rank] [rankname]");
    if(id < 1 || id > 10 ) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction ID.");
    if(id < 1 || id > 6 ) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction rank.");

	if(rank == 1)
	{
		FactionInfo[id][fRank1] = rankname;
		new file4[40];
		format(file4, sizeof(file4), FPATH, id);
		new INI:File = INI_Open(file4);
		INI_SetTag(File, "data");
		INI_WriteString(File, "Rank1", FactionInfo[id][fRank1]);
		INI_Close(File);
		format(string, sizeof(string), "You have changed the name of this rank to %s.", rankname);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if(rank == 2)
 	{
	 	FactionInfo[id][fRank2] = rankname;
	 	new file4[40];
	 	format(file4, sizeof(file4), FPATH, id);
	 	new INI:File = INI_Open(file4);
	 	INI_SetTag(File, "data");
	 	INI_WriteString(File, "Rank2", FactionInfo[id][fRank2]);
	 	INI_Close(File);
		format(string, sizeof(string), "You have changed the name of this rank to %s.", rankname);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if(rank == 3)
 	{
		FactionInfo[id][fRank3] = rankname;
 		new file4[40];
		format(file4, sizeof(file4), FPATH, id);
		new INI:File = INI_Open(file4);
		INI_SetTag(File, "data");
		INI_WriteString(File, "Rank3", FactionInfo[id][fRank3]);
		INI_Close(File);
		format(string, sizeof(string), "You have changed the name of this rank to %s.", rankname);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if(rank == 4)
 	{
		FactionInfo[id][fRank4] = rankname;
		new file4[40];
		format(file4, sizeof(file4), FPATH, id);
		new INI:File = INI_Open(file4);
		INI_SetTag(File, "data");
		INI_WriteString(File, "Rank4", FactionInfo[id][fRank4]);
		INI_Close(File);
		format(string, sizeof(string), "You have changed the name of this rank to %s.", rankname);
		SendClientMessage(playerid, COLOR_WHITE, string);
    }
   	else if(rank == 5)
 	{
		FactionInfo[id][fRank5] = rankname;
		new file4[40];
		format(file4, sizeof(file4), FPATH, id);
		new INI:File = INI_Open(file4);
		INI_SetTag(File, "data");
		INI_WriteString(File, "Rank5", FactionInfo[id][fRank5]);
		INI_Close(File);
		format(string, sizeof(string), "You have changed the name of this rank to %s.", rankname);
		SendClientMessage(playerid, COLOR_WHITE, string);
    }
   	else if(rank == 6)
 	{
		FactionInfo[id][fRank6] = rankname;
		new file4[40];
		format(file4, sizeof(file4), FPATH, id);
		new INI:File = INI_Open(file4);
		INI_SetTag(File, "data");
		INI_WriteString(File, "Rank6", FactionInfo[id][fRank6]);
		INI_Close(File);
		format(string, sizeof(string), "You have changed the name of this rank to %s.", rankname);
		SendClientMessage(playerid, COLOR_WHITE, string);
    }
    return 1;
}

CMD:afactionname(playerid, params[])
{
	new
	name[128], id, string[128];
    if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    if(sscanf(params, "ds[128]", id, name)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /afactionname [factionID] [name]");
    if(id < 1 || id > 10 ) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction ID.");

	FactionInfo[id][fName] = name;
	new file4[40];
	format(file4, sizeof(file4), FPATH, id);
	new INI:File = INI_Open(file4);
	INI_SetTag(File, "data");
	INI_WriteString(File, "Name", FactionInfo[id][fName]);
	INI_Close(File);

	format(string, sizeof(string), "You have changed the name of this faction to %s.", name);
	SendClientMessage(playerid, COLOR_WHITE, string);
    return 1;
}

CMD:afactioninfo(playerid, params[])
{
	new
	id, string[128], info[256];
    if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    if(sscanf(params, "ds[128]", id, info)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /afactioninfo [factionID] [information]");
    if(id < 1 || id > 10 ) return SCM(playerid, COLOR_LIGHTRED, "Invalid faction ID.");

	FactionInfo[id][fInformation] = info;
	new file4[40];
	format(file4, sizeof(file4), FPATH, id);
	new INI:File = INI_Open(file4);
	INI_SetTag(File, "data");
	INI_WriteString(File, "Information", FactionInfo[id][fInformation]);
	INI_Close(File);
	format(string, sizeof(string), "You have successfully added the faction information about %s.", FactionInfo[id][fName]);
	SendClientMessage(playerid, COLOR_WHITE, string);
    return 1;
}

CMD:faction(playerid, params[])
{
	new
	wstring[128], msg[128];
    if(sscanf(params, "s[128]", msg)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /(f)action [message]");
	if(PlayerInfo[playerid][fRank] < 1) return SCM(playerid, COLOR_LIGHTRED, "You're not in any faction.");

	new faction = PlayerInfo[playerid][pFaction];
	new rank = PlayerInfo[playerid][fRank];

	if(rank == 1)
	{
		 format(wstring, sizeof(wstring), "(( [Faction:] %s %s: %s ))", 	FactionInfo[faction][fRank1], GetName(playerid), msg);
		 SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_FACTIONCHAT, wstring);
	}
	else if(rank == 2)
	{
		 format(wstring, sizeof(wstring), "(( [Faction:] %s %s: %s ))", 	FactionInfo[faction][fRank2], GetName(playerid), msg);
		 SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_FACTIONCHAT, wstring);
	}
	else if(rank == 3)
	{
		 format(wstring, sizeof(wstring), "(( [Faction:] %s %s: %s ))", 	FactionInfo[faction][fRank3], GetName(playerid), msg);
		 SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_FACTIONCHAT, wstring);
	}
	else if(rank == 4)
	{
		 format(wstring, sizeof(wstring), "(( [Faction:] %s %s: %s ))", 	FactionInfo[faction][fRank4], GetName(playerid), msg);
		 SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_FACTIONCHAT, wstring);
	}
	else if(rank == 5)
	{
		 format(wstring, sizeof(wstring), "(( [Faction:] %s %s: %s ))", 	FactionInfo[faction][fRank5], GetName(playerid), msg);
		 SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_FACTIONCHAT, wstring);
	}
	else if(rank == 6)
	{
		 format(wstring, sizeof(wstring), "(( [Faction:] %s %s: %s ))", 	FactionInfo[faction][fRank6], GetName(playerid), msg);
		 SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_FACTIONCHAT, wstring);
	}
    return 1;
}

CMD:setrank(playerid, params[])
{
	new
	pID, rank;
    if(sscanf(params, "ud", pID, rank)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /setrank [playerid/partofname] [rank]");
	if(PlayerInfo[playerid][fRank] < 5) return SCM(playerid, COLOR_LIGHTRED, "You're not authorized to use this command.");
	if(rank < 1 || rank > 6 ) return SCM(playerid, COLOR_LIGHTRED, "Invalid rank.");

	PlayerInfo[pID][fRank] = rank;
    return 1;
}

CMD:ageup(playerid, params[])
{
	SCM(playerid, COLOR_LIGHTRED, "This will make your character one year older. /acceptageup to confirm.");
	
	acceptageup[playerid] = 1;
    return 1;
}

CMD:acceptageup(playerid, params[])
{
	SCM(playerid, COLOR_GREEN, "Your character has aged one year.");

	PlayerInfo[playerid][pAge] += 1;
    return 1;
}

CMD:factionkick(playerid, params[])
{
	new
	pID;
	new wstring[128];
	new faction = PlayerInfo[pID][pFaction];
    if(sscanf(params, "u", pID)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /factionkick [playerid/partofname]");
	if(PlayerInfo[playerid][fRank] < 3) return SCM(playerid, COLOR_LIGHTRED, "You're not authorized to use this command.");

	PlayerInfo[pID][fRank] = 0;
	PlayerInfo[pID][pFaction] = 255;
	FactionInfo[faction][fMembers] -= 1;
	
	SCM(pID, COLOR_FACTIONCHAT, "You have been kicked from your faction.");
	
 	format(wstring, sizeof(wstring), "You have kicked %s from the faction.", GetName(pID));
 	SendClientMessage(playerid, COLOR_FACTIONCHAT, wstring);
 	
  	new file4[40];
    format(file4, sizeof(file4), FPATH, faction);
    new INI:File = INI_Open(file4);
    INI_SetTag(File, "data");
    INI_WriteInt(File, "Members", FactionInfo[faction][fMembers]);
    INI_Close(File);
    return 1;
}

CMD:leavefaction(playerid, params[])
{
	PlayerInfo[playerid][fRank] = 0;
	new faction = PlayerInfo[playerid][pFaction];
	FactionInfo[faction][fMembers] -= 1;
	PlayerInfo[playerid][pFaction] = 255;
	SCM(playerid, COLOR_FACTIONCHAT, "You have left your faction.");
	
	new file4[40];
    format(file4, sizeof(file4), FPATH, faction);
    new INI:File = INI_Open(file4);
    INI_SetTag(File, "data");
    INI_WriteInt(File, "Members", FactionInfo[faction][fMembers]);
    INI_Close(File);
    return 1;
}

CMD:makecop(playerid, params[])
{
	new rank, PID;
    if(sscanf(params, "ud", PID, rank)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /makecop [id/playername] [rank]");
	PlayerInfo[PID][fRank] = rank;
	return 1;
}

COMMAND:freeze(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
    {
    	new
		Target, astring[128];

    	if(sscanf(params, "u", Target)) SendClientMessage(playerid, COLOR_GREY, "[Usage:] /freeze [playerid]");
    	if(!IsPlayerConnected(Target))
    	return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");

    	if(!sscanf(params, "u", Target))
     	{
      		if(PlayerInfo[Target][pAdmin] > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't perform this action on adminstrators with a higher level than you.");

   			format(astring, sizeof(astring), "AmdCmd: Administrator %s has frozen %s.", GetName(playerid), GetName(Target));
   			SendClientMessageToAll(COLOR_LIGHTRED, astring);
		   	TogglePlayerControllable(Target, 0);
            }
    }
    else return SendClientMessage(playerid, COLOR_GREY, "You're not authorized to use this command.");
    return 1;
}

COMMAND:unfreeze(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
    {
		new
		Target, astring[128];

     	if(sscanf(params, "u", Target)) SendClientMessage(playerid, COLOR_GREY, "[Usage:] /unfreeze [playerid]");
     	if(!IsPlayerConnected(Target))
     	return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");

     	if(!sscanf(params, "u", Target))
      	{
       		if(PlayerInfo[Target][pAdmin] > PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR: You cant perform this on Admins that are higher than your level!");

       		format(astring, sizeof(astring), "AmdCmd: Administrator %s has unfrozen %s.", GetName(playerid), GetName(Target));
       		SendClientMessageToAll(COLOR_LIGHTRED, astring);
       		TogglePlayerControllable(Target, 1);
       		isAlive[Target] = true;
       		Delete3DTextLabel(deathlabel[Target]);
       		
			sInfo[playerid][Misc] = 0;
			sInfo[playerid][Head] = 0;
			sInfo[playerid][Chest] = 0;
			sInfo[playerid][Crotch] = 0;
			sInfo[playerid][LArm] = 0;
			sInfo[playerid][RArm] = 0;
			sInfo[playerid][LLeg] = 0;
			sInfo[playerid][RLeg] = 0;
			killed[playerid] = 0;
         }
	}
    else return SendClientMessage(playerid, COLOR_GREY, "You're not authorized to use this command.");
    return 1;
}

CMD:makeadmin(playerid, params[])
{
    new
	pID, value, string[124];

    if(PlayerInfo[playerid][pAdmin] < 4 && !IsPlayerAdmin(playerid)) return SCM( playerid, COLOR_GREY, "You're not authorized to use this command.");
    else if (sscanf(params, "ui", pID, value)) return SCM(playerid, COLOR_GREY, "[Usage:] /makeadmin [playerid/partofname] [level 1-4].");
    else if (value < 0 || value > 4) return SCM(playerid, COLOR_LIGHTRED, "Invalid administrator level, 0-4.");
    else if(!IsPlayerConnected(pID)) return SCM(playerid, COLOR_LIGHTRED, "That player is not connected.");

 	format(string, sizeof(string), "AdmCmd: %s has set %s's admin-level to %d.", GetName(playerid), GetName(pID), value);
 	SendClientMessageToAll(COLOR_LIGHTRED, string);
	PlayerInfo[pID][pAdmin] = value;
    return 1;
}

CMD:makedonator(playerid, params[])
{
    new
	pID, value, string[124];

    if(PlayerInfo[playerid][pAdmin] < 2) return SCM( playerid, COLOR_GREY, "You're not authorized to use this command.");
    else if (sscanf(params, "ui", pID, value)) return SCM(playerid, COLOR_GREY, "[Usage:] /makedonator [playerid/partofname] [level 0-3].");
    else if (value < 0 || value > 3) return SCM(playerid, COLOR_LIGHTRED, "Invalid donator level, 0-3.");
    else if(!IsPlayerConnected(pID)) return SCM(playerid, COLOR_LIGHTRED, "That player is not connected.");

 	format(string, sizeof(string), "AdmCmd: %s has set %s's donator-level to %d.", GetName(playerid), GetName(pID), value);
 	ABroadCast(COLOR_LIGHTRED, string, 1);
	PlayerInfo[pID][pDonator] = value;
	PlayerInfo[pID][pMask] = 1;
    return 1;
}

CMD:gethere(playerid, params[])
{
    new
	ID, Float:x, Float:y, Float:z;

    if(PlayerInfo[playerid][pAdmin] < 2) return SCM( playerid, COLOR_GREY, "You're not authorized to use this command.");
    else if(sscanf(params, "u", ID)) return SCM(playerid, COLOR_GREY, "[Usage:] /gethere [playerid/partofname].");
    else if(!IsPlayerConnected(ID)) return SCM(playerid, COLOR_LIGHTRED, "That player is not connected.");

    if(GetPlayerState(ID)==PLAYER_STATE_DRIVER)
	{
	    GetPlayerPos(playerid, x, y, z);
 		new vehicle = GetPlayerVehicleID(ID);
        SetVehiclePos(vehicle, x+1, y+1, z);
        SetPlayerPos(ID, x+1, y+1, z);
	    PutPlayerInVehicle(ID, vehicle, 0);
	    SetPlayerInterior(ID, GetPlayerInterior(playerid));
	    SetPlayerVirtualWorld(ID, GetPlayerVirtualWorld(playerid));
	    SetVehicleVirtualWorld(vehicle, GetPlayerVirtualWorld(playerid));
	}
	else
	{
 		GetPlayerPos(playerid, x, y, z);
        SetPlayerPos(ID, x+1, y+1, z);
	    SetPlayerInterior(ID, GetPlayerInterior(playerid));
	    SetPlayerVirtualWorld(ID, GetPlayerVirtualWorld(playerid));
	}
    return 1;
}

CMD:goto(playerid, params[])
{
    new
	ID, Float:x, Float:y, Float:z;

    if(PlayerInfo[playerid][pAdmin] < 2) return SCM( playerid, COLOR_GREY, "You're not authorized to use this command.");
    else if(sscanf(params, "u", ID)) return SCM(playerid, COLOR_GREY, "[Usage:] /goto [partofname/playerid].");
    else if(!IsPlayerConnected(ID)) return SCM(playerid, COLOR_LIGHTRED, "That player is not connected.");

    if(GetPlayerState(playerid)==PLAYER_STATE_DRIVER)
	{
	    GetPlayerPos(ID, x, y, z);
 		new vehicle = GetPlayerVehicleID(playerid);
        SetVehiclePos(vehicle, x+1, y+1, z);
        SetPlayerPos(playerid, x+1, y+1, z);
	    PutPlayerInVehicle(playerid, vehicle, 0);
	    SetPlayerInterior(playerid, GetPlayerInterior(ID));
	    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(ID));
	    SetVehicleVirtualWorld(vehicle, GetPlayerVirtualWorld(ID));
	}
	else
	{
 		GetPlayerPos(ID, x, y, z);
        SetPlayerPos(playerid, x+1, y+1, z);
	    SetPlayerInterior(playerid, GetPlayerInterior(ID));
	    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(ID));
	}
    return 1;
}

CMD:arevokeguns(playerid, params[])
{
	new id, str[128];
	if( PlayerInfo[ playerid ][ pAdmin ] < 2 ) return SCM( playerid, COLOR_GREY, "You're not authorized to use this command.");
    if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "[Usage:] /arevokeguns [playerid/partofname].");
    RemoveWeapons(id);
   	format(str, sizeof(str), "AdmCmd: %s has revoked your weapons.", GetName(playerid)); //format the string we've defined to send the message, playername and adminname are used to receive the information about the names
	SendClientMessage(id, COLOR_LIGHTRED, str);
	format(str, sizeof(str), "AdmCmd: You have revoked %s's weapons.", GetName(id)); //format the string we've defined to send the message, playername and adminname are used to receive the information about the names
	SendClientMessage(playerid, COLOR_LIGHTRED, str);
	return 1;
}

CMD:arevokedrugs(playerid, params[])
{
	new id, str[128];
	if( PlayerInfo[ playerid ][ pAdmin ] < 2 ) return SCM( playerid, COLOR_GREY, "You're not authorized to use this command.");
    if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "[Usage:] /arevokedrugs [playerid/partofname].");
    RemoveDrugs(id);
   	format(str, sizeof(str), "AdmCmd: %s has revoked your drugs.", GetName(playerid)); //format the string we've defined to send the message, playername and adminname are used to receive the information about the names
	SendClientMessage(id, COLOR_LIGHTRED, str);
	format(str, sizeof(str), "AdmCmd: You have revoked %s's drugs.", GetName(id)); //format the string we've defined to send the message, playername and adminname are used to receive the information about the names
	SendClientMessage(playerid, COLOR_LIGHTRED, str);
	return 1;
}

CMD:aslap(playerid, params[])
{
	new
	PID, str[128];

	if( PlayerInfo[ playerid ][ pAdmin ] < 2 ) return SCM( playerid, COLOR_GREY, "You're not authorized to use this command.");
	if(sscanf(params, "u", PID)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /aslap [playerid]"); //tell sscanf if the parameters/the syntax is written wrong to return a message (PID and the reason used here)

	if(!IsPlayerConnected(PID)) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected!");

	format(str, sizeof(str), "AdmCmd: %s has been slapped by %s.", GetName(PID), GetName(playerid)); //format the string we've defined to send the message, playername and adminname are used to receive the information about the names
	SendClientMessageToAll(COLOR_LIGHTRED, str); //send that message to all
	
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(PID, X, Y, Z);
	SetPlayerPos(PID, X, Y, Z+4);
	return 1;
}

CMD:sethours(playerid, params[])
{
	new
	PID, str[128], amount;

	if( PlayerInfo[ playerid ][ pAdmin ] < 3 ) return SCM( playerid, COLOR_GREY, "You're not authorized to use this command.");
	if(sscanf(params, "ui", PID, amount)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /sethours [playerid]"); //tell sscanf if the parameters/the syntax is written wrong to return a message (PID and the reason used here)

	if(!IsPlayerConnected(PID)) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected!");

	format(str, sizeof(str), "AdmCmd: %s has set your playing hours to %d.", GetName(PID), amount); //format the string we've defined to send the message, playername and adminname are used to receive the information about the names
	SendClientMessage(playerid, COLOR_LIGHTRED, str);
	
	format(str, sizeof(str), "AdmCmd: You have set %s's playing hours to %d.", GetName(playerid), amount); //format the string we've defined to send the message, playername and adminname are used to receive the information about the names
	SendClientMessage(PID, COLOR_LIGHTRED, str);
	return 1;
}

CMD:kick(playerid, params[])
{
	new
	PID, reason[64], str[128];

	if( PlayerInfo[ playerid ][ pAdmin ] < 1 ) return SCM( playerid, COLOR_GREY, "You're not authorized to use this command.");
	if(sscanf(params, "us[64]", PID, reason)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /kick [playerid] [reason]"); //tell sscanf if the parameters/the syntax is written wrong to return a message (PID and the reason used here)

	if(!IsPlayerConnected(PID)) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected!");

	format(str, sizeof(str), "AdmCmd: %s has been kicked by %s. Reason: %s ", GetName(PID), GetName(playerid), reason); //format the string we've defined to send the message, playername and adminname are used to receive the information about the names
	SendClientMessageToAll(COLOR_LIGHTRED, str); //send that message to all
	SetTimerEx("UnsetKick", 500, 0, "i", PID);
	return 1;
}

CMD:admins(playerid, params[])
{
	if(IsPlayerConnected(playerid))
 	{
  		new count = 0;
  		new string[256];
		SendClientMessage(playerid, COLOR_WHITE, "_____________[ADMINISTRATORS ONLINE]_____________");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
  				if(PlayerInfo[i][pAdmin] > 1)
  				{
					format(string, 256, "Administrator: %s - [Administrator Level: %d]", GetName(i), PlayerInfo[i][pAdmin]);
					SendClientMessage(playerid, COLOR_WHITE, string);
					count++;
				}
			}
		}
		if(count == 0)
		{
			SendClientMessage(playerid, COLOR_WHITE, "[INFO:] Currently no administrators on duty.");
		}
	}
	return 1;
}

CMD:supporters(playerid, params[])
{
	if(IsPlayerConnected(playerid))
 	{
  		new count = 0;
  		new string[256];
		SendClientMessage(playerid, COLOR_WHITE, "_____________[SUPPORTERS ONLINE]_____________");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
  				if(PlayerInfo[i][pAdmin] > 0 && PlayerInfo[i][pAdmin] < 2)
  				{
					format(string, 256, "Supporters: %s", GetName(i));
					SendClientMessage(playerid, COLOR_WHITE, string);
					count++;
				}
			}
		}
		if(count == 0)
		{
			SendClientMessage(playerid, COLOR_WHITE, "[INFO:] Currently there is no supporters online.");
		}
	}
	return 1;
}

CMD:adminchat(playerid, params[])
{
	new
	string[144], text[144];
	if( PlayerInfo[ playerid ][ pAdmin ] < 1 ) return SCM( playerid, COLOR_GREY, "You're not authorized to use this command.");
	if (sscanf(params, "s[144]", text)) return SCM(playerid, COLOR_GREY, "[Usage:] /(a)dminchat [message]");

	format(string, sizeof(string), "[Admin Chat] %s: %s", GetName(playerid), text);
 	ABroadCast(COLOR_ADMIN, string, 1);
	return 1;
}

CMD:announcement(playerid, params[])
{
	new
	string[144], text[144];
	if( PlayerInfo[ playerid ][ pAdmin ] < 1 ) return SCM( playerid, COLOR_GREY, "You're not authorized to use this command.");
	if (sscanf(params, "s[144]", text)) return SCM(playerid, COLOR_GREY, "[Usage:] /announcement [message]");

	format(string, sizeof(string), "[Administrator Announcement] %s: %s", GetName(playerid), text);
 	SendClientMessageToAll(COLOR_LIGHTRED, string);
	return 1;
}

COMMAND:clearchat( playerid, params[ ] )
{
	new
	astring[124];

    if( PlayerInfo[ playerid ][ pAdmin ] < 2 ) return SCM( playerid, COLOR_GREY, "You're not authorized to use this command.");
    {
        for( new i = 0; i <= 100; i ++ ) SendClientMessageToAll( COLOR_WHITE, "" );
       	format(astring, sizeof(astring), "AmdCmd: Administrator %s has cleared the chat.", GetName(playerid));
		SendClientMessageToAll(COLOR_LIGHTRED, astring);
    }
    return 1;
}

COMMAND:respawnvehicles(playerid, params[])
{
	new
	astring[124];

    if( PlayerInfo[ playerid ][ pAdmin ] < 2 ) return SCM( playerid, COLOR_GREY, "You're not authorized to use this command.");
    {
		for(new i=0;i<MAX_VEHICLES;i++)
  		{
    		if(IsVehicleOccupied(i) == 0)
      		{
        		SetVehicleToRespawn(i);
          	}
        }
  		format(astring, sizeof(astring), "AmdCmd: Administrator %s has respawned all empty public vehicles.", GetName(playerid));
		SendClientMessageToAll(COLOR_LIGHTRED, astring);
    }
    return 1;
}

COMMAND:respawnvehiclesemergency(playerid, params[])
{
	new
	astring[124];

    if( PlayerInfo[ playerid ][ pAdmin ] < 2 ) return SCM( playerid, COLOR_GREY, "You're not authorized to use this command.");
    {
		for(new i=0;i<MAX_VEHICLES;i++)
  		{
  			SetVehicleToRespawn(i);
        }
  		format(astring, sizeof(astring), "AmdCmd: Administrator %s has respawned all vehicles.", GetName(playerid));
		SendClientMessageToAll(COLOR_LIGHTRED, astring);
    }
    return 1;
}

CMD:mute(playerid, params[])
{
	new
	Target, astring[128];


 	if( PlayerInfo[ playerid ][ pAdmin ] < 1 ) return SendClientMessage( playerid, COLOR_GREY, "You're not authorized to use this command." );
 	if(sscanf(params, "u", Target))return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /mute [id]");

    gMuted[playerid] = 1;
   	format(astring, sizeof(astring), "AmdCmd: Administrator %s has muted %s.", GetName(playerid), GetName(Target));
	SendClientMessageToAll(COLOR_LIGHTRED, astring);
    return true;
}

CMD:unmute(playerid, params[])
{
	new
	Target, astring[128];


 	if( PlayerInfo[ playerid ][ pAdmin ] < 1 ) return SendClientMessage( playerid, COLOR_GREY, "You're not authorized to use this command." );
 	if(sscanf(params, "u", Target)) SendClientMessage(playerid, COLOR_GREY, "[Usage:] /unmute [playerid]");

	format(astring, sizeof(astring), "AmdCmd: Administrator %s has unmuted %s.", GetName(playerid), GetName(Target));
	SendClientMessageToAll(COLOR_LIGHTRED, astring);
	gMuted[playerid] = 0;
    return true;
}

CMD:report(playerid, params[])
{
    new
	id, reason[144], string[124], name[MAX_PLAYERS], name2[MAX_PLAYERS];

    if(sscanf(params, "us[144]", id, reason)) return SCM(playerid, COLOR_GREY, "[Usage:] /report [playerid/partofname] [reason].");
    if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_LIGHTRED, "That player is not connected.");

    GetPlayerName(playerid, name, sizeof(name));
    GetPlayerName(id, name2, sizeof(name2));
    format(string, sizeof(string), "[ID:%d] %s has reported [ID:%d]%s, reason: %s.", playerid, GetName(playerid), id, GetName(id), reason);
    ABroadCast(COLOR_LIGHTRED, string, 1);

    format(string, sizeof(string), "AmdCmd: Type /markfalse [id] or /acceptreport [id].");
    ABroadCast(COLOR_LIGHTRED, string, 1);
    format(string, sizeof(string), "Your report was sent to all the online Adminstrators.");
    SendClientMessage(playerid, COLOR_GREEN, string);
    PlayerNeedsHelp[playerid] = 1;
    return 1;
}

CMD:helpme(playerid, params[])
{
    new
	id, reason[144], string[124], name[MAX_PLAYERS], name2[MAX_PLAYERS];

    if(sscanf(params, "s[144]", reason)) return SCM(playerid, COLOR_GREY, "[Usage:] /helpme [message].");

    GetPlayerName(playerid, name, sizeof(name));
    GetPlayerName(id, name2, sizeof(name2));
    format(string, sizeof(string), "[ID:%d] %s has asked for help: %s", playerid, GetName(playerid), reason);
    ABroadCast(COLOR_LIGHTRED, string, 1);

    format(string, sizeof(string), "Your message was sent to all of the online supporters.");
    SendClientMessage(playerid, COLOR_GREEN, string);
    
    PlayerNeedsHelp2[playerid] = 1;
    return 1;
}

CMD:acceptreport(playerid, params[])
{
    new
	id, string[124], name[MAX_PLAYERS];

    if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "[Usage:] /acceptreport [playerid]");
    if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_LIGHTRED, "That player is not connected.");
    else {
        if(PlayerNeedsHelp[id] == 1) {
            PlayerNeedsHelp[id] = 0;
            GetPlayerName(id, name, sizeof(name));
            format(string, sizeof(string), "AdmCmd: %s has accepted the report by %s [ID:%d].", GetName(playerid), GetName(id), id);
            ABroadCast(COLOR_LIGHTRED, string, 1);
            format(string, sizeof(string), "AdmCmd: %s has accepted your report. You will now receive help, be patient.", GetName(playerid));
            SendClientMessage(id, COLOR_LIGHTRED, string);
        }
        else return SCM(playerid, COLOR_LIGHTRED, "That players has not made a report.");
    }
    return 1;
}

CMD:accepthelpme(playerid, params[])
{
    new
	id, string[124], name[MAX_PLAYERS];

    if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "[Usage:] /accepthelpme [playerid]");
    if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_LIGHTRED, "That player is not connected.");
    else {
        if(PlayerNeedsHelp2[id] == 1) {
            PlayerNeedsHelp2[id] = 0;
            GetPlayerName(id, name, sizeof(name));
            format(string, sizeof(string), "AdmCmd: %s has accepted the question by %s [ID:%d].", GetName(playerid), GetName(id), id);
            ABroadCast(COLOR_LIGHTRED, string, 1);
            format(string, sizeof(string), "AdmCmd: %s has accepted your question. You will now receive help, be patient.", GetName(playerid));
            SendClientMessage(id, COLOR_LIGHTRED, string);
        }
        else return SCM(playerid, COLOR_LIGHTRED, "That players has not made a report.");
    }
    return 1;
}

CMD:ignorehelpme(playerid, params[])
{
    new
	id, string[124];

    if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "[Usage:] /ignorehelpme [playerid].");
    if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_LIGHTRED, "That player is not connected.");
    else {
        if(PlayerNeedsHelp2[id] == 1) {
            PlayerNeedsHelp2[id] = 0;

            format(string, sizeof(string), "AdmCmd: %s has ignored the question by [ID:%d]%s.", GetName(playerid), id, GetName(id));
            ABroadCast(COLOR_LIGHTRED, string, 1);
            format(string, sizeof(string), "*AdmCmd: %s has ignored your question for a reason, write a proper question next time.", GetName(playerid));
            SendClientMessage(id, COLOR_LIGHTRED, string);
        }
        else return SCM(playerid, COLOR_LIGHTRED, "That players has not made a report.");
    }
    return 1;
}


CMD:markfalse(playerid, params[])
{
    new
	id, string[124];

    if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    if(sscanf(params, "u", id)) return SCM(playerid, COLOR_GREY, "[Usage:] /markfalse [playerid].");
    if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_LIGHTRED, "That player is not connected.");
    else {
        if(PlayerNeedsHelp[id] == 1) {
            PlayerNeedsHelp[id] = 0;

            format(string, sizeof(string), "AdmCmd: %s has ignored the report by [ID:%d]%s.", GetName(playerid), id, GetName(id));
            ABroadCast(COLOR_LIGHTRED, string, 1);
            format(string, sizeof(string), "*AdmCmd: %s has ignored your report for a reason, write a proper report next time.", GetName(playerid));
            SendClientMessage(id, COLOR_LIGHTRED, string);
        }
        else return SCM(playerid, COLOR_LIGHTRED, "That players has not made a report.");
    }
    return 1;
}

CMD:setvw(playerid, params[])
{
	new
	id, world, string[124];

    if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    if(sscanf(params, "ui", id, world)) return SCM(playerid, COLOR_GREY, "[Usage:] /setvw [playerid/partofname] [world id].");
    if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_LIGHTRED, "That player is not connected.");

	format(string, sizeof(string), "AmdCmd: %s has set your virtual world to %d.", GetName(playerid), world);
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	SetPlayerVirtualWorld(id, world);
    return 1;
}

CMD:setinterior(playerid, params[])
{
	new
	id, interior, string[124];

    if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    if(sscanf(params, "ui", id, interior)) return SCM(playerid, COLOR_GREY, "[Usage:] /setinterior [playerid/partofname] [interior id].");
    if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_LIGHTRED, "That player is not connected.");

	format(string, sizeof(string), "AmdCmd: %s has set your interior id to %d.", GetName(playerid), interior);
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	SetPlayerInterior(id, interior);
    return 1;
}

CMD:achangenumber(playerid, params[])
{
	new id, number, string[128];
    if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    if(sscanf(params, "ui", id, number)) return SCM(playerid, COLOR_GREY, "[Usage:] /achangenumber [playerid/partofname] [number].");
    if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_LIGHTRED, "That player is not connected.");
    
    format(string, sizeof(string), "AdmCmd: %s has set %s's number to %d.", GetName(playerid), GetName(id), number);
    ABroadCast(COLOR_LIGHTRED, string, 1);

    format(string, sizeof(string), "AdmCmd: %s has set your number to %d.", GetName(playerid), number);
    SCM(id, COLOR_WHITE, string);
    
    PlayerInfo[id][pNumber] = number;
    return 1;
}

CMD:sethp(playerid, params[])
{
    new
	id, hp, string[128];

    if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    else if(sscanf(params, "ui", id, hp)) return SCM(playerid, COLOR_GREY, "[Usage:] /sethp [playerid/partofname] [hp].");
    else if(hp > 99 || hp < 1) return SCM(playerid, COLOR_LIGHTRED, "Amount [1-99].");
    if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_LIGHTRED, "That player is not connected.");

    SetPlayerHealth(id, hp);
    format(string, sizeof(string), "AdmCmd: %s has set %s's HP to %d.", GetName(playerid), GetName(id), hp);
    ABroadCast(COLOR_LIGHTRED, string, 1);
    
    format(string, sizeof(string), "AdmCmd: %s has set your HP to %d.", GetName(playerid), hp);
    SCM(id, COLOR_WHITE, string);
    return 1;
}

CMD:setarmour(playerid, params[])
{
    new
	id, armour, string[128];

    if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    else if(sscanf(params, "ui", id, armour)) return SCM(playerid, COLOR_GREY, "[Usage:] /setarmour [playerid/partofname] [armour].");
    else if(armour > 99 || armour < 1) return SCM(playerid, COLOR_LIGHTRED, "Amount [1-99].");
    if(!IsPlayerConnected(id)) return SCM(playerid, COLOR_LIGHTRED, "That player is not connected.");

    SetPlayerArmour(id, armour);
    format(string, sizeof(string), "AdmCmd: %s has set %s's armour to %d.", GetName(playerid), GetName(id), armour);
    ABroadCast(COLOR_LIGHTRED, string, 1);
    format(string, sizeof(string), "AdmCmd: %s has set your armour to.", GetName(playerid), armour);
    SCM(id, COLOR_WHITE, string);
    return 1;
}

CMD:agivegun(playerid, params[])
{
    new
	id, gunname[32], string[124], weapon, ammo;

    if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    else if(sscanf(params, "uii", id, weapon, ammo)) return SCM(playerid, COLOR_GREY, "[Usage:] /agivegun [playerid/partofname] [gunid] [ammo].");
    else if(weapon > 47 || weapon < 1) return SCM(playerid, COLOR_LIGHTRED, "Weapon ID'S: [1-47].");
    else if(ammo > 999 || ammo < 1) return SCM(playerid, COLOR_LIGHTRED, "Ammo [1-999].");

	GivePlayerWeapon(id, weapon, ammo);
	GetWeaponName(weapon, gunname, sizeof(gunname));
    
    format(string, sizeof(string), "AdmCmd: %s has given %s %s.", GetName(playerid), GetName(id), gunname);
    ABroadCast(COLOR_LIGHTRED, string, 1);
    format(string, sizeof(string), "AdmCmd: %s has given you a %s.", GetName(playerid), gunname);
    SCM(id, COLOR_WHITE, string);
    
   	// Logging admin givegun
    new agivegunstring[256];
    new playername[MAX_PLAYER_NAME];
	new targetname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	GetPlayerName(id, targetname, sizeof(targetname));
	
	new Hour, Minute, Second;
	gettime(Hour, Minute, Second);

	format(agivegunstring, sizeof(agivegunstring), "[%d:%d:%d] Admin %s has given a weapon (%d) to %s.", Hour, Minute, Second, playername, weapon, targetname);
	aGiveGunLog(agivegunstring);
	// -------------------------------------------------------
    return 1;
}

CMD:createbiz(playerid, params[])
{
	new
	price, level, id, int, world, string[256], Float:Xi, 
	Float:Yi, Float:Zi, inti, Float:X, Float:Y, Float:Z, Float:A;
	new biztext[144];
    if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    if(sscanf(params, "dddfff", price, level, inti, Xi, Yi, Zi)) return SendClientMessage(playerid, COLOR_GREY, "[Usage:] /createbiz [price] [type] [interior] [X] [Y] [Z]");

    if(level < 0 || level > 25) return SendClientMessage(playerid, COLOR_LIGHTRED, "Type cannot go below 0, or above 21.");//

    if(price < 10000) return SendClientMessage(playerid, COLOR_LIGHTRED, "Price cannot go below $10, 000.");

    for(new h = 1;h < sizeof(BusinessInfo);h++)
    {
        if(BusinessInfo[h][bPrice] == 0)
        {
            id = h;
            break;
        }
    }

    GetPlayerPos(playerid, X, Y, Z);
    GetPlayerFacingAngle(playerid, A);
    int = GetPlayerInterior(playerid);
    world = GetPlayerVirtualWorld(playerid);
    BusinessInfo[id][bInsideInt] = inti;
    BusinessInfo[id][bExitX] = Xi;
    BusinessInfo[id][bExitY] = Yi;
    BusinessInfo[id][bExitZ] = Zi;

    BusinessInfo[id][bOwned] = 0;
    BusinessInfo[id][bPrice] = price;
    BusinessInfo[id][bType] = level;
    BusinessInfo[id][bEntranceX] = X;
    BusinessInfo[id][bEntranceY] = Y;
    BusinessInfo[id][bEntranceZ] = Z;
    BusinessInfo[id][bEntranceA] = A;
    BusinessInfo[id][bLocked] = 1;

	switch(BusinessInfo[id][bType])
	{
		        	case 25: biztext = "Betting Shop";
		        	case 24: biztext = "Advertisement Center";
		            case 23: biztext = "Brothel";
		        	case 22: biztext = "Garage";
		            case 21: biztext = "Apartment Complex";
		 			case 20: biztext = "Dealership";
		 			case 19: biztext = "Electronic Store";
		   			case 18: biztext = "Ammu-Nation";
		   			case 17: biztext = "Gym";
		   			case 16: biztext = "Hotel";
		   			case 15: biztext = "Motel";
		   			case 14: biztext = "Diner";
		         	case 13: biztext = "Tattoo Shop";
		         	case 12: biztext = "Barbershop";
		            case 11: biztext = "Flower Store";
		           	case 10: biztext = "98 Cents";
		    		case 9: biztext = "69 Cents";
		            case 8: biztext = "Liqour Store";
			    	case 7: biztext = "Restaurant";
			    	case 6: biztext = "Bank";
			    	case 5: biztext = "Hospital";
			        case 4: biztext = "Police Station";
			        case 3: biztext = "24/7";
			        case 2: biztext = "Club";
			        case 1: biztext = "Bar";
			        case 0: biztext = "Clothes Shop";
	}

   	format(string, sizeof(string), ""COL_WHITE"For Sale!\n"COL_BROWN"Price: "COL_WHITE"$%d\n"COL_BROWN"Type: "COL_WHITE"%s\n"COL_BROWN"Street Number: "COL_WHITE"%d", BusinessInfo[id][bPrice], biztext, id);
	BusinessInfo[id][DLabel] = Create3DTextLabel(string, 0xFFFFFF, X, Y, Z, 10.0, 0, 0);

    BusinessInfo[id][bInt] =int;
    BusinessInfo[id][bWorld] =world;
    BusinessInfo[id][bInsideWorld] =id;

    format(string, sizeof(string), "None");
    strmid(BusinessInfo[id][bName], string, 0, strlen(string), 255);

    //if(BusinessInfo[id][bOutsideIcon]) DestroyDynamicPickup(BusinessInfo[id][bOutsideIcon]);
    //BusinessInfo[id][bOutsideIcon] = CreateDynamicPickup(1239, 1, BusinessInfo[id][bEntranceX], BusinessInfo[id][bEntranceY], BusinessInfo[id][bEntranceZ], BusinessInfo[id][bWorld]);
    new file4[40];
    format(file4, sizeof(file4), BPATH, id);
    new INI:File = INI_Open(file4);
    INI_SetTag(File, "data");
    INI_WriteInt(File, "bOwned", BusinessInfo[id][bOwned]);
    INI_WriteInt(File, "bPrice", BusinessInfo[id][bPrice]);
    INI_WriteString(File, "bOwner", BusinessInfo[id][bOwner]);
    INI_WriteInt(File, "bType", BusinessInfo[id][bType]);
    INI_WriteInt(File, "bLocked", BusinessInfo[id][bLocked]);
    INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
    INI_WriteFloat(File, "bEntranceX", BusinessInfo[id][bEntranceX]);
    INI_WriteFloat(File, "bEntranceY", BusinessInfo[id][bEntranceY]);
    INI_WriteFloat(File, "bEntranceZ", BusinessInfo[id][bEntranceZ]);
    INI_WriteFloat(File, "bEntranceA", BusinessInfo[id][bEntranceA]);
    INI_WriteFloat(File, "bExitX", BusinessInfo[id][bExitX]);
    INI_WriteFloat(File, "bExitY", BusinessInfo[id][bExitY]);
    INI_WriteFloat(File, "bExitZ", BusinessInfo[id][bExitZ]);
    INI_WriteFloat(File, "bExitA", BusinessInfo[id][bExitA]);
    INI_WriteInt(File, "bInt", BusinessInfo[id][bInt]);
    INI_WriteInt(File, "bWorld", BusinessInfo[id][bWorld]);
    INI_WriteInt(File, "bInsideInt", BusinessInfo[id][bInsideInt]);
    INI_WriteInt(File, "bInsideWorld", BusinessInfo[id][bInsideWorld]);
    INI_WriteString(File, "bName", BusinessInfo[id][bName]);
    INI_Close(File);
    return 1;
}

CMD:deletebiz(playerid, params[])
{
    new
	id = IsPlayerNearBizEnt(playerid);
 	if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
 	if(BusinessInfo[id][bOwned] == 1) return SCM(playerid, COLOR_LIGHTRED, "This business is owned.");//Checks if the biz is owned, if it is it won't allow it to be deleted.

    BusinessInfo[id][bOwned] = 0;
    BusinessInfo[id][bPrice] = 0;
    BusinessInfo[id][bOwner] = 0;
    BusinessInfo[id][bType] = 0;
    BusinessInfo[id][bLocked] = 0;
    BusinessInfo[id][bName] = 0;
    BusinessInfo[id][bMoney] = 0;
    BusinessInfo[id][bEntranceX] = 0;
    BusinessInfo[id][bEntranceY] = 0;
    BusinessInfo[id][bEntranceZ] = 0;
    BusinessInfo[id][bEntranceA] = 0;
    BusinessInfo[id][bExitX] = 0;
    BusinessInfo[id][bExitY] = 0;
    BusinessInfo[id][bExitZ] = 0;
    BusinessInfo[id][bExitA] = 0;
    BusinessInfo[id][bInt] = 0;
    BusinessInfo[id][bWorld] = 0;

    Delete3DTextLabel(BusinessInfo[id][DLabel]);

	DestroyDynamicPickup(BusinessInfo[id][bOutsideIcon]);

    new string[128];

    format(string, sizeof(string), BPATH, id);
    fremove(string);
    return 1;
}

CMD:agivedrug(playerid, params[])
{
    new
	give[24], id, amount, string[128];

    if(sscanf(params, "is[24]d", id, give, amount)) return SendClientMessage(playerid, COLOR_GREY, "[SERVER] /agivedrug [playerid] (lsd, marijuana, cocaine, meth, ecstasy, heroin, crack) [amount]");
    if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, COLOR_GREY, "You're not authorized to use this command.");
    if(!strcmp(give, "lsd", true))
    {
	    if (id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");

	    PlayerInfo[id][dLSD] += amount;
	 	format(string, sizeof(string), "AdmCmd: %s has given %s %d grams of LSD.", GetName(playerid), GetName(id), amount);
	    ABroadCast(COLOR_LIGHTRED, string, 1);
    }
    else if(!strcmp(give, "marijuana", true))
    {
	    if (id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");

	    PlayerInfo[id][dMarijuana] += amount;
	 	format(string, sizeof(string), "AdmCmd: %s has given %s %d grams of marijuana.", GetName(playerid), GetName(id), amount);
	    ABroadCast(COLOR_LIGHTRED, string, 1);
    }
    else if(!strcmp(give, "cocaine", true))
    {
	    if (id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");

	    PlayerInfo[id][dCocaine] += amount;
	 	format(string, sizeof(string), "AdmCmd: %s has given %s %d grams of cocaine.", GetName(playerid), GetName(id), amount);
	    ABroadCast(COLOR_LIGHTRED, string, 1);
    }
    else if(!strcmp(give, "meth", true))
    {
	    if (id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");

	    PlayerInfo[id][dMeth] += amount;
	 	format(string, sizeof(string), "AdmCmd: %s has given %s %d grams of meth.", GetName(playerid), GetName(id), amount);
	    ABroadCast(COLOR_LIGHTRED, string, 1);
    }
    else if(!strcmp(give, "ecstasy", true))
    {
	    if (id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");

	    PlayerInfo[id][dEcstasy] += amount;
	 	format(string, sizeof(string), "AdmCmd: %s has given %s %d grams of ecstasy.", GetName(playerid), GetName(id), amount);
	    ABroadCast(COLOR_LIGHTRED, string, 1);
    }
    else if(!strcmp(give, "seeds", true))
    {
	    if (id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");

	    PlayerInfo[id][pSeeds] += amount;
	 	format(string, sizeof(string), "AdmCmd: %s has given %s %d seeds.", GetName(playerid), GetName(id), amount);
	    ABroadCast(COLOR_LIGHTRED, string, 1);
    }
    else if(!strcmp(give, "heroin", true))
    {
	    if (id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");

	    PlayerInfo[id][dHeroin] += amount;
	 	format(string, sizeof(string), "AdmCmd: %s has given %s %d syringes of heroin.", GetName(playerid), GetName(id), amount);
	    ABroadCast(COLOR_LIGHTRED, string, 1);
    }
    else if(!strcmp(give, "crack", true))
    {
	    if (id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not connected.");

	    PlayerInfo[id][dCrack] += amount;
	 	format(string, sizeof(string), "AdmCmd: %s has given %s %d grams of crack.", GetName(playerid), GetName(id), amount);
	    ABroadCast(COLOR_LIGHTRED, string, 1);
    }
    return 1;
}

CMD:licenses(playerid, params[])
{
	new licensetext[18];
	new gendertext[18];
	switch(PlayerInfo[playerid][pDriverLicense])
	{
		case 1: licensetext = "Yes";
		case 0: licensetext = "No";
	}

	switch(PlayerInfo[playerid][pGender])
	{
		case 1: gendertext = "Female";
		case 0: gendertext = "Male";
	}

 	new
	PID, string[128], Float:X, Float:Y, Float:Z;
	GetPlayerPos(PID, X, Y, Z);

    if(sscanf(params, "us[144]", PID)) return SCM(playerid, COLOR_GREY, "[Usage:] /licenses [playerid/partofname]");
    if(IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z))
    if(!IsPlayerConnected(PID)) return SCM(playerid, COLOR_LIGHTRED, "That player is not connected.");


	format(string, sizeof(string), "________[%s]________", GetName(playerid));
	SCM(PID, COLOR_WHITE, string);
	format(string, sizeof(string), "Age: %d", PlayerInfo[playerid][pAge]);
	SCM(PID, COLOR_WHITE, string);
	format(string, sizeof(string), "Gender: %s", gendertext);
	SCM(PID, COLOR_WHITE, string);
	format(string, sizeof(string), "Drivers License: %s.", licensetext);
	SCM(PID, COLOR_WHITE, string);
	return 1;
}

CMD:advertise(playerid, params[])
{
	new
	string[144], text[144];
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1684.7454, -1343.1959, 17.4362)) return SCM(playerid, COLOR_LIGHTRED, "You're not at the advertisement center.");
	if(AdvertiseAllowed[playerid] != 0) return SCM(playerid, COLOR_LIGHTRED, "You have to wait one minute before posting an advertisement again.");
	if (sscanf(params, "s[144]", text)) return SCM(playerid, COLOR_GREY, "[Usage:] /(ad)vertise [message]");
	if(GetPlayerMoney(playerid) < 99) return SCM(playerid, COLOR_LIGHTRED, "You don't have enough money. ($100)");
	
	if(PlayerInfo[playerid][pDonator] > 1)
	{
		SetTimerEx("AdvertiseAgain", 30000, false, "i", playerid);
	}
	else
	{
	    SetTimerEx("AdvertiseAgain", 60000, false, "i", playerid);
		GivePlayerMoney(playerid, -100);

	   	format(string, sizeof(string), "Advertisement: %s, Number: %d", text, PlayerInfo[playerid][pNumber]);
		SendClientMessageToAll(COLOR_GREEN, string);
		AdvertiseAllowed[playerid] = 1;
	}
	return 1;
}

CMD:acceptdeath(playerid, params[])
{
	if(isAlive[playerid] == false)
	{
	    SCM(playerid, COLOR_LIGHTRED, "You have been rushed to the hospital and are undergoing an operation.");
	    SetPlayerPos(playerid, -211.3207, -1759.6207, 676.7153);
	    SetPlayerInterior(playerid, 3);
	    SetPlayerVirtualWorld(playerid, 0);
		FadeColorForPlayer(playerid, 0, 0, 0, 0, 0, 0, 0, 255, 15, 0);
     	SetTimerEx("OperationDone", 15000, false, "i", playerid);
     	isAlive[playerid] = true;
    	ApplyPlayerAnimation(playerid, "CRACK", "crckdeth1", 4.1, 1, 1, 1, 1, 1, 1);
  		Delete3DTextLabel(deathlabel[playerid]);
  		sInfo[playerid][Chest] = 0;
  		sInfo[playerid][Head] = 0;
  		sInfo[playerid][Crotch] = 0;
  		sInfo[playerid][RLeg] = 0;
  		sInfo[playerid][LLeg] = 0;
  		sInfo[playerid][RArm] = 0;
  		sInfo[playerid][LArm] = 0;
  		killed[playerid] = 0;
  		
	  	GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon1], 0);
		GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon2], 0);
		GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon3], 0);
		GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon4], 0);
		GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon5], 0);
		GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon6], 0);
		GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon7], 0);
		GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon8], 0);
		GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon9], 0);
		GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon10], 0);
		GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon11], 0);
		GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon12], 0);
		GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon13], 0);
		GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon14], 0);
		
		new Float:pPosX, Float:pPosY, Float:pPosZ;
		new
		world = GetPlayerVirtualWorld(playerid), interior = GetPlayerInterior(playerid);
		GetPlayerPos(playerid, pPosX, pPosY, pPosZ);
    	for(new i_slot = 0, gun, ammo; i_slot != 12; i_slot++)
    	{
        	GetPlayerWeaponData(playerid, i_slot, gun, ammo);
        	if(gun != 0 && ammo != 0) CreateDroppedGun(gun, ammo, pPosX+random(2)-random(2), pPosY+random(2)-random(2), pPosZ, world, interior);
    	}
	}
	return 1;
}

CMD:takedrivingtest(playerid, params[])
{
	if(PlayerInfo[playerid][pAge] < 16) return SCM(playerid, COLOR_LIGHTRED, "You're not old enough to take the test.");
    if(!IsPlayerInRangeOfPoint(playerid, 10.0, 2045.0383, -1907.9384, 13.5469)) return SCM(playerid, COLOR_LIGHTRED, "You're not at the DMV center.");
    if(TakingDriverLicense[playerid] == true) return SCM(playerid, COLOR_LIGHTRED, "You're already taking the test.");
    if(PlayerInfo[playerid][pDriverLicense] == 1) return SCM(playerid, COLOR_LIGHTRED, "You already have a drivers license.");

    TakingDriverLicense[playerid] = true;
	SCM(playerid, COLOR_WHITE, "Please enter one of the white DMV cars to start the test.");
	return 1;
}

CMD:engine(playerid, params[])
{
	new string[124];
	new id = GetVehicleID(GetPlayerVehicleID(playerid));
 	new vehicleid = GetPlayerVehicleID(playerid);
 	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_LIGHTRED, "You are not in any vehicle.");
	if(GetPlayerVehicleAccess(playerid, id) < 1)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have the keys for this vehicle!");
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    if(GetPlayerState(playerid) == 2)
    {
		if(engine != 1)
		{
		    format(string, sizeof(string), "* %s twists the keys in the ignition.", GetName(playerid));
		    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 5.0, 10000);
		    SendClientMessage(playerid, COLOR_PURPLE, string);
			SetTimerEx("EngineOn", 2000, false, "i", playerid);
			GameTextForPlayer(playerid, "~g~STARTING...", 2000, 1);
		}
		else if(engine != 0)
		{
			SetVehicleParamsEx(vehicleid, 0, 0, alarm, doors, bonnet, boot, 0);
			format(string, sizeof(string), "* %s turns the engine off.", GetName(playerid));
	  		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		}
	}
	return 1;
}

CMD:pbengine(playerid, params[])
{
	new string[124];
	new id = GetVehicleID(GetPlayerVehicleID(playerid));
 	new vehicleid = GetPlayerVehicleID(playerid);
 	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_LIGHTRED, "You are not in any vehicle.");
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    if(GetPlayerState(playerid) == 2)
    {
		if(engine != 1)
		{
			SetVehicleParamsEx(vehicleid, 1, 1, 0, doors, bonnet, boot, 0);
	  		format(string, sizeof(string), "* %s turns the engine on.", GetName(playerid));
	  		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			ToggleAlarm(vehicleid, VEHICLE_PARAMS_OFF);
			VehicleSecurity[vehicleid] = 0;
			VehicleAlarm[id] = 0;
		}
		else if(engine != 0)
		{
			SetVehicleParamsEx(vehicleid, 0, 0, alarm, doors, bonnet, boot, 0);
			format(string, sizeof(string), "* %s turns the engine off.", GetName(playerid));
	  		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		}
	}
	return 1;
}

CMD:lights(playerid, params[])
{
	new string[124];
	new vehicleid = GetPlayerVehicleID(playerid);

    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    if(GetPlayerState(playerid) == 2)
    {
		if(lights != 1)
		{
			SetVehicleParamsEx(vehicleid, engine, 1, alarm, doors, bonnet, boot, 0);
	  		format(string, sizeof(string), "* %s turns the lights on.", GetName(playerid));
	  		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		}
		else if(lights != 0)
		{
			SetVehicleParamsEx(vehicleid, engine, 0, alarm, doors, bonnet, boot, 0);
			format(string, sizeof(string), "* %s turns the lights off.", GetName(playerid));
	  		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		}
	}
	return 1;
}

CMD:s(playerid, params[]) return cmd_shout(playerid, params);
CMD:acmds(playerid, params[]) return cmd_admincommands(playerid, params);
CMD:acommands(playerid, params[]) return cmd_admincommands(playerid, params);
CMD:ahelp(playerid, params[]) return cmd_admincommands(playerid, params);
CMD:o(playerid, params[]) return cmd_ooc(playerid, params);
CMD:p(playerid, params[]) return cmd_pickup(playerid, params);
CMD:h(playerid, params[]) return cmd_hangup(playerid, params);
CMD:r(playerid, params[]) return cmd_radio(playerid, params);
CMD:l(playerid, params[]) return cmd_low(playerid, params);
CMD:aduty(playerid, params[]) return cmd_adminduty(playerid, params);
CMD:f(playerid, params[]) return cmd_faction(playerid, params);
CMD:ad(playerid, params[]) return cmd_advertise(playerid, params);
CMD:a(playerid, params[]) return cmd_adminchat(playerid, params);
CMD:m(playerid, params[]) return cmd_megaphone(playerid, params);

public OnPlayerDeath(playerid, killerid, reason)
{
	// Logging death
    new killstring[256]; // Creates the Kill String
    new Victimname[MAX_PLAYER_NAME]; // Victims Name.
	new Killername[MAX_PLAYER_NAME]; // Killers Name
	GetPlayerName(playerid, Victimname, sizeof(Victimname));
	GetPlayerName(killerid, Killername, sizeof(Killername));
	
	new Hour, Minute, Second;
	gettime(Hour, Minute, Second);
	
	format(killstring, sizeof(killstring), "[%d:%d:%d] %s was killed by %s.", Hour, Minute, Second, Victimname, Killername); //Formats the String
	KillLog(killstring); //This calls Function KillLog and sends the killstring.
	// -------------------------------------------------------

    GetPlayerPos(playerid, Deadx[playerid], Deady[playerid], Deadz[playerid]);
	deadint[playerid] = GetPlayerInterior(playerid);
	deadvw[playerid] = GetPlayerVirtualWorld(playerid);
	oldskin[playerid] = GetPlayerSkin(playerid);
	
	SetPlayerColor(playerid, COLOR_WHITE);
	
	GetPlayerWeaponData(playerid, 0, PlayerInfo[playerid][pWeapon1], PlayerInfo[playerid][pAmmo1]);
	GetPlayerWeaponData(playerid, 1, PlayerInfo[playerid][pWeapon2], PlayerInfo[playerid][pAmmo2]);
	GetPlayerWeaponData(playerid, 2, PlayerInfo[playerid][pWeapon3], PlayerInfo[playerid][pAmmo3]);
	GetPlayerWeaponData(playerid, 3, PlayerInfo[playerid][pWeapon4], PlayerInfo[playerid][pAmmo4]);
	GetPlayerWeaponData(playerid, 4, PlayerInfo[playerid][pWeapon5], PlayerInfo[playerid][pAmmo5]);
	GetPlayerWeaponData(playerid, 5, PlayerInfo[playerid][pWeapon6], PlayerInfo[playerid][pAmmo6]);
	GetPlayerWeaponData(playerid, 6, PlayerInfo[playerid][pWeapon7], PlayerInfo[playerid][pAmmo7]);
	GetPlayerWeaponData(playerid, 7, PlayerInfo[playerid][pWeapon8], PlayerInfo[playerid][pAmmo8]);
	GetPlayerWeaponData(playerid, 8, PlayerInfo[playerid][pWeapon9], PlayerInfo[playerid][pAmmo9]);
	GetPlayerWeaponData(playerid, 9, PlayerInfo[playerid][pWeapon10], PlayerInfo[playerid][pAmmo10]);
	GetPlayerWeaponData(playerid, 10, PlayerInfo[playerid][pWeapon11], PlayerInfo[playerid][pAmmo11]);
	GetPlayerWeaponData(playerid, 11, PlayerInfo[playerid][pWeapon12], PlayerInfo[playerid][pAmmo12]);
	GetPlayerWeaponData(playerid, 12, PlayerInfo[playerid][pWeapon13], PlayerInfo[playerid][pAmmo13]);
	GetPlayerWeaponData(playerid, 13, PlayerInfo[playerid][pWeapon14], PlayerInfo[playerid][pAmmo14]);

   	isAlive[playerid] = false;

	if(IsBeingSpeced[playerid] == 1)//If the player being spectated, dies, then turn off the spec mode for the spectator.
	{
	    foreach(new i : Player)
	    {
	    	if(spectatorid[i] == playerid)
			{
				TogglePlayerSpectating(i, false);// This justifies what's above, if it's not off then you'll be either spectating your connect screen, or somewhere in blueberry (I don't know why)
			}
		}
	}
    return 1;
}

public OnPlayerText(playerid, text[])
{
    if(gMuted[playerid] == 1) return SCM(playerid, COLOR_LIGHTRED, "You're muted.");
	new string[128];
	if(policecall[playerid] == 1)
	{
		format(string, sizeof(string), "911 call: %s", text);
    	PoliceBroadcast(COLOR_SJPD, string, 1);

    	SendClientMessage(playerid, COLOR_SJPD, "San Jose Police Department: The police has been alerted.");
    	policecall[playerid] = 0;
    	stopphone(playerid);
    	return 0;
	}
    if(PlayerLogged[playerid] == false) SCM(playerid, COLOR_LIGHTRED, "You're not logged in.");
    if (player[playerid][calling])
    {
        GetPlayerName(playerid, string, 16);
        format(string, sizeof(string), "(Cellphone)%s : %s", string, text);
        SendClientMessage(player[playerid][caller], COLOR_YELLOW, string);
        SendClientMessage(playerid, COLOR_YELLOW, string);
        return 0;
    }
	if(IsPlayerInAnyVehicle(playerid))
	{
 		if(GetPlayerVehicleSeat(playerid) == 3)
	    {
	 		ApplyPlayerAnimation(playerid, "CAR_CHAT", "CAR_Sc1_FR", 4.1, 0, 0, 0, 1, 1, 1);
			format(string, sizeof(string), "%s says: %s", GetName(playerid), text);
			ProxDetector(4.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 0;
		}
 	}
	if(IsPlayerInAnyVehicle(playerid))
	{
 		if(GetPlayerVehicleSeat(playerid) == 2)
	    {
	 		ApplyPlayerAnimation(playerid, "CAR_CHAT", "CAR_Sc1_FR", 4.1, 0, 0, 0, 1, 1, 1);
			format(string, sizeof(string), "%s says: %s", GetName(playerid), text);
			ProxDetector(4.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 0;
		}
 	}
	if(IsPlayerInAnyVehicle(playerid))
	{
 		if(GetPlayerVehicleSeat(playerid) == 1)
	    {
	 		ApplyPlayerAnimation(playerid, "CAR_CHAT", "CAR_Sc1_FR", 4.1, 0, 0, 0, 1, 1, 1);
			format(string, sizeof(string), "%s says: %s", GetName(playerid), text);
			ProxDetector(4.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 0;
		}
 	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    if(GetPlayerVehicleSeat(playerid) == 0)
	    {
	 		ApplyPlayerAnimation(playerid, "CAR_CHAT", "CAR_Sc1_FR", 4.1, 0, 0, 0, 1, 1, 1);
			format(string, sizeof(string), "%s says: %s", GetName(playerid), text);
			ProxDetector(4.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 0;
		}
 	}
 	
	if(MaskOn[playerid] == 1)
	{
		if(strlen(text) > 90)
	    {
	        new text1[91], 
	            text2[91];

	        strmid(text2, text, 90, 128);
	        strmid(text1, text, 0, 90);

	        format(string, 128, "Stranger_%d%d says: %s ...", playerid, masknumber[playerid], text1);
	        ProxDetector(8.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3);

	        format(string, 128, "... %s", text2);
	        ProxDetector(8.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3);
	    }
	    else
		{
			format(string, sizeof(string), "Stranger_%d%d says: %s", playerid, masknumber[playerid], text);
			ProxDetector(8.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE4, COLOR_FADE5);
		}
	}
	
  	else if(strlen(text) > 90)
    {
        new text1[91], 
            text2[91];

        strmid(text2, text, 90, 128);
        strmid(text1, text, 0, 90);

        format(string, 128, "%s says: %s ...", GetName(playerid), text1);
        ProxDetector(8.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3);

        format(string, 128, "... %s", text2);
        ProxDetector(8.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3);
    }
    else
	{
	 	format(string, sizeof string, "%s says: %s", GetName(playerid), text);
	 	ProxDetector(8.0, playerid, string, COLOR_FADE1, COLOR_FADE1, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3);
	}
	return 0;
}

public OnPlayerFloodControl(playerid, iCount, iTimeSpan) {
    if(iCount > 2 && iTimeSpan < 8000) {
        Ban(playerid);
    }
}

public OnPlayerConnect(playerid)
{
	FadePlayerConnect(playerid);
	SetPlayerColor(playerid, COLOR_WHITE);
    ResetPlayerStats(playerid);
    stopanimAllowed[playerid] = true;
    gettime(hour, minute);
    SetPlayerTime(playerid, hour, minute);
    for(new i=0;i<47;i++) playerWeapons[playerid][i] = false;
    SetPlayerScore(playerid, 1);
	
	RemoveBuildingForPlayer(playerid, 1336, -2185.8203, -2447.4375, 30.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 18497, -2149.6641, -2362.4297, 33.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 3325, -2205.5469, -2449.6172, 31.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 3324, -2170.3438, -2477.6406, 32.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 3323, -2135.1172, -2505.6641, 32.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 18520, -2224.7109, -2288.4375, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 18521, -2213.9688, -2295.9609, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 18522, -2201.9609, -2302.9219, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 18523, -2186.9688, -2327.4844, 30.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 18524, -2171.0469, -2416.6406, 30.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 18525, -2183.7656, -2422.2344, 32.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 18526, -2149.0391, -2274.1875, 33.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 18527, -2100.2188, -2285.5000, 33.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 18530, -2153.8672, -2453.3828, 29.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 18531, -2139.7266, -2437.5781, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 18532, -2096.1484, -2340.1719, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 18533, -2111.4453, -2478.1250, 29.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 18534, -2189.5078, -2252.8203, 29.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 18535, -2001.0313, -2388.0859, 38.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 3341, -2099.6094, -2534.1563, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3341, -2076.5938, -2524.5234, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3341, -2032.8516, -2537.5000, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3340, -2085.7031, -2548.3828, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3340, -2038.7734, -2559.2422, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3340, -2064.0391, -2536.6563, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3339, -2085.5547, -2512.0781, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3339, -2067.2578, -2563.1094, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3342, -2056.7109, -2505.1953, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3342, -2051.3906, -2545.9844, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3358, -2075.2422, -2316.7344, 33.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 18554, -2100.3516, -2469.6094, 29.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 3169, -2067.2578, -2563.1094, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3167, -2038.7734, -2559.2422, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 767, -2202.9375, -2534.0703, 29.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, -2184.0234, -2474.7422, 30.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, -2181.2109, -2484.9297, 30.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, -2181.1016, -2471.1094, 30.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 775, -2179.6406, -2483.0781, 29.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 3313, -2135.1172, -2505.6641, 32.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, -2130.3438, -2519.7422, 30.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, -2126.8750, -2515.3984, 30.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 782, -2128.3438, -2508.1641, 29.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, -2121.4844, -2500.6484, 30.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, -2125.8125, -2497.1719, 30.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 782, -2139.2813, -2494.8594, 29.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, -2177.6016, -2487.8203, 30.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 1410, -2173.9844, -2490.7109, 30.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 775, -2173.8047, -2487.4688, 29.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 782, -2164.2031, -2486.8750, 29.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, -2108.9844, -2488.5938, 30.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3312, -2170.3438, -2477.6406, 32.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, -2145.0547, -2459.8594, 30.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 18241, -2111.4453, -2478.1250, 29.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 3167, -2085.7031, -2548.3828, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3167, -2064.0391, -2536.6563, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3170, -2076.5938, -2524.5234, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3170, -2099.6094, -2534.1563, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3169, -2085.5547, -2512.0781, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 18451, -2082.6328, -2500.2344, 30.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 1333, -2103.7734, -2479.7344, 30.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 18552, -2100.3516, -2469.6094, 29.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 3173, -2051.3906, -2545.9844, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3170, -2032.8516, -2537.5000, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3173, -2056.7109, -2505.1953, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3310, -2205.5469, -2449.6172, 31.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, -2220.1953, -2447.9531, 30.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, -2216.7344, -2443.6016, 30.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 775, -2210.1016, -2442.0469, 29.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1333, -2218.8828, -2336.2109, 30.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 18234, -2224.7109, -2288.4375, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 18235, -2213.9688, -2295.9609, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1333, -2213.9609, -2339.3047, 30.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2205.9453, -2320.6250, 30.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1331, -2136.5547, -2450.5938, 30.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 18237, -2153.8672, -2453.3828, 29.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 776, -2194.6641, -2451.5078, 29.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, -2199.3516, -2438.7266, 30.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, -2203.6953, -2435.2500, 30.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 18264, -2139.7266, -2437.5781, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1327, -2200.8750, -2425.2266, 30.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 18262, -2183.8516, -2423.2656, 35.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 18260, -2187.5781, -2418.9766, 31.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 18263, -2183.1797, -2420.9531, 37.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 18474, -2183.7656, -2422.2344, 32.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 1334, -2174.8594, -2365.2734, 30.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 18261, -2171.0469, -2416.6406, 30.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 18265, -2186.9688, -2327.4844, 30.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 18236, -2201.9609, -2302.9219, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 18243, -2203.7422, -2262.4922, 29.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 18244, -2202.9453, -2261.1719, 37.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 18203, -2149.6641, -2362.4297, 33.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 18496, -2149.0391, -2274.1875, 33.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 1334, -2136.5000, -2263.8984, 30.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 1334, -2138.6641, -2262.1953, 30.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 18201, -2135.7813, -2359.8203, 37.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 1332, -2085.3203, -2414.5078, 30.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 18200, -2100.2188, -2285.5000, 33.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 18620, -2100.2188, -2285.5000, 33.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 18239, -2096.1484, -2340.1719, 29.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 790, -2081.9609, -2367.0000, 34.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 790, -2069.9297, -2401.0469, 34.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3356, -2075.2422, -2316.7344, 33.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 1506, -2074.9219, -2312.3672, 30.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2068.2422, -2277.3984, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2064.0703, -2274.0234, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2059.9219, -2270.6094, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2053.1328, -2259.9766, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2056.5078, -2267.5313, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2052.8438, -2263.6875, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 790, -2051.2813, -2316.8750, 34.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 18365, -2001.0313, -2388.0859, 38.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 3281, -2399.6484, -2216.2031, 33.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 3281, -2392.0313, -2217.6016, 33.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 3281, -2396.1641, -2217.6250, 33.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 3281, -2380.8438, -2208.2734, 33.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 3281, -2382.7188, -2211.5938, 33.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 3281, -2377.1016, -2201.7109, 33.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 3281, -2378.9844, -2204.9844, 33.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 18274, -2412.5313, -2183.4688, 32.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 3281, -2388.5078, -2193.6641, 33.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 3281, -2380.9531, -2193.6172, 33.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 3281, -2384.7266, -2193.6328, 33.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 18275, -2376.1172, -2196.2500, 34.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 3281, -2371.2969, -2197.2031, 33.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 3281, -2374.1094, -2192.0000, 33.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 3281, -2370.6953, -2190.3672, 33.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 3281, -2367.8906, -2195.5703, 33.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 3281, -2364.4766, -2193.9688, 33.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 3281, -2360.6250, -2192.9922, 33.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 3281, -2367.2813, -2188.7656, 33.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 3281, -2364.1875, -2186.4375, 33.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -2210.8125, -2257.0469, 30.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2057.2813, -2256.5547, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -2211.0469, -2252.9766, 30.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 18242, -2189.5078, -2252.8203, 29.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2065.4922, -2249.6484, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2061.3438, -2253.0703, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -2207.9141, -2248.8672, 30.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -2204.9219, -2244.6641, 30.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2115.8359, -2243.3984, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2069.6172, -2246.3125, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2116.0703, -2239.5781, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2112.5625, -2235.5078, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2109.1563, -2231.4375, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2082.0078, -2236.3672, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2077.8828, -2239.6016, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2073.7578, -2242.8906, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2090.2813, -2229.6094, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2086.1563, -2232.9453, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 767, -2150.6250, -2225.5859, 29.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2105.6484, -2227.3672, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2102.2813, -2223.3125, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2094.4219, -2226.1875, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -2098.5469, -2222.8984, 30.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 18619, -1999.1719, -2212.9141, 69.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 14843, 266.3516, 81.1953, 1001.2813, 0.25);

	// Hospital
	RemoveBuildingForPlayer(playerid, 2009, 353.3828, 152.3125, 1024.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 354.9688, 152.5000, 1024.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 354.2109, 152.5000, 1024.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1999, 355.4219, 153.3125, 1024.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1999, 354.6328, 170.9375, 1024.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 354.2578, 171.7500, 1024.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 355.8438, 171.7500, 1024.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 2009, 356.6719, 171.9375, 1024.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 2167, 351.9844, 192.5078, 1018.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2167, 352.0078, 192.5781, 1018.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2167, 351.9844, 193.4219, 1018.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2167, 351.9844, 194.3359, 1018.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2167, 351.9844, 195.2578, 1018.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2167, 352.0078, 193.5000, 1018.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2167, 352.0078, 195.3281, 1018.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2167, 352.0078, 194.4141, 1018.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2186, 357.7734, 199.0391, 1018.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2009, 361.1797, 152.1563, 1024.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 362.0000, 152.6719, 1024.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 363.5859, 152.6328, 1024.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1999, 363.2188, 153.1563, 1024.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 14599, 358.7109, 162.0859, 1026.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1999, 362.3828, 170.9375, 1024.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 362.0078, 172.2500, 1024.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 2009, 364.4219, 171.9375, 1024.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 363.5938, 171.4219, 1024.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 14632, 364.9297, 188.1797, 1020.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 14633, 364.9297, 188.1797, 1020.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 14600, 366.8672, 188.1797, 1020.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 2167, 359.8047, 192.5078, 1018.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2167, 359.8047, 193.4219, 1018.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2167, 359.8047, 194.3359, 1018.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2167, 359.8047, 195.2578, 1018.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2167, 359.8281, 192.5781, 1018.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2167, 359.8281, 193.5000, 1018.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2167, 359.8281, 194.4141, 1018.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2167, 359.8281, 195.3281, 1018.9766, 0.25);
	
	// San Jose
	
 	RemoveBuildingForPlayer(playerid, 708, 1837.6406, -1968.3438, 12.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1682.1406, -2102.3516, 11.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1700.8047, -2123.7969, 11.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1733.2422, -2125.8438, 21.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1742.4219, -2101.1484, 21.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1751.1484, -2126.3984, 11.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1812.1719, -2140.4531, 11.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1781.2031, -2076.5703, 18.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1796.7031, -2080.9688, 21.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1810.0000, -2079.4063, 9.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1808.8828, -2016.6094, 9.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1811.2500, -2012.6172, 21.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1792.7500, -1974.5547, 11.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1794.5938, -1980.7500, 9.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1808.8828, -1985.3359, 9.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1812.3438, -1968.8047, 11.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1794.1172, -1846.7109, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1809.7656, -1846.7109, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1837.3125, -2080.7734, 22.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1836.7500, -2066.1484, 23.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1843.5938, -2143.2188, 11.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1839.9531, -2041.0000, 21.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1849.5313, -2041.2891, 9.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1868.4531, -2063.4453, 11.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1872.1719, -2056.5938, 16.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1870.1875, -2041.0391, 9.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1935.1328, -2074.8672, 13.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1912.6641, -2063.2109, 10.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 671, 1921.4922, -2040.5234, 12.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1880.4766, -1919.4609, 11.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1914.8828, -1980.3438, 9.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1922.1172, -1981.2109, 9.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1919.3203, -1919.1719, 14.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1836.7188, -1898.8984, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2006.4531, -1943.5781, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2034.7109, -1943.5781, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2114.5547, -1928.1875, 5.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2113.3984, -1925.0391, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2115.6719, -1922.7656, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2123.3594, -1928.0703, 6.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2122.6563, -1916.7891, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2116.9297, -1916.0781, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2121.5078, -1909.5313, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2110.2734, -1906.5859, 5.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 708, 1966.7109, -1360.0938, 17.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 2256.1641, -1508.0469, 20.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 714, 2007.6094, -1556.6563, 12.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2021.2734, -1353.0781, 22.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1855.7188, -1741.5391, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1879.5078, -1741.4844, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1908.2188, -1741.4844, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1929.5781, -1736.9063, 21.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1929.5781, -1694.4609, 21.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2013.2891, -1751.7656, 15.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2032.5000, -1737.6953, 12.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2034.6250, -1699.8438, 12.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2049.0547, -1733.7813, 12.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2051.5000, -1688.2734, 12.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2051.2266, -1659.5313, 12.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2064.0313, -1687.7031, 12.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1855.7188, -1623.2813, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1879.5078, -1623.1016, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1908.2188, -1622.9844, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1929.5781, -1627.6250, 21.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1873.0547, -1478.3125, 9.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1927.4766, -1478.3125, 9.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1955.3047, -1649.8828, 15.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1986.5938, -1650.9219, 14.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1955.0156, -1632.9219, 14.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2033.6328, -1638.1094, 12.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1987.1172, -1618.2578, 12.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2025.4219, -1477.9453, 11.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2033.0703, -1479.7578, 8.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2065.9766, -1483.1875, 8.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2122.6250, -1414.0547, 22.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2122.6250, -1414.0547, 22.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2122.4219, -1394.9766, 22.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 2100.8125, -1764.3750, 21.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2070.3672, -1712.8203, 12.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2094.6875, -1693.0547, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2094.6875, -1667.6953, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2128.2656, -1636.0391, 12.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2169.9453, -1689.4766, 12.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2136.9844, -1640.1406, 13.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 2139.0313, -1640.6953, 14.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 2177.7344, -1624.2344, 14.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2164.2656, -1614.1719, 12.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2131.0938, -1606.9453, 12.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2091.3125, -1489.4844, 8.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2122.6250, -1487.4297, 22.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2122.6250, -1470.9141, 22.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2159.7656, -1507.6250, 22.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2122.6250, -1451.3438, 22.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2122.6250, -1434.2969, 22.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2200.8203, -1447.3438, 23.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 714, 2356.5313, -1192.7188, 26.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 714, 2403.2891, -1368.6094, 22.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 714, 2356.3516, -1283.4063, 26.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 710, 2406.4453, -1321.4766, 39.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 710, 2438.3594, -1318.0938, 37.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2259.2656, -1773.2422, 11.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 2311.2656, -1500.7891, 22.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 2318.1953, -1500.8672, 23.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2336.9844, -1350.5781, 22.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2338.9141, -1336.4766, 22.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2558.5703, -1244.5703, 42.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 2559.9688, -1110.2188, 63.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2557.9531, -1101.3203, 62.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 2615.4531, -1245.4531, 47.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2583.2344, -1239.9531, 45.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2598.3359, -1239.9531, 45.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 2571.8906, -1107.4609, 64.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 710, 2515.4609, -1065.7422, 83.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2474.3828, -951.6484, 79.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 617, 2540.5859, -975.1641, 80.7422, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 1825.9141, -1836.1875, 16.3203, 0.25);
    RemoveBuildingForPlayer(playerid, 1256, 1463.9063, -1261.3594, 13.2344, 0.25);
    
    // SF
    
	RemoveBuildingForPlayer(playerid, 737, -2712.0781, 106.7109, 3.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -2491.1172, -175.3516, 25.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -2491.1172, -180.6563, 25.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -2491.1172, -185.9609, 25.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -2491.1172, -191.2734, 25.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -2491.1172, -170.0469, 25.8281, 0.25);
	
	// Broken Highway
	
	RemoveBuildingForPlayer(playerid, 10777, -1724.1953, 547.0859, 32.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 11375, -1724.1953, 547.0859, 32.3203, 0.25);
	
	// Pot Tables
	
	RemoveBuildingForPlayer(playerid, 3860, -2535.8359, -35.3438, 25.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 3862, -2536.0000, -26.3281, 25.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 3863, -2536.0625, -30.9688, 25.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 3863, -2523.1016, -37.9609, 25.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 3861, -2518.1797, -37.7813, 25.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 3863, -2513.3203, -37.6250, 25.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 3861, -2535.9297, -21.6250, 25.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 3862, -2536.1016, -7.0078, 25.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 3863, -2535.8438, -11.9375, 25.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 3860, -2536.2344, -16.2266, 25.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 3862, -2525.4063, -1.0625, 25.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 3860, -2529.1953, -1.4063, 25.7891, 0.25);
    
    // sjpd locker
    RemoveBuildingForPlayer(playerid, 14850, 264.0313, 117.8281, 1006.6016, 0.25);

    
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, sizeof(name));
    if (!IsRPName(name))
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "You have been kicked for using a NON-RP name, please use a name with a Firstname_Lastname format.");
        SetTimerEx("UnsetKick", 500, 0, "i", playerid);
    }
    return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
    Delete3DTextLabel(deathlabel[playerid]);
	if(IsBeingSpeced[playerid] == 1)//If the player being spectated, disconnects, then turn off the spec mode for the spectator.
	{
	    foreach(new i : Player)
	    {
	    	if(spectatorid[i] == playerid)
			{
				TogglePlayerSpectating(i, false);
			}
		}
	}
  	if(PlayerLogged[playerid] == true)
  	{
 		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
 		PlayerInfo[playerid][pXPos] = x;
		PlayerInfo[playerid][pYPos] = y;
		PlayerInfo[playerid][pZPos] = z;
		PlayerInfo[playerid][pInterior] = GetPlayerInterior(playerid);
		PlayerInfo[playerid][pVirtualWorld] = GetPlayerVirtualWorld(playerid);
   		OnPlayerDataSave(playerid);
   		Delete3DTextLabel(deathlabel[playerid]);
		if(reason == 0)
	 	{
	  		GetPlayerPos(playerid, x, y, z);
	 	 	PlayerInfo[playerid][pCrashX] = x;
			PlayerInfo[playerid][pCrashY] = y;
			PlayerInfo[playerid][pCrashZ] = z;
			PlayerInfo[playerid][pCrashInt] = GetPlayerInterior(playerid);
			PlayerInfo[playerid][pCrashWorld] = GetPlayerVirtualWorld(playerid);
			PlayerInfo[playerid][pCrashed] = 1;
			PlayerLocalMessage(playerid, 15.0, "has just crashed from the server.");
			KillTimer(GetPVarInt(playerid, "TazeTimer"));
			for(new i=0;i<47;i++) playerWeapons[playerid][i] = false;
			OnPlayerDataSave(playerid);
			Delete3DTextLabel(deathlabel[playerid]);
			
			/*new playername[24];
			GetPlayerName(playerid, playername, sizeof(playername));
			for(new i=1; i < MAX_DVEHICLES; i++)
			{
				if(VehicleCreated[i] == VEHICLE_PLAYER && strcmp(VehicleOwner[i], playername) == 0)
				{
					SetVehicleVirtualWorld(VehicleID[i], 100);
					SetVehicleVirtualWorld(VehicleID[i], 100);
					SetVehicleVirtualWorld(VehicleID[i], 100);
					SetVehiclePos(VehicleID[i], 154.8577, 213.5532, -0.4741);
					SetVehiclePos(VehicleID[i], 154.8577, 213.5532, -0.4741);
					SetVehiclePos(VehicleID[i], 154.8577, 213.5532, -0.4741);
				}
			}
			*/
			if(GetPVarType(playerid, "PlacedBB"))
	  		{
	    		DestroyDynamicObject(GetPVarInt(playerid, "PlacedBB"));
	      		DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, "BBLabel"));
	        	if(GetPVarType(playerid, "BBArea"))
		        {
					for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
					{
	           			if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
	           			{
	              			StopAudioStreamForPlayer(i);
	              			SCM(i, COLOR_LIGHTRED, " The boombox creator has disconnected from the server.");
		                }
	           		}
	        	}
	    	}
	  	}
	  	
	  	if (player[playerid][calling])
    	{
	        SendClientMessage(player[playerid][caller], -1, "(Cellphone:) Caller hung-up.");
	        player[playerid][calling] = false;
	        player[player[playerid][caller]][calling] = false;
	        stopphone(playerid);
	        stopphone(player[playerid][caller]);
	        player[player[playerid][caller]][caller] = 255;
	        player[playerid][caller] = 255;
    	}
    	else if (player[playerid][caller] != 255)
    	{
	        SendClientMessage(player[playerid][caller], -1, "(Cellphone:) Caller hung-up.");
	        stopphone(playerid);
	        stopphone(player[playerid][caller]);
	        player[player[playerid][caller]][caller] = 255;
	        player[playerid][caller] = 255;
    	}
	    player[playerid][caller] = 255;
	    player[playerid][calling] = false;

        PlayerLogged[playerid] = false;
	    PlayerLocalMessage(playerid, 15.0, "has quit the server.");
	 	FadePlayerDisconnect(playerid);
		TextDrawDestroy(SpeedoText[playerid]);
		KillTimer(GetPVarInt(playerid, "TazeTimer"));
		for(new i=0;i<47;i++) playerWeapons[playerid][i] = false;

		/*new playername[24];
		GetPlayerName(playerid, playername, sizeof(playername));
		for(new i=1; i < MAX_DVEHICLES; i++)
		{
			if(VehicleCreated[i] == VEHICLE_PLAYER && strcmp(VehicleOwner[i], playername) == 0)
			{
                SetVehicleVirtualWorld(VehicleID[i], 100);
                SetVehicleVirtualWorld(VehicleID[i], 100);
                SetVehicleVirtualWorld(VehicleID[i], 100);
				SetVehiclePos(VehicleID[i], 154.8577, 213.5532, -0.4741);
				SetVehiclePos(VehicleID[i], 154.8577, 213.5532, -0.4741);
				SetVehiclePos(VehicleID[i], 154.8577, 213.5532, -0.4741);
			}
		}
		*/
	    if(GetPVarType(playerid, "PlacedBB"))
	    {
	        DestroyDynamicObject(GetPVarInt(playerid, "PlacedBB"));
	        DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, "BBLabel"));
	        if(GetPVarType(playerid, "BBArea"))
	        {
				for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
				{
	                if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
	                {
	                    StopAudioStreamForPlayer(i);
	                    SCM(i, COLOR_LIGHTBLUE, " The boombox creator has disconnected from the server.");
	                }
	            }
	        }
		}

	    if(IsBeingSpeced[playerid] == 1)//If the player being spectated, disconnects, then turn off the spec mode for the spectator.
	    {
			for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
			{
	            if(spectatorid[i] == playerid)
	            {
	                TogglePlayerSpectating(i, false);// This justifies what's above, if it's not off then you'll be either spectating your connect screen, or somewhere in blueberry (I don't know why)
	            }
	        }
	    }
	}
    return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	SetSpawnInfo(playerid, 0, 26, 1742.9600, -1861.4019, 13.5776, 52.1403, 0, 0, 0, 0, 0, 0); // Without this you'll be kicked when you spawn. Set it to wherever you want.
    TogglePlayerSpectating(playerid, true);
    SetTimerEx("login_dialog", 100, 0, "i", playerid);
    return 1;
}

public OnPlayerSpawn(playerid)
{
    PreloadAnimLib(playerid, "BOMBER");
    PreloadAnimLib(playerid, "RAPPING");
    PreloadAnimLib(playerid, "SHOP");
    PreloadAnimLib(playerid, "BEACH");
    PreloadAnimLib(playerid, "SMOKING");
    PreloadAnimLib(playerid, "FOOD");
    PreloadAnimLib(playerid, "ON_LOOKERS");
    PreloadAnimLib(playerid, "DEALER");
    PreloadAnimLib(playerid, "CRACK");
    PreloadAnimLib(playerid, "CARRY");
    PreloadAnimLib(playerid, "COP_AMBIENT");
    PreloadAnimLib(playerid, "PARK");
    PreloadAnimLib(playerid, "INT_HOUSE");
    PreloadAnimLib(playerid, "FOOD" );
	PreloadAnimLib(playerid, "PED" );
	PreloadAnimLib(playerid, "BAR" );
	PreloadAnimLib(playerid, "BASEBALL" );
	PreloadAnimLib(playerid, "CAMERA" );
	PreloadAnimLib(playerid, "CAR" );
	PreloadAnimLib(playerid, "CHAINSAW" );
	PreloadAnimLib(playerid, "DANCING" );
	PreloadAnimLib(playerid, "GANGS" );
	PreloadAnimLib(playerid, "GHANDS" );
	PreloadAnimLib(playerid, "GRAFFITI" );
	PreloadAnimLib(playerid, "SPRAYCAN" );
	PreloadAnimLib(playerid, "STRIP" );
	PreloadAnimLib(playerid, "SCRATCHING" );
	PreloadAnimLib(playerid, "MISC" );
	PreloadAnimLib(playerid, "SWEET" );
	PreloadAnimLib(playerid, "BSKTBALL" );
	PreloadAnimLib(playerid, "BOX" );
	PreloadAnimLib(playerid, "CAR_CHAT" );
	PreloadAnimLib(playerid, "RIOT" );
	
	if(PlayerInfo[playerid][pXPos] == 0 && PlayerInfo[playerid][pYPos] == 0 && PlayerInfo[playerid][pZPos] == 0)
	{
 		PlayerInfo[playerid][pXPos] = 1742.9600;
   		PlayerInfo[playerid][pYPos] = -1861.4019;
     	PlayerInfo[playerid][pZPos] = 0.2426;
     	SetPlayerPos(playerid, 1742.9600, -1861.4019, 0.2426);
	}
	
	SetPlayerScore(playerid, 1);
	LoadPlayerSpawnData(playerid);

	SetPlayerColor(playerid, COLOR_WHITE);
	
	TextDrawShowForPlayer(playerid, ServerTimeTXT);

	TextDrawShowForPlayer(playerid, txtTimeDisp);
	
	if(IsSpecing[playerid] == 1)
	{
		SetPlayerPos(playerid, SpecX[playerid], SpecY[playerid], SpecZ[playerid]);// Remember earlier we stored the positions in these variables, now we're gonna get them from the variables.
		SetPlayerInterior(playerid, Inter[playerid]);//Setting the player's interior to when they typed '/spec'
		SetPlayerVirtualWorld(playerid, vWorld[playerid]);//Setting the player's virtual world to when they typed '/spec'
		IsSpecing[playerid] = 0;//Just saying you're free to use '/spec' again YAY :D
		IsBeingSpeced[spectatorid[playerid]] = 0;//Just saying that the player who was being spectated, is not free from your stalking >:D
		SetPlayerColor(playerid, Previous_Colour[playerid]);
	}
	
	FadeColorForPlayer(playerid, 0, 0, 0, 255, 0, 0, 0, 0, 15, 0);
	SetPlayerHealth(playerid, 90.0);
	if(PlayerLogged[playerid] == false) return Kick(playerid);
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pCrashed] == 1)
		{
		    SetPlayerPos(playerid, PlayerInfo[playerid][pCrashX], PlayerInfo[playerid][pCrashY], PlayerInfo[playerid][pCrashZ]);
		    SetPlayerInterior(playerid, PlayerInfo[playerid][pCrashInt]);
			SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pCrashWorld]);
			PlayerInfo[playerid][pCrashed] = 0;
			GameTextForPlayer(playerid, "~r~Crashed...~n~~w~Returning to previous position.", 7000, 6);
			ClearAnimations(playerid);

			if(PlayerInfo[playerid][pGender] == 0)
			{
				PlayerLocalMessage(playerid, 15.0, "was set back to his previous position.");
			}
			else
			{
			    PlayerLocalMessage(playerid, 15.0, "was set back to her previous position.");
			}
			return 1;
		}

		if(isAlive[playerid] == false)
		{
		    SetPlayerPos(playerid, Deadx[playerid], Deady[playerid], Deadz[playerid]);
		    SetPlayerInterior(playerid, deadint[playerid]);
		    SetPlayerVirtualWorld(playerid, deadvw[playerid]);
			stopanimAllowed[playerid] = false;
		    SCM(playerid, COLOR_LIGHTRED, "You're currently brutally wounded. If no-one helps you, you will die. /acceptdeath if you wish to give up.");
	     	TogglePlayerControllable(playerid, 0);
	 	    SetTimerEx("LoadDeathAnim", 1000, false, "i", playerid);
    		SetPlayerSkin(playerid, oldskin[playerid]);
    		for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(i, playerid, true);

      		new string[400];
    		new holder[400];


			if(sInfo[playerid][Misc] > 0)
			{
			    format(string, sizeof(string), ""COL_RED"%d bruises on their body.\n", sInfo[playerid][Misc]);
			    strcat(holder, string, sizeof(holder));
			}
			if(sInfo[playerid][Head] > 0)
			{
			    format(string, sizeof(string), ""COL_RED"%d gun shot wound(s) in the head.\n", sInfo[playerid][Head]);
			    strcat(holder, string, sizeof(holder));
			}
			if(sInfo[playerid][Chest] > 0)
			{
			    format(string, sizeof(string), ""COL_RED"%d gun shot wound(s) in the chest.\n", sInfo[playerid][Chest]);
			    strcat(holder, string, sizeof(holder));
			}
			if(sInfo[playerid][Crotch] > 0)
			{
			    format(string, sizeof(string), ""COL_RED"%d gun shot wound(s) in the crotch.\n", sInfo[playerid][Crotch]);
			    strcat(holder, string, sizeof(holder));
			}
			if(sInfo[playerid][LArm] > 0)
			{
			    format(string, sizeof(string), ""COL_RED"%d gun shot wound(s) in the left arm.\n", sInfo[playerid][LArm]);
			    strcat(holder, string, sizeof(holder));
			}
			if(sInfo[playerid][RArm] > 0)
			{
			    format(string, sizeof(string), ""COL_RED"%d gun shot wound(s) in the right arm.\n", sInfo[playerid][RArm]);
       			strcat(holder, string, sizeof(holder));
			}
			if(sInfo[playerid][LLeg] > 0)
			{
			    format(string, sizeof(string), ""COL_RED"%d gun shot wound(s) in the left leg.\n", sInfo[playerid][LLeg]);
			   	strcat(holder, string, sizeof(holder));
			}
			if(sInfo[playerid][RLeg] > 0)
			{
			    format(string, sizeof(string), ""COL_RED"%d gun shot wound(s) in the right leg.\n", sInfo[playerid][RLeg]);
			    strcat(holder, string, sizeof(holder));
   			}
			deathlabel[playerid] = Create3DTextLabel(holder, -1, Deadx[playerid], Deady[playerid], Deadz[playerid], 10.0, 0, 0);
		}
		
		new house = PlayerInfo[playerid][HouseID];
		if(house != 0)
		{
			if(isAlive[playerid] == true)
			{
 				new string[128];
 				InsideHouse[playerid] = house;
				SetPlayerInterior(playerid, HouseInfo[house][hInsideInt]);
				SetPlayerPos(playerid, HouseInfo[house][hExitX], HouseInfo[house][hExitY], HouseInfo[house][hExitZ]);
				SetPlayerVirtualWorld(playerid, house);
				ClearAnimations(playerid);
				format(string, sizeof(string), "Welcome back to your home, %s.", GetName(playerid));
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
		if(PlayerInfo[playerid][pJailed] == 1)
		{
		   	SetPlayerPos(playerid, 223.3741, 110.1803, 999.0156);
		   	SetPlayerInterior(playerid, 6);
		}
		if(IsSpecing[playerid] == 1)
	    {
	        SetPlayerPos(playerid, SpecX[playerid], SpecY[playerid], SpecZ[playerid]);// Remember earlier we stored the positions in these variables, now we're gonna get them from the variables.
	        SetPlayerInterior(playerid, Inter[playerid]);//Setting the player's interior to when they typed '/spec'
	        SetPlayerVirtualWorld(playerid, vWorld[playerid]);//Setting the player's virtual world to when they typed '/spec'
	        IsSpecing[playerid] = 0;//Just saying you're free to use '/spec' again YAY :D
	        IsBeingSpeced[spectatorid[playerid]] = 0;//Just saying that the player who was being spectated, is not free from your stalking >:D
	    }
	}
 	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
    new Float:HP;
    GetPlayerHealth(playerid, HP);
    if(weaponid == 4) SetPlayerHealth(playerid, HP-30);
    if(weaponid == 22) SetPlayerHealth(playerid, HP-25);
    if(weaponid == 32) SetPlayerHealth(playerid, HP-25);
    if(weaponid == 28) SetPlayerHealth(playerid, HP-25);
    if(weaponid == 30) SetPlayerHealth(playerid, HP-30);
    if(weaponid == 31) SetPlayerHealth(playerid, HP-21);
    if(weaponid == 34) SetPlayerHealth(playerid, HP-70);
    if(weaponid == 29) SetPlayerHealth(playerid, HP-25);

    if(weaponid == 25) SetPlayerHealth(playerid, HP-40);
    if(issuerid != INVALID_PLAYER_ID)
   	{
   	    if(weaponid == 0 || weaponid == 1 || weaponid == 2 || weaponid == 3 || weaponid == 4 || weaponid == 5 ||
		    weaponid == 6 || weaponid == 7 || weaponid == 8 || weaponid == 15)
   	    {
   			sInfo[playerid][Misc] += 1;
		}
   	}
  	if(issuerid != INVALID_PLAYER_ID && weaponid == 34 && bodypart == 9)
   	{
		SetPlayerHealth(playerid, 0.0);
   	}
  	if(issuerid != INVALID_PLAYER_ID && bodypart == 3)
   	{
   		if(weaponid == 22 || weaponid == 23 || weaponid == 24 || weaponid == 25 || weaponid == 26 || weaponid == 27 ||
		    weaponid == 28 || weaponid == 29 || weaponid == 30 || weaponid == 31 || weaponid == 32 || weaponid == 33 || weaponid == 34)
   	    {
   			sInfo[playerid][Chest] += 1;
		}
   	}
  	if(issuerid != INVALID_PLAYER_ID && bodypart == 4)
   	{
   		if(weaponid == 22 || weaponid == 23 || weaponid == 24 || weaponid == 25 || weaponid == 26 || weaponid == 27 ||
		    weaponid == 28 || weaponid == 29 || weaponid == 30 || weaponid == 31 || weaponid == 32 || weaponid == 33 || weaponid == 34)
   	    {
   			sInfo[playerid][Crotch] += 1;
		}
   	}
  	if(issuerid != INVALID_PLAYER_ID && bodypart == 5)
   	{
   		if(weaponid == 22 || weaponid == 23 || weaponid == 24 || weaponid == 25 || weaponid == 26 || weaponid == 27 ||
		    weaponid == 28 || weaponid == 29 || weaponid == 30 || weaponid == 31 || weaponid == 32 || weaponid == 33 || weaponid == 34)
   	    {
   			sInfo[playerid][LArm] += 1;
		}
   	}
  	if(issuerid != INVALID_PLAYER_ID && bodypart == 6)
   	{
   		if(weaponid == 22 || weaponid == 23 || weaponid == 24 || weaponid == 25 || weaponid == 26 || weaponid == 27 ||
		    weaponid == 28 || weaponid == 29 || weaponid == 30 || weaponid == 31 || weaponid == 32 || weaponid == 33 || weaponid == 34)
   	    {
   			sInfo[playerid][RArm] += 1;
		}
   	}
  	if(issuerid != INVALID_PLAYER_ID && bodypart == 7)
   	{
   		if(weaponid == 22 || weaponid == 23 || weaponid == 24 || weaponid == 25 || weaponid == 26 || weaponid == 27 ||
		    weaponid == 28 || weaponid == 29 || weaponid == 30 || weaponid == 31 || weaponid == 32 || weaponid == 33 || weaponid == 34)
   	    {
   			sInfo[playerid][LLeg] += 1;
		}
   	}
  	if(issuerid != INVALID_PLAYER_ID && bodypart == 8)
   	{
   		if(weaponid == 22 || weaponid == 23 || weaponid == 24 || weaponid == 25 || weaponid == 26 || weaponid == 27 ||
		    weaponid == 28 || weaponid == 29 || weaponid == 30 || weaponid == 31 || weaponid == 32 || weaponid == 33 || weaponid == 34)
   	    {
   			sInfo[playerid][RLeg] += 1;
		}
   	}
  	if(issuerid != INVALID_PLAYER_ID && bodypart == 9)
   	{
   		if(weaponid == 22 || weaponid == 23 || weaponid == 24 || weaponid == 25 || weaponid == 26 || weaponid == 27 ||
		    weaponid == 28 || weaponid == 29 || weaponid == 30 || weaponid == 31 || weaponid == 32 || weaponid == 33 || weaponid == 34)
   	    {
   	    	SetPlayerHealth(playerid, HP-70);
   			sInfo[playerid][Head] += 1;
		}
   	}
    return 1;
}

public PlayerActionMessage(playerid, Float:radius, const message[])
{
	new
	string[128];

	format(string, sizeof(string), "* %s %s", GetName(playerid), message);
	ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    new vehicleid = GetPlayerVehicleID(playerid);
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)// If the player's state changes to a vehicle state we'll have to spec the vehicle.
	{
		if(IsBeingSpeced[playerid] == 1)//If the player being spectated, enters a vehicle, then let the spectator spectate the vehicle.
		{
	    	foreach(new i : Player)
	    	{
	    		if(spectatorid[i] == playerid)
				{
					PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));// Letting the spectator, spectate the vehicle of the player being spectated (I hope you understand this xD)
				}
			}
		}
	}
	if(newstate == PLAYER_STATE_ONFOOT)
	{
		if(IsBeingSpeced[playerid] == 1)//If the player being spectated, exists a vehicle, then let the spectator spectate the player.
		{
		    foreach(new i : Player)
		    {
		    	if(spectatorid[i] == playerid)
				{
					PlayerSpectatePlayer(i, playerid);// Letting the spectator, spectate the player who exited the vehicle.
				}
			}
		}
	}
	if(IsPlayerInAnyVehicle(playerid) && !IsBicycle(GetPlayerVehicleID(playerid)))
	{
		//TextDrawShowForPlayer(playerid, SpeedoBox);
		TextDrawShowForPlayer(playerid, SpeedoText[playerid]);
		if(VehicleSecurity[vehicleid] == 1)
		{
			ToggleAlarm(vehicleid, VEHICLE_PARAMS_ON);
			SetTimerEx("StopAlarm", ALARM_TIME, false, "d", vehicleid);
		}
	}
	else
	{
		//TextDrawHideForPlayer(playerid, SpeedoBox);
		TextDrawHideForPlayer(playerid, SpeedoText[playerid]);
	}
	if(newstate == PLAYER_STATE_PASSENGER)
	{
		if(GetPlayerWeapon(playerid) == 24 || GetPlayerWeapon(playerid) == 23 || GetPlayerWeapon(playerid) == 26 || GetPlayerWeapon(playerid) == 34)
		{
		    SetPlayerArmedWeapon(playerid, 0);
		}
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{
 		SetPlayerArmedWeapon(playerid, 0);
	}
	if(oldstate == PLAYER_STATE_DRIVER)
	{
		for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
		{
			ShowPlayerNameTagForPlayer(i, playerid, 1);
		}
	}
	
	if(oldstate == PLAYER_STATE_PASSENGER)
	{
		for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
		{
			ShowPlayerNameTagForPlayer(i, playerid, 1);
		}
	}

	if(newstate == PLAYER_STATE_DRIVER)
	{
		new id = GetVehicleID(vehicleid);
		if(IsValidVehicle(id))
		{
			if(VehicleCreated[id] == VEHICLE_DEALERSHIP)
			{
				SetPVarInt(playerid, "DialogValue1", id);
				ShowDialog(playerid, DIALOG_VEHICLE_BUY);
				return 1;
			}
		}
		if(IsBicycle(vehicleid))
		{
			ToggleEngine(vehicleid, VEHICLE_PARAMS_ON);
		}
		if(Fuel[vehicleid] <= 0)
		{
			ToggleEngine(vehicleid, VEHICLE_PARAMS_OFF);
		}
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{
	    if(windows[GetPlayerVehicleID(playerid)][0] == 0)
	    {
			for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
			{
   				if(!IsBicycle(vehicleid))
		    	{
 					ShowPlayerNameTagForPlayer(i, playerid, 0);
				}
			}
		}
	}
	else if(windows[GetPlayerVehicleID(playerid)][0] == 1)
	{
		for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
		{
			if(!IsBicycle(vehicleid))
  			{
				ShowPlayerNameTagForPlayer(i, playerid, 1);
			}
		}
	}
	if(newstate == PLAYER_STATE_PASSENGER)
	{
	    new seat = GetPlayerVehicleSeat(playerid);
		if(seat == 1)
		{
		    if(windows[GetPlayerVehicleID(playerid)][1] == 0)
		    {
				for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
				{
 					if(!IsBicycle(vehicleid))
  					{
		   	 			ShowPlayerNameTagForPlayer(i, playerid, 0);
					}
				}
			}
			else if(windows[GetPlayerVehicleID(playerid)][1] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
				{
 					if(!IsBicycle(vehicleid))
  					{
	 					ShowPlayerNameTagForPlayer(i, playerid, 1);
					}
				}
			}
		}
		else if(seat == 2)
		{
		    if(windows[GetPlayerVehicleID(playerid)][2] == 0)
		    {
				for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
				{
 					if(!IsBicycle(vehicleid))
  					{
		   	 			ShowPlayerNameTagForPlayer(i, playerid, 0);
					}
				}
			}
			else if(windows[GetPlayerVehicleID(playerid)][2] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
				{
 					if(!IsBicycle(vehicleid))
  					{
	 					ShowPlayerNameTagForPlayer(i, playerid, 1);
					}
				}
			}
		}
		else if(seat == 3)
		{
		    if(windows[GetPlayerVehicleID(playerid)][3] == 0)
		    {
				for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
				{
 					if(!IsBicycle(vehicleid))
  					{
		   	 			ShowPlayerNameTagForPlayer(i, playerid, 0);
					}
				}
			}
			else if(windows[GetPlayerVehicleID(playerid)][3] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
				{
					if(!IsBicycle(vehicleid))
  					{
	 					ShowPlayerNameTagForPlayer(i, playerid, 1);
					}
				}
			}
		}
	}
	if(newstate == PLAYER_STATE_DRIVER)
    {
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			if(PlayerInfo[playerid][pJob] == 10)
			{
			    if(SouthRoute[playerid] == 0)
			    {
					SetPlayerCheckpoint(playerid, 1824.1182, -1828.6512, 13.5151, 3.5);
					DownRoute[playerid] = 1;
				   	SCM(playerid, COLOR_WHITE, "* Drive through all of the checkpoints slowly to complete the route. Check your mini-map if you can't see the checkpoints.");
				   	SCM(playerid, COLOR_WHITE, "* Do NOT leave your bus and always STOP at every bus-stops and let people enter and exit the bus.");
				   	SCM(playerid, COLOR_WHITE, "* Abusing this job in any way, non-rping or driving non-rply will lead to a BAN.");
				   	ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Unity 69 Cents!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
				}
				else
				{
				    LeftBus[playerid] = 0;
				}
			}
			else
			{
				RemovePlayerFromVehicle(playerid);
    			SCM(playerid, COLOR_LIGHTRED, "You are not a bus driver.");
            }
        }
    }
	if(newstate == PLAYER_STATE_DRIVER)
    {
		if(IsPlayerInVehicle(playerid, southbus))
		{
			if(PlayerInfo[playerid][pJob] == 10)
			{
			    if(SouthRoute[playerid] == 0)
			    {
					SetPlayerCheckpoint(playerid, 1824.0848, -1826.0269, 13.0723, 3.5);
					SouthRoute[playerid] = 1;
				   	SCM(playerid, COLOR_WHITE, "* Drive through all of the checkpoints slowly to complete the route. Check your mini-map if you can't see the checkpoints.");
				   	SCM(playerid, COLOR_WHITE, "* Do NOT leave your bus and always STOP at every bus-stops and let people enter and exit the bus.");
				   	SCM(playerid, COLOR_WHITE, "* Abusing this job in any way, non-rping or driving non-rply will lead to a BAN.");
				   	ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] Unity 69 Cents!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
				}
				else
				{
				    LeftBus[playerid] = 0;
				}
			}
			else
			{
				RemovePlayerFromVehicle(playerid);
    			SCM(playerid, COLOR_LIGHTRED, "You are not a bus driver.");
            }
        }
    }
	if(newstate == PLAYER_STATE_DRIVER)
    {
		if(IsPlayerInVehicle(playerid, westbus))
		{
			if(PlayerInfo[playerid][pJob] == 10)
			{
			    if(EastRoute[playerid] == 0)
			    {
					SetPlayerCheckpoint(playerid, 1824.6315, -1826.8262, 13.0730, 3.5);
					EastRoute[playerid] = 1;
				   	SCM(playerid, COLOR_WHITE, "* Drive through all of the checkpoints slowly to complete the route. Check your mini-map if you can't see the checkpoints.");
				   	SCM(playerid, COLOR_WHITE, "* Do NOT leave your bus and always STOP at every bus-stops and let people enter and exit the bus.");
				   	SCM(playerid, COLOR_WHITE, "* Abusing this job in any way, non-rping or driving non-rply will lead to a BAN.");

					ProxDetector(20.0, playerid, "[East Suburban Route, NEXT:] Unity Station 69 Cents!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
				}
				else
				{
				    LeftBus[playerid] = 0;
				}
			}
			else
			{
				RemovePlayerFromVehicle(playerid);
    			SCM(playerid, COLOR_LIGHTRED, "You are not a bus driver.");
    			LeftBus[playerid] = 0;
            }
        }
    }
    if(newstate == PLAYER_STATE_DRIVER)
    {
		for(new i=0; i<8; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
  				if(PlayerInfo[playerid][pJob] == 11)
  				{
		    		if(PizzaCP1[playerid] == 0 && PizzaCP2[playerid] == 0)
 			    	{
 			    	    new PizzaRoute = 0 + random(2);
 			    	    if(PizzaRoute == 0)
 			    	    {
 			    	        // Route 1
	     					SetPlayerCheckpoint(playerid, 2073.5154, -1733.2930, 13.1422, 3.0);
	       					PizzaCP1[playerid] = 1;
		    			    SCM(playerid, COLOR_WHITE, "* Drive through all of the checkpoints to finish the route. Check your mini-map if you can't see the checkpoints.");
		    			    SCM(playerid, COLOR_WHITE, "* If you leave the vehicle it will respawn.");
						}
						else if(PizzaRoute == 1)
						{
						    // Route 2
 							SetPlayerCheckpoint(playerid, 2178.6392, -1769.5964, 13.1410, 3.0);
	       					PizzaCP2[playerid] = 1;
		    			    SCM(playerid, COLOR_WHITE, "* Drive through all of the checkpoints to finish the route. Check your mini-map if you can't see the checkpoints.");
		    			    SCM(playerid, COLOR_WHITE, "* If you leave the vehicle it will respawn.");
						}
					}
					else
					{
	    				LeftPizzaBoy[playerid] = 0;
					}
    			}
				else
				{
					RemovePlayerFromVehicle(playerid);
	    			SCM(playerid, COLOR_LIGHTRED, "You are not a pizzaboy.");
	    			LeftPizzaBoy[playerid] = 0;
            	}
            }
        }
    }
    if(newstate == PLAYER_STATE_DRIVER)
    {
		for(new i=0; i<4; i++)
		{
			if(IsPlayerInVehicle(playerid, DMVcar[i]))
			{
  				if(PlayerInfo[playerid][pDriverLicense] == 0)
  				{
        			if(TakingDriverLicense[playerid] == true)
        			{
        			    if(DMVcp[playerid] == 0)
        			    {
	        				SetPlayerCheckpoint(playerid, 2045.7646, -1930.0442, 13.0410, 3.0);
		        			DMVcp[playerid] = 1;
		    			    SCM(playerid, COLOR_WHITE, "* Drive through all of the checkpoints slowly to pass the test. Check your mini-map if you can't see the checkpoints.");
		    			    SCM(playerid, COLOR_WHITE, "* If you leave the vehicle it will respawn.");
						}
						else
						{
						    LeftDMVCar[playerid] = 0;
						}
					}
					else
					{
					    RemovePlayerFromVehicle(playerid);
					    SCM(playerid, COLOR_LIGHTRED, "You are not taking a driver-license test.");
					}
				}
				else
				{
    				RemovePlayerFromVehicle(playerid);
				    SCM(playerid, COLOR_LIGHTRED, "You already have a drivers license.");
				}
            }
        }
    }
    if(newstate == PLAYER_STATE_DRIVER)
    {
		for(new i=0; i<5; i++)
		{
			if(IsPlayerInVehicle(playerid, JunkCar[i]))
			{
				if(WorkingJunk[playerid] == true)
				{
					SetPlayerCheckpoint(playerid, -1843.1804, -1647.9569, 21.4182, 3.0);
					JunkCP[playerid] = 1;
				   	SCM(playerid, COLOR_WHITE, "Drive through all of the checkpoints to complete your shift.");
				   	SCM(playerid, COLOR_WHITE, "If you leave the vehicle the job will restart and the vehicle will respawn.");
				   	SCM(playerid, COLOR_WHITE, "Try not to damage the vehicle.");
				}
				else
				{
    				RemovePlayerFromVehicle(playerid);
				    SCM(playerid, COLOR_LIGHTRED, "You are not working.");
				}
			}
   		}
   	}
    if(newstate == PLAYER_STATE_DRIVER)
    {
   		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 487 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 488 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 497 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 513 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 512 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 511 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 519 ||
		   GetVehicleModel(GetPlayerVehicleID(playerid)) == 520 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 548 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 553 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 563 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 577 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 592 ||
		   GetVehicleModel(GetPlayerVehicleID(playerid)) == 593 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 417 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 425 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 476 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 469)
		{
			GivePlayerWeapon(playerid, 46, 1);
			GivePlayerWeapon(playerid, 46, 0);
		}
	}
    if(newstate == PLAYER_STATE_DRIVER)
    {
		for(new i=0; i<MAX_LUMBERCARS; i++)
		{
			if(IsPlayerInVehicle(playerid, LumberCar[i]))
			{
				if(WorkingLumber[playerid] == true)
				{
					if(LumberCP[playerid] == 0)
					{
						SetPlayerCheckpoint(playerid, -2219.23193, -2165.13379, 41.66151, 1.0);
						LumberCP[playerid] = 1;
					   	SCM(playerid, COLOR_WHITE, "Drive to the checkpoint.");
					}
				}
				else
				{
    				RemovePlayerFromVehicle(playerid);
				    SCM(playerid, COLOR_LIGHTRED, "You are not working.");
				}
			}
   		}
   	}
    if(newstate == PLAYER_STATE_DRIVER)
    {
		for(new i=0; i<MAX_COPCARS; i++)
		{
			if(IsPlayerInVehicle(playerid, PoliceCar[i]))
			{
  				if(PlayerInfo[playerid][pFaction] != 2)
  				{
    				RemovePlayerFromVehicle(playerid);
				}
            }
        }
    }
    if(newstate == PLAYER_STATE_DRIVER)
    {
		for(new i=0; i<MAX_GOVCARS; i++)
		{
			if(IsPlayerInVehicle(playerid, GovCar[i]))
			{
  				if(PlayerInfo[playerid][pFaction] != 1)
  				{
    				RemovePlayerFromVehicle(playerid);
				}
            }
        }
    }
    if(newstate == PLAYER_STATE_DRIVER)// If the player's state changes to a vehicle state we'll have to spec the vehicle.
    {
		if(PlayerInfo[playerid][pDriverLicense] == 0)
		{
		    if(!IsBicycle(vehicleid))
		    {
		    	SCM(playerid, COLOR_LIGHTRED, "You do not have a drivers license, watch out for the police.");
		    	return 1;
			}
		}
    }
    if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)// If the player's state changes to a vehicle state we'll have to spec the vehicle.
    {
        if(IsBeingSpeced[playerid] == 1)//If the player being spectated, enters a vehicle, then let the spectator spectate the vehicle.
        {
			for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
			{
                if(spectatorid[i] == playerid)
                {
                    PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));// Letting the spectator, spectate the vehicle of the player being spectated (I hope you understand this xD)
                }
            }
        }
    }
    if(newstate == PLAYER_STATE_ONFOOT)
    {
        if(IsBeingSpeced[playerid] == 1)//If the player being spectated, exists a vehicle, then let the spectator spectate the player.
        {
			for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
			{
                if(spectatorid[i] == playerid)
                {
                    PlayerSpectatePlayer(i, playerid);// Letting the spectator, spectate the player who exited the vehicle.
                }
            }
        }
    }
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
 	for(new i=0; i<MAX_DMVCARS; i++)
	{
		if(IsPlayerInVehicle(playerid, DMVcar[i]))
		{
			dmvcar[playerid] = GetPlayerVehicleID(playerid);
			SCM(playerid, COLOR_LIGHTRED, "You have 60 seconds to get back in your DMV vehicle!");
   			DMVtimer1[playerid] = 60;
			LeftDMVCar[playerid] = 1;
		}
	}
	for(new i=0; i<8; i++)
	{
		if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
		{
			pizzaboy[playerid] = GetPlayerVehicleID(playerid);
			SCM(playerid, COLOR_LIGHTRED, "You have 60 seconds to get back on your PizzaBoy!");
   			PizzaTimer1[playerid] = 60;
			LeftPizzaBoy[playerid] = 1;
		}
	}
	if(IsPlayerInVehicle(playerid, westbus))
	{
	    if(PlayerInfo[playerid][pJob] == 10)
	    {
	        if(GetPlayerVehicleSeat(playerid) == 0)
	        {
				SCM(playerid, COLOR_LIGHTRED, "You have 60 seconds to get back in your bus!");
				BUSTimer1[playerid] = 60;
				LeftBus[playerid] = 1;
			}
		}
	}
	if(IsPlayerInVehicle(playerid, southbus))
	{
 		if(PlayerInfo[playerid][pJob] == 10)
	    {
	        if(GetPlayerVehicleSeat(playerid) == 0)
	        {
				SCM(playerid, COLOR_LIGHTRED, "You have 60 seconds to get back in your bus!");
				BUSTimer1[playerid] = 60;
				LeftBus[playerid] = 1;
			}
		}
	}
	if(IsPlayerInVehicle(playerid, downtownbus))
	{
		if(PlayerInfo[playerid][pJob] == 10)
	    {
	        if(GetPlayerVehicleSeat(playerid) == 0)
	        {
				SCM(playerid, COLOR_LIGHTRED, "You have 60 seconds to get back in your bus!");
				BUSTimer1[playerid] = 60;
				LeftBus[playerid] = 1;
			}
		}
	}
 	for(new i=0; i<MAX_JUNKCARS; i++)
	{
		if(IsPlayerInVehicle(playerid, JunkCar[i]))
		{
			new vehicle;
			vehicle = GetPlayerVehicleID(playerid);
			SetVehicleToRespawn(vehicle);
			SCM(playerid, COLOR_WHITE, "You have left your job-vehicle and it has respawned.");
			WorkingJunk[playerid] = false;
			TogglePlayerControllable(playerid, 1);
			JunkCP[playerid] = 0;
		}
	}
    return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
if(response)
{
    if(dialogid == 75)
    {
    	if(!response)
     	{
        	return 1;
        }
		switch(listitem)
  		{
    		case 0:
      		{
      		    ShowPlayerDialog(playerid, DIALOG_BOOMBOX1, DIALOG_STYLE_LIST, "Jazz", "Jazz 1\nJazz 2", "Select", "Cancel");
            }
            case 1:
            {
                ShowPlayerDialog(playerid, DIALOG_BOOMBOX2, DIALOG_STYLE_LIST, "Pop", "Pop\n80's and 90's hits", "Select", "Cancel");
            }
            case 2:
            {
                ShowPlayerDialog(playerid, DIALOG_BOOMBOX3, DIALOG_STYLE_LIST, "Hip-Hop", "Underground Hip-Hop\nRap", "Select", "Cancel");
            }
            case 3:
            {
                ShowPlayerDialog(playerid, DIALOG_BOOMBOX4, DIALOG_STYLE_LIST, "R&B", "Soul R&B\nJamm FM", "Select", "Cancel");
			}
			case 4:
			{
			    ShowPlayerDialog(playerid, DIALOG_BOOMBOX5, DIALOG_STYLE_LIST, "Rock", "Classic Rock\nMetal", "Select", "Cancel");
			}
			case 5:
			{
			    ShowPlayerDialog(playerid, DIALOG_BOOMBOX6, DIALOG_STYLE_LIST, "Country", "181 Kicking Country\nAbsolute Country Radio", "Select", "Cancel");
			}
			case 6:
			{
			    ShowPlayerDialog(playerid, DIALOG_BOOMBOX7, DIALOG_STYLE_INPUT, "Boombox Input URL", "Please put a Music URL to play the Music", "Play", "Cancel");
			}
			case 7:
			{
                if(GetPVarType(playerid, "BBArea"))
			    {
			        PlayerActionMessage(playerid, 20.0, "turns his boombox off.");
			        foreach(new i : Player)
					{
			            if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
			            {
			                StopStream(i);
						}
					}
			        DeletePVar(playerid, "BBStation");
				}
			}
        }
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX1)//JAZZ
	{
	    if(!response)
	    {
     		ShowPlayerDialog(playerid, DIALOG_BOOMBOX, DIALOG_STYLE_LIST, "Radio List", "Jazz\nPop\nHip-Hop\nR&B and Urban\nRock\nCountry\nEnter URL\nTurn Off Boombox", "Select", "Cancel");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(new i : Player)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=512156", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=512156");
				}
			}
		 	if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(new i : Player)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=80339", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=80339");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX2)//POP
	{
	    if(!response)
	    {
   			ShowPlayerDialog(playerid, DIALOG_BOOMBOX, DIALOG_STYLE_LIST, "Radio List", "Jazz\nPop\nHip-Hop\nR&B and Urban\nRock\nCountry\nEnter URL\nTurn Off Boombox", "Select", "Cancel");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(new i : Player)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=193174", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=193174");
				}
			}
			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(new i : Player)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=60368", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=60368");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX3)//HIP-HOP
	{
	    if(!response)
	    {
     		ShowPlayerDialog(playerid, DIALOG_BOOMBOX, DIALOG_STYLE_LIST, "Radio List", "Jazz\nPop\nHip-Hop\nR&B and Urban\nRock\nCountry\nEnter URL\nTurn Off Boombox", "Select", "Cancel");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
        			foreach(new i : Player)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1338495", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1338495");
    			}
   			}
   			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(new i : Player)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=8318", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=8318");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX4)//R&B
	{
	    if(!response)
	    {
     		ShowPlayerDialog(playerid, DIALOG_BOOMBOX, DIALOG_STYLE_LIST, "Radio List", "Jazz\nPop\nHip-Hop\nR&B and Urban\nRock\nCountry\nEnter URL\nTurn Off Boombox", "Select", "Cancel");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(new i : Player)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=190368", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=190368");
				}
			}
			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(new i : Player)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=222296", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=222296");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX5)//ROCK
	{
	    if(!response)
	    {
     		ShowPlayerDialog(playerid, DIALOG_BOOMBOX, DIALOG_STYLE_LIST, "Radio List", "Jazz\nPop\nHip-Hop\nR&B and Urban\nRock\nCountry\nEnter URL\nTurn Off Boombox", "Select", "Cancel");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(new i : Player)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1546850", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1546850");
				}
			}
   			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(new i : Player)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=428460", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=428460");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX6)//COUNTRY
	{
	    if(!response)
	    {
	       ShowPlayerDialog(playerid, DIALOG_BOOMBOX, DIALOG_STYLE_LIST, "Radio List", "Jazz\nPop\nHip-Hop\nR&B and Urban\nRock\nCountry\nEnter URL\nTurn Off Boombox", "Select", "Cancel");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(new i : Player)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=557317", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=557317");
				}
			}
   			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(new i : Player)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=306487", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=306487");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX7)//SET URL
	{
		if(response == 1)
		{
		    if(isnull(inputtext))
		    {
		        SCM(playerid, COLOR_LIGHTRED, "You didn't type in any URL.");
		        return 1;
		    }
		    if(strlen(inputtext))
		    {
		        if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(new i : Player)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, inputtext, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", inputtext);
				}
			}
		}
		return 1;
	}
    switch( dialogid )
    {
	   	case DIALOG_DRUGSNGUNS:
      	  {
  		        switch(listitem)
   		    {
    	    	   case 0:
     	   	   {
       	    		ShowPlayerDialog(playerid, 10, DIALOG_STYLE_LIST, "What kind of drugs, homie?", "(10g)Marijuana($50)\n(10g)Cocaine($300)\n(5g)LSD($50)", "Choose", "Cancel");
    	    	   }
    	    	   case 1:
    	    	   {
	       	    	   ShowPlayerDialog(playerid, 15, DIALOG_STYLE_LIST, "What kind of weapons, homie?", "Knife($100)\nBaseball Bat($50)", "Choose", "Cancel");
    	    	   }
			}
		}
		case DIALOG_USE:
  		{
           	switch(listitem)
        	{
        	    case 0:
        	    {

    				if (PlayerInfo[playerid][pBeer] < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have any beers.");

				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
				    IsDrinkingBeer[playerid] = 1;
       				new string2[128];
				    format(string2, sizeof(string2), "* %s opens a beer.", GetName(playerid));
				    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);

				    PlayerInfo[playerid][pBeer] -= 1;
        	    }
        	    case 1:
        	    {
    				if (PlayerInfo[playerid][pCigarettes] < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have any cigarettes.");

				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
				    IsSmokingCigarette[playerid] = 1;
    				new string2[128];
				    format(string2, sizeof(string2), "* %s lights up a cigarette.", GetName(playerid));
				    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);

				    PlayerInfo[playerid][pCigarettes] -= 1;
				    PlayerActionMessage(playerid, 15.0, "lights up a cigarette.");
        	    }
        	    case 2:
        	    {
	            	ShowPlayerDialog(playerid, DIALOG_DRUGS, DIALOG_STYLE_LIST, "Drugs", "Marijuana\nCocaine\nLSD\nMeth\nEcstasy", "Next", "Cancel");
				}
        	    case 3:
        	    {
                    ShowPlayerDialog(playerid, 76, DIALOG_STYLE_LIST, "Boombox", "Use\nChange Channel\nPickup", "Use", "Cancel");
        	    }
        	    case 4:
        	    {
        	        if(PlayerInfo[playerid][pFishingRod] < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have a fishing rod.");
					if(Equipped[playerid] == 0)
					{
					    RodObject = SetPlayerAttachedObject(playerid, 0, 18632, 6, 0.079376, 0.037070, 0.007706, 181.482910, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
					    Equipped[playerid] = 1;
					}
					else if(Equipped[playerid] == 1)
					{
     					RemovePlayerAttachedObject(playerid, 0);
                    	RemovePlayerAttachedObject(playerid, RodObject);
                    	Equipped[playerid] = 0;
					}
        	    }
			}
		}
		case DIALOG_MAP:
	    {
	        if(response) // If they clicked 'Select' or double-clicked a weapon
	        {
				switch(listitem)// Checking which listitem was selected
        		{
	        	    case 0:// The first item listed
	        	    {
						SetPlayerCheckpoint(playerid, 1771.6489, -1909.2965, 13.5544, 3.0);
						mapCP[playerid] = 1;
	        	    }
	        	    case 1: // The second item listed
	        	    {
						SetPlayerCheckpoint(playerid, 1928.5823, -1776.2943, 13.5469, 3.0);
						mapCP[playerid] = 1;
	        	    }
	        	    case 2: // The third item listed
	        	    {
						SetPlayerCheckpoint(playerid, 387.9089, -2088.4832, 7.8359, 3.0);
						mapCP[playerid] = 1;
	        	    }
	        	    case 3: // The third item listed
	        	    {
						SetPlayerCheckpoint(playerid, 2109.7109, -1789.9832, 13.5547, 3.0);
						mapCP[playerid] = 1;
	        	    }
	        	    case 4: // The third item listed
	        	    {
						SetPlayerCheckpoint(playerid, 2045.4417, -1907.8906, 13.5469, 3.0);
						mapCP[playerid] = 1;
	        	    }
	        	    case 5: // The third item listed
	        	    {
						SetPlayerCheckpoint(playerid, 2244.2847, -1665.5377, 15.4766, 3.0);
						mapCP[playerid] = 1;
	        	    }
	        	    case 6: // The third item listed
	        	    {
						SetPlayerCheckpoint(playerid, 2034.1725, -1402.1194, 17.2948, 3.0);
						mapCP[playerid] = 1;
	        	    }
	        	    case 7: // The third item listed
	        	    {
						SetPlayerCheckpoint(playerid, 1797.4364, -1578.9114, 14.0851, 3.0);
						mapCP[playerid] = 1;
	        	    }
	        	    case 8: // The third item listed
	        	    {
						SetPlayerCheckpoint(playerid, 1684.7454, -1343.1959, 17.4362, 3.0);
						mapCP[playerid] = 1;
	        	    }
	        	    case 9: // The third item listed
	        	    {
						SetPlayerCheckpoint(playerid, 1738.2869, -1268.4851, 13.5426, 3.0);
						mapCP[playerid] = 1;
	        	    }
	        	    case 10: // The third item listed
	        	    {
						SetPlayerCheckpoint(playerid, 1679.9108, -1826.6295, 13.5469, 3.0);
						mapCP[playerid] = 1;
	        	    }
	        	    case 11: // The third item listed
	        	    {
						SetPlayerCheckpoint(playerid, 2131.8562, -1151.3236, 24.0606, 3.0);
						mapCP[playerid] = 1;
	        	    }
	        	    case 12: // The third item listed
	        	    {
						SetPlayerCheckpoint(playerid, 1921.2236, -1863.3606, 13.5604, 3.0);
						mapCP[playerid] = 1;
	        	    }
	            }
	        }
	        return 1; // We handled a dialog, so return 1. Just like OnPlayerCommandText.
	    }
		case DIALOG_BUY:
  		{
           	switch(listitem)
        	{
          	  	case 0:
        	    {
					if(GetPlayerMoney(playerid) < 14) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(PlayerInfo[playerid][pAge] < 21) return SCM(playerid, COLOR_LIGHTRED, "You're not old enough to buy beer.");
					GivePlayerMoney(playerid, -15);
					PlayerInfo[playerid][pBeer] += 6;
					SCM(playerid, COLOR_WHITE, "You have bought a six-pack of beers, /drink.");


					new id = GetPlayerVirtualWorld(playerid);
				    BusinessInfo[id][bMoney] += 15;

					new file4[40];
					format(file4, sizeof(file4), BPATH, id);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
					INI_Close(File);
        	    }
         	  	case 1:
        	    {
					if(GetPlayerMoney(playerid) < 4) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(PlayerInfo[playerid][pAge] < 18) return SCM(playerid, COLOR_LIGHTRED, "You're not old enough to buy cigarettes.");
					PlayerInfo[playerid][pCigarettes] += 20;
					SCM(playerid, COLOR_WHITE, "You have bought a packet of cigarettes, /smoke.");
					GivePlayerMoney(playerid, -5);
					
					new id = GetPlayerVirtualWorld(playerid);
				    BusinessInfo[id][bMoney] += 5;

					new file4[40];
					format(file4, sizeof(file4), BPATH, id);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
					INI_Close(File);
        	    }
        	    case 2:
        	    {
					if(GetPlayerMoney(playerid) < 0) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					SCM(playerid, COLOR_WHITE, "You have bought a dice, /dice.");
					GivePlayerMoney(playerid, -1);
					Dice[playerid] = 1;
					
					new id = GetPlayerVirtualWorld(playerid);
				    BusinessInfo[id][bMoney] += 1;

					new file4[40];
					format(file4, sizeof(file4), BPATH, id);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
					INI_Close(File);
        	    }
        	    case 3:
        	    {
        	        if(PlayerInfo[playerid][pPlayingHours] < 2) return SCM(playerid, COLOR_LIGHTRED, "You have to play two hours before you can buy a mask.");
					if(GetPlayerMoney(playerid) < 49) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					Mask[playerid] = 1;
					SCM(playerid, COLOR_WHITE, "You have bought a mask, /mask to put it on/off.");
					GivePlayerMoney(playerid, -50);
					
					new id = GetPlayerVirtualWorld(playerid);
				    BusinessInfo[id][bMoney] += 50;

					new file4[40];
					format(file4, sizeof(file4), BPATH, id);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
					INI_Close(File);
        	    }
        	    case 4:
        	    {
					if(GetPlayerMoney(playerid) < 49) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					PlayerInfo[playerid][dWater] = 5;
					SCM(playerid, COLOR_WHITE, "You have bought a water bottle. /waterplant to make your marijuana-plant grow.");
					GivePlayerMoney(playerid, -50);
					
					new id = GetPlayerVirtualWorld(playerid);
				    BusinessInfo[id][bMoney] += 50;

					new file4[40];
					format(file4, sizeof(file4), BPATH, id);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
					INI_Close(File);
        	    }
        	    case 5:
        	    {
					if(GetPlayerMoney(playerid) < 19) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					toolkit[playerid] = 1;
					SCM(playerid, COLOR_WHITE, "You have bought a toolkit. Now you can /v breakin next to cars to un-lock them.");
					GivePlayerMoney(playerid, -20);
					
					new id = GetPlayerVirtualWorld(playerid);
				    BusinessInfo[id][bMoney] += 20;

					new file4[40];
					format(file4, sizeof(file4), BPATH, id);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
					INI_Close(File);
        	    }
        	    case 6:
        	    {
					if(GetPlayerMoney(playerid) < 24) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					SCM(playerid, COLOR_WHITE, "You have bought a baseball bat.");
					GivePlayerMoney(playerid, -25);
					GivePlayerWeapon(playerid, 5, 1);

					new id = GetPlayerVirtualWorld(playerid);
				    BusinessInfo[id][bMoney] += 25;

					new file4[40];
					format(file4, sizeof(file4), BPATH, id);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
					INI_Close(File);
        	    }
			}
		}
		case DIALOG_FISH_BUY:
  		{
           	switch(listitem)
        	{
          	  	case 0:
        	    {
					if(GetPlayerMoney(playerid) < 14) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					PlayerInfo[playerid][pFishingRod] = 1;
					SCM(playerid, COLOR_WHITE, "You have bought a simple fishing rod, /fish.");
					GivePlayerMoney(playerid, -15);
        	    }
        	    case 1:
        	    {
					if(GetPlayerMoney(playerid) < 49) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					PlayerInfo[playerid][pWorms] += 10;
					SCM(playerid, COLOR_WHITE, "You have bought a box of worms.");
					GivePlayerMoney(playerid, -50);
        	    }
			}
		}
		case DIALOG_ELECTRONICS_BUY:
  		{
           	switch(listitem)
        	{
          	  	case 0:
        	    {
					if(GetPlayerMoney(playerid) < 99) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(PlayerInfo[playerid][pPhone] > 0) return SCM(playerid, COLOR_LIGHTRED, "You already have a cellphone.");
					SCM(playerid, COLOR_WHITE, "You have bought a cellphone.");

					new str[64];
				    new randphone = 150000 + random(500000); //minimum 150000 - max 500000 - defining the number
				    PlayerInfo[playerid][pNumber] = randphone; // Define pNumber as that number :)
					format(str, sizeof(str), "Your new number is: %d.", randphone);
			        SendClientMessage(playerid, COLOR_WHITE, str);
			        PlayerInfo[playerid][pPhone] = 1;
			        GivePlayerMoney(playerid, -100);
		        	new INI:File2 = INI_Open(UserPath(playerid));
					INI_SetTag(File2, "data");
					INI_WriteInt(File2, "Number", PlayerInfo[playerid][pNumber]);
					INI_Close(File2);
					
					new id = GetPlayerVirtualWorld(playerid);
				    BusinessInfo[id][bMoney] += 50;

					new file4[40];
					format(file4, sizeof(file4), BPATH, id);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
					INI_Close(File);
        	    }
         	  	case 1:
        	    {
					if(GetPlayerMoney(playerid) < 1999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					PlayerInfo[playerid][pBoombox] = 1;
					SCM(playerid, COLOR_WHITE, "You have bought a boombox, /boombox.");
					GivePlayerMoney(playerid, -2000);
					
					new id = GetPlayerVirtualWorld(playerid);
				    BusinessInfo[id][bMoney] += 1000;

					new file4[40];
					format(file4, sizeof(file4), BPATH, id);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
					INI_Close(File);
        	    }
			}
		}
		case DIALOG_MECHANIC_BUY:
  		{
           	switch(listitem)
        	{
          	  	case 0:
        	    {
        	        ShowPlayerDialog(playerid, DIALOG_COLOR1, DIALOG_STYLE_INPUT, "Colour", "Please type in colour id 1 below.", "Submit", "Cancel");
        	    }
         	  	case 1:
        	    {
 		   			new vehicleid;
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						vehicleid = GetPlayerVehicleID(playerid);
					}
        	        if(!IsBicycle(vehicleid))
        	        {
	        	        new info[1026];
						strcat(info, "Offroad "COL_GREEN"($1000)\nShadow "COL_GREEN"($1000)\nMega "COL_GREEN"($1000)", sizeof(info));
						strcat(info, "\nRimshine "COL_GREEN"($1000)\nWires "COL_GREEN"($2000)\nClassic "COL_GREEN"($2000)", sizeof(info));
						strcat(info, "\nTwist "COL_GREEN"($2000)\nCutter "COL_GREEN"($2000)\nSwitch "COL_GREEN"($2000)", sizeof(info));
						strcat(info, "\nGrove "COL_GREEN"($2000)\nImport "COL_GREEN"($2000)\nDollar "COL_GREEN"($4000)", sizeof(info));
						strcat(info, "\nTrance "COL_GREEN"($2000)\nAtomic "COL_GREEN"($2000)\nAhab "COL_GREEN"($2000)", sizeof(info));
						strcat(info, "\nVirtual "COL_GREEN"($2000)\nAccess "COL_GREEN"($2000)", sizeof(info));
	        	        ShowPlayerDialog(playerid, DIALOG_RIMS, DIALOG_STYLE_LIST, "Rims", info, "Select", "Cancel");
					}
					else return SCM(playerid, COLOR_LIGHTRED, "You need to be in a car to change rims.");
        	    }
         	  	case 2:
        	    {
   	      			repair[playerid] = 10;//change it with the timer time
		    		TimerRepair[playerid] = SetTimerEx("timerrepair", 1000, 1, "i", playerid);
				    TogglePlayerControllable(playerid, 0);
        	    }
			}
		}
		case DIALOG_BUYDRINK:
  		{
           	switch(listitem)
        	{
         	  	case 0:
        	    {
        	        if(PlayerInfo[playerid][pAge] < 18) return SCM(playerid, COLOR_LIGHTRED, "You are not eighteen years old.");
					if(GetPlayerMoney(playerid) < 4) return SCM(playerid, COLOR_LIGHTRED, "You don't have enough money.");
        	        SCM(playerid, COLOR_WHITE, "You have bought a Carlsberg.");
        	        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
        	        GivePlayerMoney(playerid, -5);
        	        
					new id = GetPlayerVirtualWorld(playerid);
				    BusinessInfo[id][bMoney] += 5;

					new file4[40];
					format(file4, sizeof(file4), BPATH, id);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
					INI_Close(File);
        	    }
         	  	case 1:
        	    {
    	        	if(PlayerInfo[playerid][pAge] < 18) return SCM(playerid, COLOR_LIGHTRED, "You are not eighteen years old.");
					if(GetPlayerMoney(playerid) < 4) return SCM(playerid, COLOR_LIGHTRED, "You don't have enough money.");
					GivePlayerMoney(playerid, -5);
        	        SCM(playerid, COLOR_WHITE, "You have bought a Guinness.");
        	        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
        	        
					new id = GetPlayerVirtualWorld(playerid);
				    BusinessInfo[id][bMoney] += 5;

					new file4[40];
					format(file4, sizeof(file4), BPATH, id);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
					INI_Close(File);
        	    }
         	  	case 2:
        	    {
   	        		if(PlayerInfo[playerid][pAge] < 18) return SCM(playerid, COLOR_LIGHTRED, "You are not eighteen years old.");
					if(GetPlayerMoney(playerid) < 6) return SCM(playerid, COLOR_LIGHTRED, "You don't have enough money.");
					GivePlayerMoney(playerid, -7);
        	        SCM(playerid, COLOR_WHITE, "You have bought a Martini.");
        	        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
        	        
					new id = GetPlayerVirtualWorld(playerid);
				    BusinessInfo[id][bMoney] += 7;

					new file4[40];
					format(file4, sizeof(file4), BPATH, id);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
					INI_Close(File);
        	    }
         	  	case 3:
        	    {
   	        		if(PlayerInfo[playerid][pAge] < 18) return SCM(playerid, COLOR_LIGHTRED, "You are not eighteen years old.");
					if(GetPlayerMoney(playerid) < 9) return SCM(playerid, COLOR_LIGHTRED, "You don't have enough money.");
					GivePlayerMoney(playerid, -10);
        	        SCM(playerid, COLOR_WHITE, "You have bought a Bloody Mary.");
        	        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
        	        
					new id = GetPlayerVirtualWorld(playerid);
				    BusinessInfo[id][bMoney] += 10;

					new file4[40];
					format(file4, sizeof(file4), BPATH, id);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
					INI_Close(File);
        	    }
         	  	case 4:
        	    {
   	        		if(PlayerInfo[playerid][pAge] < 18) return SCM(playerid, COLOR_LIGHTRED, "You are not eighteen years old.");
					if(GetPlayerMoney(playerid) < 14) return SCM(playerid, COLOR_LIGHTRED, "You don't have enough money.");
					GivePlayerMoney(playerid, -15);
        	        SCM(playerid, COLOR_WHITE, "You have bought a Sex On The Beach.");
        	        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
        	        
					new id = GetPlayerVirtualWorld(playerid);
				    BusinessInfo[id][bMoney] += 15;

					new file4[40];
					format(file4, sizeof(file4), BPATH, id);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
					INI_Close(File);
        	    }
			}
		}
		case DIALOG_FORUMNAME:
  		{
            if(response)
            {
                if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DIALOG_FORUMNAME, DIALOG_STYLE_INPUT, "Forumname", "You have entered an invalid forumname.\n""Type your forumname below, ", "Enter", "Cancel");
                new string[64];
				format(string, sizeof(string), "%s", inputtext);
				format(PlayerInfo[playerid][pForumName], 46, string);
				SCM(playerid, COLOR_GREEN, "You have succesfully set your new forumname.");
				PlayerInfo[playerid][pFname] = 1;
            }
		}
		case DIALOG_RIMS:
  		{
   			switch(listitem)
        	{
		  		case 0:
		    	{
		    	    if(GetPlayerMoney(playerid) < 999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
		   			new vehicleid;
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						vehicleid = GetPlayerVehicleID(playerid);
					}
					AddVehicleComponent(vehicleid, 1025);
					GivePlayerMoney(playerid, -1000);
					new id = GetVehicleID(vehicleid);
					for(new m=0; m < sizeof(VehicleMods[]); m++)
					{
						VehicleMods[id][m] = 1025;
					}
					SaveVehicle(id);
	 	    	}
	  			case 1:
		    	{
		    	    if(GetPlayerMoney(playerid) < 999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
		   			new vehicleid;
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						vehicleid = GetPlayerVehicleID(playerid);
					}
					AddVehicleComponent(vehicleid, 1073);
					GivePlayerMoney(playerid, -1000);
					new id = GetVehicleID(vehicleid);
					for(new m=0; m < sizeof(VehicleMods[]); m++)
					{
						VehicleMods[id][m] = 1073;
					}
					SaveVehicle(id);
	 	    	}
	  			case 2:
		    	{
		    	    if(GetPlayerMoney(playerid) < 999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
		   			new vehicleid;
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						vehicleid = GetPlayerVehicleID(playerid);
					}
					AddVehicleComponent(vehicleid, 1074);
					GivePlayerMoney(playerid, -1000);
					new id = GetVehicleID(vehicleid);
					for(new m=0; m < sizeof(VehicleMods[]); m++)
					{
						VehicleMods[id][m] = 1074;
					}
					SaveVehicle(id);
	 	    	}
	  			case 3:
		    	{
		    	    if(GetPlayerMoney(playerid) < 999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
		   			new vehicleid;
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						vehicleid = GetPlayerVehicleID(playerid);
					}
					AddVehicleComponent(vehicleid, 1075);
					GivePlayerMoney(playerid, -1000);
					new id = GetVehicleID(vehicleid);
					for(new m=0; m < sizeof(VehicleMods[]); m++)
					{
						VehicleMods[id][m] = 1075;
					}
					SaveVehicle(id);
	 	    	}
	  			case 4:
		    	{
		    	    if(GetPlayerMoney(playerid) < 999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
		   			new vehicleid;
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						vehicleid = GetPlayerVehicleID(playerid);
					}
					AddVehicleComponent(vehicleid, 1076);
					GivePlayerMoney(playerid, -1000);
					new id = GetVehicleID(vehicleid);
					for(new m=0; m < sizeof(VehicleMods[]); m++)
					{
						VehicleMods[id][m] = 1076;
					}
					SaveVehicle(id);
	 	    	}
	  			case 5:
		    	{
		    	    if(GetPlayerMoney(playerid) < 1999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
		   			new vehicleid;
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						vehicleid = GetPlayerVehicleID(playerid);
					}
					AddVehicleComponent(vehicleid, 1077);
					GivePlayerMoney(playerid, -2000);
					new id = GetVehicleID(vehicleid);
					for(new m=0; m < sizeof(VehicleMods[]); m++)
					{
						VehicleMods[id][m] = 1077;
					}
					SaveVehicle(id);
	 	    	}
	 			case 6:
		    	{
		    	    if(GetPlayerMoney(playerid) < 1999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
		   			new vehicleid;
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						vehicleid = GetPlayerVehicleID(playerid);
					}
					AddVehicleComponent(vehicleid, 1078);
					GivePlayerMoney(playerid, -2000);
					new id = GetVehicleID(vehicleid);
					for(new m=0; m < sizeof(VehicleMods[]); m++)
					{
						VehicleMods[id][m] = 1078;
					}
					SaveVehicle(id);
	 	    	}
	 			case 7:
		    	{
		    	    if(GetPlayerMoney(playerid) < 1999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
		   			new vehicleid;
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						vehicleid = GetPlayerVehicleID(playerid);
					}
					AddVehicleComponent(vehicleid, 1079);
					GivePlayerMoney(playerid, -2000);
					new id = GetVehicleID(vehicleid);
					for(new m=0; m < sizeof(VehicleMods[]); m++)
					{
						VehicleMods[id][m] = 1079;
					}
					SaveVehicle(id);
	 	    	}
	 			case 8:
		    	{
		    	    if(GetPlayerMoney(playerid) < 1999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
		   			new vehicleid;
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						vehicleid = GetPlayerVehicleID(playerid);
					}
					AddVehicleComponent(vehicleid, 1080);
					GivePlayerMoney(playerid, -2000);
					new id = GetVehicleID(vehicleid);
					for(new m=0; m < sizeof(VehicleMods[]); m++)
					{
						VehicleMods[id][m] = 1080;
					}
					SaveVehicle(id);
	 	    	}
	 			case 9:
		    	{
		    	    if(GetPlayerMoney(playerid) < 1999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
		   			new vehicleid;
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						vehicleid = GetPlayerVehicleID(playerid);
					}
					AddVehicleComponent(vehicleid, 1081);
					GivePlayerMoney(playerid, -2000);
					new id = GetVehicleID(vehicleid);
					for(new m=0; m < sizeof(VehicleMods[]); m++)
					{
						VehicleMods[id][m] = 1081;
					}
					SaveVehicle(id);
	 	    	}
	 			case 10:
		    	{
		    	    if(GetPlayerMoney(playerid) < 1999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
		   			new vehicleid;
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						vehicleid = GetPlayerVehicleID(playerid);
					}
					AddVehicleComponent(vehicleid, 1082);
					GivePlayerMoney(playerid, -2000);
					new id = GetVehicleID(vehicleid);
					for(new m=0; m < sizeof(VehicleMods[]); m++)
					{
						VehicleMods[id][m] = 1082;
					}
					SaveVehicle(id);
	 	    	}
	 			case 11:
		    	{
		    	    if(GetPlayerMoney(playerid) < 3999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
		   			new vehicleid;
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						vehicleid = GetPlayerVehicleID(playerid);
					}
					AddVehicleComponent(vehicleid, 1083);
					GivePlayerMoney(playerid, -4000);
					new id = GetVehicleID(vehicleid);
					for(new m=0; m < sizeof(VehicleMods[]); m++)
					{
						VehicleMods[id][m] = 1083;
					}
					SaveVehicle(id);
	 	    	}
	 			case 12:
		    	{
		    	    if(GetPlayerMoney(playerid) < 1999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
		   			new vehicleid;
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						vehicleid = GetPlayerVehicleID(playerid);
					}
					AddVehicleComponent(vehicleid, 1084);
					GivePlayerMoney(playerid, -2000);
					new id = GetVehicleID(vehicleid);
					for(new m=0; m < sizeof(VehicleMods[]); m++)
					{
						VehicleMods[id][m] = 1084;
					}
					SaveVehicle(id);
	 	    	}
	 			case 13:
		    	{
		    	    if(GetPlayerMoney(playerid) < 1999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
		   			new vehicleid;
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						vehicleid = GetPlayerVehicleID(playerid);
					}
					AddVehicleComponent(vehicleid, 1085);
					GivePlayerMoney(playerid, -2000);
					new id = GetVehicleID(vehicleid);
					for(new m=0; m < sizeof(VehicleMods[]); m++)
					{
						VehicleMods[id][m] = 1084;
					}
					SaveVehicle(id);
	 	    	}
	 			case 14:
		    	{
		    	    if(GetPlayerMoney(playerid) < 1999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
		   			new vehicleid;
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						vehicleid = GetPlayerVehicleID(playerid);
					}
					AddVehicleComponent(vehicleid, 1096);
					GivePlayerMoney(playerid, -2000);
					new id = GetVehicleID(vehicleid);
					for(new m=0; m < sizeof(VehicleMods[]); m++)
					{
						VehicleMods[id][m] = 1096;
					}
					SaveVehicle(id);
	 	    	}
	 			case 15:
		    	{
		    	    if(GetPlayerMoney(playerid) < 1999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
		   			new vehicleid;
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						vehicleid = GetPlayerVehicleID(playerid);
					}
					AddVehicleComponent(vehicleid, 1097);
					GivePlayerMoney(playerid, -2000);
					new id = GetVehicleID(vehicleid);
					for(new m=0; m < sizeof(VehicleMods[]); m++)
					{
						VehicleMods[id][m] = 1097;
					}
					SaveVehicle(id);
	 	    	}
	 			case 16:
		    	{
		    	    if(GetPlayerMoney(playerid) < 1999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
		   			new vehicleid;
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						vehicleid = GetPlayerVehicleID(playerid);
					}
					AddVehicleComponent(vehicleid, 1098);
					GivePlayerMoney(playerid, -2000);
					new id = GetVehicleID(vehicleid);
					for(new m=0; m < sizeof(VehicleMods[]); m++)
					{
						VehicleMods[id][m] = 1098;
					}
					SaveVehicle(id);
				}
 	    	}
		}
		case DIALOG_COLOR1:
  		{
  		    if(GetPlayerMoney(playerid) < 99) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
       		new vehicleid;
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				vehicleid = GetPlayerVehicleID(playerid);
			}
			new id = GetVehicleID(vehicleid);

 			new color = strval(inputtext);
	        if(color < 0 || color > 255) return ShowPlayerDialog(playerid, DIALOG_COLOR1, DIALOG_STYLE_INPUT, "Color", "Please type in colour id 1 below. [0-255]", "Submit", "Cancel");
	        VehicleColor[id][0] = color;
	        ShowPlayerDialog(playerid, DIALOG_COLOR2, DIALOG_STYLE_INPUT, "Color", "Please type in colour id 2 below.", "Submit", "Cancel");
		}
		case DIALOG_COLOR2:
  		{
  			new vehicleid;
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				vehicleid = GetPlayerVehicleID(playerid);
			}
			new id = GetVehicleID(vehicleid);

 			new color2 = strval(inputtext);
	        if(color2 < 0 || color2 > 255) return ShowPlayerDialog(playerid, DIALOG_COLOR2 , DIALOG_STYLE_INPUT, "Color", "Please type in colour id 2 below. [0-255]", "Submit", "Cancel");
	        VehicleColor[id][1] = color2;

	        ChangeVehicleColor(vehicleid, VehicleColor[id][0], VehicleColor[id][1]);
			GivePlayerMoney(playerid, -100);
			SaveVehicle(id);
		}
		case DIALOG_BUYCAR:
  		{
           	switch(listitem)
        	{
          	  	case 0:
        	    {
        	        if(GetPlayerMoney(playerid) < 999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES "");
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -1000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 481;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
         	 		VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 1000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 1000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
         	  	case 1:
        	    {
    	        	if(GetPlayerMoney(playerid) < 999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
    	        	if(PlayerInfo[playerid][pDonator] < 1) return SCM(playerid, COLOR_LIGHTRED, "This vehicle (bike) is only available for donators.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -1000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 509;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 1000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 1000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 2:
        	    {
    	        	if(GetPlayerMoney(playerid) < 1499) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -1500);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 462;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 1500;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 1500);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 3:
        	    {
    	        	if(GetPlayerMoney(playerid) < 2999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -3000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 543;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 3000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 3000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 4:
        	    {
    	        	if(GetPlayerMoney(playerid) < 2999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -3000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 473;
					VehiclePos[freeid][0] = -2319.2996;
					VehiclePos[freeid][1] = -2871.3889;
					VehiclePos[freeid][2] = -0.2732;
					VehiclePos[freeid][3] = 182.8555;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 3000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you at the beach.", 3000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
					SetPlayerCheckpoint(playerid, -2319.2996, -2871.3889, -0.2732, 3.0);
					BoatCP[playerid] = 1;
        	    }
        	    case 5:
        	    {
    	        	if(GetPlayerMoney(playerid) < 3499) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -3500);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 463;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 3500;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 3500);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 6:
        	    {
    	        	if(GetPlayerMoney(playerid) < 3699) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -3700);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 440;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 3700;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 3700);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 7:
        	    {
    	        	if(GetPlayerMoney(playerid) < 3999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -4000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 600;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 4000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 4000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 8:
        	    {
    	        	if(GetPlayerMoney(playerid) < 4199) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -4200);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 491;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 4200;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 4200);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 9:
        	    {
    	        	if(GetPlayerMoney(playerid) < 4199) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -4200);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 491;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 4200;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 4200);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 10:
        	    {
    	        	if(GetPlayerMoney(playerid) < 4299) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -4300);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 516;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 4300;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 4300);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 11:
        	    {
    	        	if(GetPlayerMoney(playerid) < 4299) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -4300);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 418;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 4300;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 4300);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 12:
        	    {
    	        	if(GetPlayerMoney(playerid) < 4299) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -4300);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 586;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 4300;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 4300);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 13:
        	    {
    	        	if(GetPlayerMoney(playerid) < 4599) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -4600);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 467;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
         	 		VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 4600;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 4600);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 14:
        	    {
    	        	if(GetPlayerMoney(playerid) < 4999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -5000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 547;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 5000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 5000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 15:
        	    {
    	        	if(GetPlayerMoney(playerid) < 4999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -5000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 401;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 5000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 5000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 16:
        	    {
    	        	if(GetPlayerMoney(playerid) < 4999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -5000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 549;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 5000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 5000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 17:
        	    {
    	        	if(GetPlayerMoney(playerid) < 4999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -5000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 463;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 5000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 5000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 18:
        	    {
    	        	if(GetPlayerMoney(playerid) < 5199) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -5200);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 517;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 5200;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 5200);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 19:
        	    {
    	        	if(GetPlayerMoney(playerid) < 5499) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -5500);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 589;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 5500;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 5500);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 20:
        	    {
    	        	if(GetPlayerMoney(playerid) < 5499) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -5500);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 518;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 5500;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 5500);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 21:
        	    {
    	        	if(GetPlayerMoney(playerid) < 5599) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -5600);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 527;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 5600;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 5600);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 22:
        	    {
    	        	if(GetPlayerMoney(playerid) < 5799) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -5800);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 551;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
 			 		VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 5800;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 5800);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 23:
        	    {
    	        	if(GetPlayerMoney(playerid) < 5999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -6000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 439;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 6000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 6000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 24:
        	    {
    	        	if(GetPlayerMoney(playerid) < 6199) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -6200);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 445;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 6200;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 6200);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 25:
        	    {
    	        	if(GetPlayerMoney(playerid) < 2999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -3000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 478;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 3000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 3000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 26:
        	    {
    	        	if(GetPlayerMoney(playerid) < 6799) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -6800);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 492;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 6800;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 6800);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 27:
        	    {
    	        	if(GetPlayerMoney(playerid) < 6999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -7000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 422;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 7000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 7000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 28:
        	    {
    	        	if(GetPlayerMoney(playerid) < 7099) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -7100);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 529;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 7100;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 7100);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 29:
        	    {
    	        	if(GetPlayerMoney(playerid) < 7499) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -7500);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 405;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 7500;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 7500);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 30:
        	    {
    	        	if(GetPlayerMoney(playerid) < 7099) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -7100);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 466;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 7100;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 7100);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 31:
        	    {
    	        	if(GetPlayerMoney(playerid) < 7099) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -7100);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 546;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 7099;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 7099);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 32:
        	    {
    	        	if(GetPlayerMoney(playerid) < 7099) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -7100);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 540;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 7099;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 7099);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 33:
        	    {
    	        	if(GetPlayerMoney(playerid) < 7199) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -7200);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 474;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 7200;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 7200);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 34:
        	    {
    	        	if(GetPlayerMoney(playerid) < 7299) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -7300);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 526;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 7300;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 7300);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 35:
        	    {
    	        	if(GetPlayerMoney(playerid) < 7299) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -7300);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 500;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 7300;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 7300);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 36:
        	    {
    	        	if(GetPlayerMoney(playerid) < 7199) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -7200);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 483;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 7200;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 7200);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 37:
        	    {
    	        	if(GetPlayerMoney(playerid) < 7399) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -7400);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 545;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 7400;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 7400);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 38:
        	    {
    	        	if(GetPlayerMoney(playerid) < 7399) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -7400);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 419;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 7400;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 7400);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 39:
        	    {
    	        	if(GetPlayerMoney(playerid) < 7499) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -7500);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 561;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 7500;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 7500);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 40:
        	    {
    	        	if(GetPlayerMoney(playerid) < 7799) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -7800);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 421;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 7800;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 7800);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 41:
        	    {
    	        	if(GetPlayerMoney(playerid) < 7799) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -7800);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 458;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 7800;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 7800);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 42:
        	    {
    	        	if(GetPlayerMoney(playerid) < 7899) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -7900);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 550;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 7900;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 7900);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 43:
        	    {
    	        	if(GetPlayerMoney(playerid) < 7899) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -7900);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 576;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 7900;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 7900);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 44:
        	    {
    	        	if(GetPlayerMoney(playerid) < 7999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -8000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 412;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 8000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 8000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 45:
        	    {
    	        	if(GetPlayerMoney(playerid) < 7999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -8000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 438;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 8000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 8000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 46:
        	    {
    	        	if(GetPlayerMoney(playerid) < 8199) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -8200);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 533;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 8200;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 8200);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 47:
        	    {
    	        	if(GetPlayerMoney(playerid) < 8299) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -8300);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 534;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 8300;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 8300);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 48:
        	    {
    	        	if(GetPlayerMoney(playerid) < 8399) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -8400);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 585;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 8400;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 8400);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 49:
        	    {
    	        	if(GetPlayerMoney(playerid) < 8399) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -8400);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 507;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 8400;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 8400);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 50:
        	    {
    	        	if(GetPlayerMoney(playerid) < 8499) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -8500);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 554;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 8500;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 8500);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 51:
        	    {
    	        	if(GetPlayerMoney(playerid) < 8999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -9000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 567;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 9000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 9000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 52:
        	    {
    	        	if(GetPlayerMoney(playerid) < 9099) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -9100);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 536;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 9100;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 9100);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 53:
        	    {
    	        	if(GetPlayerMoney(playerid) < 9199) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -9200);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 559;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 9200;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 9200);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 54:
        	    {
    	        	if(GetPlayerMoney(playerid) < 9499) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -9500);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 575;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 9500;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 9500);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 55:
        	    {
    	        	if(GetPlayerMoney(playerid) < 9599) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -9600);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 479;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 9600;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 9600);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 56:
        	    {
    	        	if(GetPlayerMoney(playerid) < 9699) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -9700);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 489;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 9700;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 970);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 57:
        	    {
    	        	if(GetPlayerMoney(playerid) < 9999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -10000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 475;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 10000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 10000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 58:
        	    {
    	        	if(GetPlayerMoney(playerid) < 9999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -10000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 542;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 10000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 10000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 59:
        	    {
    	        	if(GetPlayerMoney(playerid) < 9999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -10000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 413;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 10000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 10000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 60:
        	    {
    	        	if(GetPlayerMoney(playerid) < 9999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -10000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 496;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 10000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 10000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 61:
        	    {
    	        	if(GetPlayerMoney(playerid) < 9999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -10000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 535;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 10000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 10000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 62:
        	    {
    	        	if(GetPlayerMoney(playerid) < 9999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -10000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 508;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 10000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 10000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 63:
        	    {
    	        	if(GetPlayerMoney(playerid) < 10499) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -10500);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 426;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 10500;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 10500);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 64:
        	    {
    	        	if(GetPlayerMoney(playerid) < 10999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -11000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 404;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 11000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 11000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 65:
        	    {
    	        	if(GetPlayerMoney(playerid) < 13999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -14000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 562;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 14000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 14000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 66:
        	    {
    	        	if(GetPlayerMoney(playerid) < 14499) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -14500);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 280;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 14500;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 14500);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 67:
        	    {
    	        	if(GetPlayerMoney(playerid) < 14999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -15000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 482;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 15000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 15000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
         	   	case 68:
        	    {
    	        	if(GetPlayerMoney(playerid) < 14999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -15000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 566;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 15000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 15000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 69:
        	    {
    	        	if(GetPlayerMoney(playerid) < 15499) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -15500);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 587;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 15500;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 15500);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 70:
        	    {
    	        	if(GetPlayerMoney(playerid) < 16499) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -16500);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 559;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 16500;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 16500);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 71:
        	    {
    	        	if(GetPlayerMoney(playerid) < 16999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -17000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 579;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 17000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 17000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 72:
        	    {
    	        	if(GetPlayerMoney(playerid) < 16999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -17000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 400;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 17000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 17000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 73:
        	    {
    	        	if(GetPlayerMoney(playerid) < 17999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -18000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 453;
					VehiclePos[freeid][0] = -2319.2996;
					VehiclePos[freeid][1] = -2871.3889;
					VehiclePos[freeid][2] = -0.2732;
					VehiclePos[freeid][3] = 182.8555;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 18000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you at the beach.", 18000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 74:
        	    {
    	        	if(GetPlayerMoney(playerid) < 18999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -19000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 402;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 19000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 19000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 75:
        	    {
    	        	if(GetPlayerMoney(playerid) < 19499) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -19500);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 558;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 19500;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 19500);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 76:
        	    {
    	        	if(GetPlayerMoney(playerid) < 19999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -20000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 480;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 20000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 20000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
         	   	case 77:
        	    {
    	        	if(GetPlayerMoney(playerid) < 20499) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -20500);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 602;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 20500;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 20500);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 78:
        	    {
    	        	if(GetPlayerMoney(playerid) < 20999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -21000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 565;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 21000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 21000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 79:
        	    {
    	        	if(GetPlayerMoney(playerid) < 25999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -26000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 555;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
         		 	VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 26000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 26000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 80:
        	    {
    	        	if(GetPlayerMoney(playerid) < 29999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -30000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 484;
					VehiclePos[freeid][0] = -2319.2996;
					VehiclePos[freeid][1] = -2871.3889;
					VehiclePos[freeid][2] = -0.2732;
					VehiclePos[freeid][3] = 182.8555;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 30000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you at the beach.", 30000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 81:
        	    {
    	        	if(GetPlayerMoney(playerid) < 31999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -32000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 560;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 32000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 35000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 82:
        	    {
    	        	if(GetPlayerMoney(playerid) < 31999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -32000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 409;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 32000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 32000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 83:
        	    {
    	        	if(GetPlayerMoney(playerid) < 37999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -38000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 454;
					VehiclePos[freeid][0] = -2319.2996;
					VehiclePos[freeid][1] = -2871.3889;
					VehiclePos[freeid][2] = -0.2732;
					VehiclePos[freeid][3] = 182.8555;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 38000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you at the beach.", 38000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
					SetPlayerCheckpoint(playerid, -2319.2996, -2871.3889, -0.2732, 3.0);
					BoatCP[playerid] = 1;
        	    }
        	    case 84:
        	    {
    	        	if(GetPlayerMoney(playerid) < 41999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -42000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 603;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 42000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 42000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 85:
        	    {
    	        	if(GetPlayerMoney(playerid) < 45999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -46000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 415;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 46000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 46000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 86:
        	    {
    	        	if(GetPlayerMoney(playerid) < 31999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -64999);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 487;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 65000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 65000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 87:
        	    {
    	        	if(GetPlayerMoney(playerid) < 6999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
    	        	if(PlayerInfo[playerid][pDonator] < 2) return SCM(playerid, COLOR_LIGHTRED, "This vehicle (sanchez) is only available for silver donators.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -7000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 468;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 7000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 7000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 88:
        	    {
    	        	if(GetPlayerMoney(playerid) < 36999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
    	        	if(PlayerInfo[playerid][pDonator] < 2) return SCM(playerid, COLOR_LIGHTRED, "This vehicle (zr-350) is only available for silver donators.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -37000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 477;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 37000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 37000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 89:
        	    {
    	        	if(GetPlayerMoney(playerid) < 14999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
    	        	if(PlayerInfo[playerid][pDonator] < 3) return SCM(playerid, COLOR_LIGHTRED, "This vehicle (FCR-900) is only available for gold donators.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -15000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 521;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 15000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 15000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 90:
        	    {
    	        	if(GetPlayerMoney(playerid) < 43999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
    	        	if(PlayerInfo[playerid][pDonator] < 3) return SCM(playerid, COLOR_LIGHTRED, "This vehicle (bullet) is only available for gold donators.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -44000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 541;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 44000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 44000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 91:
        	    {
    	        	if(GetPlayerMoney(playerid) < 43999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
    	        	if(PlayerInfo[playerid][pDonator] < 3) return SCM(playerid, COLOR_LIGHTRED, "This vehicle (banshee) is only available for gold donators.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -44000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 429;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 1500;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 44000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 92:
        	    {
    	        	if(GetPlayerMoney(playerid) < 1499) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
    	        	if(PlayerInfo[playerid][pDonator] < 2) return SCM(playerid, COLOR_LIGHTRED, "This vehicle (mountain bike) is only available for bronze donators.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -1500);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 510;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 1500;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 1500);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 93:
        	    {
    	        	if(GetPlayerMoney(playerid) < 6999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
    	        	if(PlayerInfo[playerid][pDonator] < 1) return SCM(playerid, COLOR_LIGHTRED, "This vehicle (quad) is only available for bronze donators.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -7000);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 471;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 7000;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 7000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
        	    case 94:
        	    {
    	        	if(GetPlayerMoney(playerid) < 7399) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
    	        	if(PlayerInfo[playerid][pDonator] < 3) return SCM(playerid, COLOR_LIGHTRED, "This vehicle (hotknife) is only available for gold donators.");
					if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
					{
						ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
						return 1;
					}
					new freeid = GetFreeVehicleID();
					if(!freeid)
					{
						ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
						return 1;
					}
					GivePlayerMoney(playerid, -7400);
					VehicleCreated[freeid] = VEHICLE_PLAYER;
					VehicleModel[freeid] = 434;
					VehiclePos[freeid][0] = 2127.4885;
					VehiclePos[freeid][1] = -1136.8491;
					VehiclePos[freeid][2] = 25.4748;
					VehiclePos[freeid][3] = 5.3328;
					VehicleColor[freeid][0] = 0;
					VehicleColor[freeid][1] = 0;
					VehicleInterior[freeid] = 0;
          			VehicleWorld[freeid] = 0;
					VehicleValue[freeid] = 7400;
					GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
					VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
					for(new d=0; d < sizeof(VehicleTrunk[]); d++)
					{
						VehicleTrunk[freeid][d][0] = 0;
						VehicleTrunk[freeid][d][1] = 0;
					}
					for(new d=0; d < sizeof(VehicleMods[]); d++)
					{
						VehicleMods[freeid][d] = 0;
					}
					VehiclePaintjob[freeid] = 255;
					VehicleLock[freeid] = 0;
					VehicleAlarm[freeid] = 0;
					UpdateVehicle(freeid, 0);
					SaveVehicle(freeid);
					new msg[128];
					format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", 7000);
					SendClientMessage(playerid, COLOR_WHITE, msg);
        	    }
			}
		}
		case DIALOG_BUYGUN:
  		{
           	switch(listitem)
        	{
          	  	case 0:
        	    {
					if(GetPlayerMoney(playerid) < 199) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					SCM(playerid, COLOR_WHITE, "Disabled.");
					
					new id = GetPlayerVirtualWorld(playerid);
				    BusinessInfo[id][bMoney] += 100;

					new file4[40];
					format(file4, sizeof(file4), BPATH, id);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
					INI_Close(File);
        	    }
         	  	case 1:
        	    {
					if(GetPlayerMoney(playerid) < 999) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					SCM(playerid, COLOR_WHITE, "Congratulations on your new Country Rifle.");
					GivePlayerMoney(playerid, -1000);
					GivePlayerWeapon(playerid, 33, 30);
					
					new id = GetPlayerVirtualWorld(playerid);
				    BusinessInfo[id][bMoney] += 500;

					new file4[40];
					format(file4, sizeof(file4), BPATH, id);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
					INI_Close(File);
        	    }
         	  	case 2:
        	    {
					if(GetPlayerMoney(playerid) < 1399) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					SCM(playerid, COLOR_WHITE, "Congratulations on your new Colt 45.");
					GivePlayerMoney(playerid, -1400);
					GivePlayerWeapon(playerid, 22, 50);
					
					new id = GetPlayerVirtualWorld(playerid);
				    BusinessInfo[id][bMoney] += 800;

					new file4[40];
					format(file4, sizeof(file4), BPATH, id);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
					INI_Close(File);
        	    }
        	    case 3:
        	    {
					if(GetPlayerMoney(playerid) < 2399) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					SCM(playerid, COLOR_WHITE, "Congratulations on your new Remington Shotgun.");
					GivePlayerMoney(playerid, -2400);
					GivePlayerWeapon(playerid, 25, 25);
					
					new id = GetPlayerVirtualWorld(playerid);
				    BusinessInfo[id][bMoney] += 1200;

					new file4[40];
					format(file4, sizeof(file4), BPATH, id);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
					INI_Close(File);
        	    }
			}
  }
		case DIALOG_TRAIN:
  		{
           	switch(listitem)
        	{
          	  	case 0:
        	    {
					if(GetPlayerMoney(playerid) < 99) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					PlayerInfo[playerid][pFightingStyle] = 1;
					SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
					GivePlayerMoney(playerid, -100);
					
					new id = GetPlayerVirtualWorld(playerid);
				    BusinessInfo[id][bMoney] += 100;

					new file4[40];
					format(file4, sizeof(file4), BPATH, id);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
					INI_Close(File);

					SCM(playerid, COLOR_WHITE, "You have learned the normal fightingstyle.");
        	    }
         	  	case 1:
        	    {
					if(GetPlayerMoney(playerid) < 99) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					PlayerInfo[playerid][pFightingStyle] = 2;
					SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
					SCM(playerid, COLOR_WHITE, "You have learned boxing.");
					GivePlayerMoney(playerid, -100);
					
					new id = GetPlayerVirtualWorld(playerid);
				    BusinessInfo[id][bMoney] += 100;

					new file4[40];
					format(file4, sizeof(file4), BPATH, id);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
					INI_Close(File);
        	    }
        	    case 2:
        	    {
					if(GetPlayerMoney(playerid) < 99) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					PlayerInfo[playerid][pFightingStyle] = 3;
					SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
					SCM(playerid, COLOR_WHITE, "You have learned the kneehead fightingstyle.");
					GivePlayerMoney(playerid, -100);
					
					new id = GetPlayerVirtualWorld(playerid);
				    BusinessInfo[id][bMoney] += 100;

					new file4[40];
					format(file4, sizeof(file4), BPATH, id);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
					INI_Close(File);
        	    }
        	    case 3:
        	    {
					if(GetPlayerMoney(playerid) < 100) return SCM(playerid, COLOR_LIGHTRED, "You do not have enough money.");
					PlayerInfo[playerid][pFightingStyle] = 4;
					SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
					SCM(playerid, COLOR_WHITE, "You have learned the kung-fu fightingstyle.");
					GivePlayerMoney(playerid, -100);
					
					new id = GetPlayerVirtualWorld(playerid);
				    BusinessInfo[id][bMoney] += 100;

					new file4[40];
					format(file4, sizeof(file4), BPATH, id);
					new INI:File = INI_Open(file4);
					INI_SetTag(File, "data");
					INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
					INI_Close(File);
        	    }
			}
		}
		case DIALOG_RACE:
  		{
           	switch(listitem)
        	{
          	  	case 0:
        	    {
					ShowPlayerDialog(playerid, DIALOG_GENDER, DIALOG_STYLE_LIST, "Gender", "Male\nFemale", "Choose", "Cancel");
					playerRace[playerid] = 1;
        	    }
         	  	case 1:
        	    {
  					ShowPlayerDialog(playerid, DIALOG_GENDER, DIALOG_STYLE_LIST, "Gender", "Male\nFemale", "Choose", "Cancel");
  					playerRace[playerid] = 2;
        	    }
        	    case 2:
        	    {
					ShowPlayerDialog(playerid, DIALOG_GENDER, DIALOG_STYLE_LIST, "Gender", "Male\nFemale", "Choose", "Cancel");
					playerRace[playerid] = 3;
        	    }
        	    case 3:
        	    {
					ShowPlayerDialog(playerid, DIALOG_GENDER, DIALOG_STYLE_LIST, "Gender", "Male\nFemale", "Choose", "Cancel");
					playerRace[playerid] = 4;
        	    }
			}
		}
		case DIALOG_GENDER:
  		{
           	switch(listitem)
        	{
          	  	case 0:
        	    {
					PlayerInfo[playerid][pGender] = 0;
					EndOfRegister(playerid);
        	    }
         	  	case 1:
        	    {
  					PlayerInfo[playerid][pGender] = 1;
  					EndOfRegister(playerid);
        	    }
			}
		}
		case DIALOG_AGE:
  		{
	        new age = strval(inputtext);
	        if(age < 8 || age > 99) return ShowPlayerDialog(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, "Age?", "Please type in your characters age below. (7-100)", "Submit", "Cancel");
	        PlayerInfo[playerid][pAge]= age;
	        ShowPlayerDialog(playerid, DIALOG_RACE, DIALOG_STYLE_LIST, "Appearence", "Hispanic\nAfro-American\nCaucasian\nAsian", "Choose", "Cancel");
		}
		case DIALOG_DRUGS:
  		{
           	switch(listitem)
        	{
          	  	case 0:
        	    {
					if (PlayerInfo[playerid][dMarijuana] < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have any marijuana.");
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
				    IsSmokingJoint[playerid] = 1;

				    SetTimerEx("MarijuanaEffect", 60000, 0, "i", playerid);

					new string2[128];
					format(string2, sizeof(string2), "* %s lights up a large spliff.", GetName(playerid));
				    SetPlayerChatBubble(playerid, string2, COLOR_PURPLE, 100.0, 10000);
				    PlayerInfo[playerid][dMarijuana] -= 1;
				    PlayerActionMessage(playerid, 8.0, "lights up a large spliff.");
        	    }
         	  	case 1:
        	    {
					new
					    Float: fArmour
					;
					GetPlayerArmour( playerid, fArmour );
    				if (PlayerInfo[playerid][dCocaine] < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have any cocaine.");
    				if (fArmour > 35) return SCM(playerid, COLOR_LIGHTRED, "You can't do any more cocaine.");
    				if(IsCocaineHigh[playerid] == 1) return SCM(playerid, COLOR_LIGHTRED, "You have to wait a while before taking more cocaine.");

					SetTimerEx("CocaineEffect", 300000, 0, "i", playerid);

				    PlayerInfo[playerid][dCocaine] -= 1;
				    IsCocaineHigh[playerid] = 1;
				    PlayerActionMessage(playerid, 8.0, "takes cocaine.");

				    new string[84];
   	    			format(string, sizeof(string), "* %s takes cocaine.", GetName(playerid));
	    			SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
        	    }
        	    case 2:
        	    {
    				if (PlayerInfo[playerid][dLSD] < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have any LSD.");
    				if(IsLSDHigh[playerid] == 1) return SCM(playerid, COLOR_LIGHTRED, "You have to wait a while before taking more LSD.");

    				SetTimerEx("LSDEffect", 300000, 0, "i", playerid);


				    PlayerInfo[playerid][dLSD] -= 1;
				    IsLSDHigh[playerid] = 1;
				    PlayerActionMessage(playerid, 8.0, "takes LSD.");

				    new string[84];
   	    			format(string, sizeof(string), "* %s takes LSD.", GetName(playerid));
	    			SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
        	    }
        	    case 3:
        	    {
					new
					    Float: fArmour
					;
					GetPlayerArmour( playerid, fArmour );
    				if (PlayerInfo[playerid][dMeth] < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have any meth.");
    				if (fArmour > 45) return SCM(playerid, COLOR_LIGHTRED, "You can't do any more meth.");
    				if(IsCocaineHigh[playerid] == 1) return SCM(playerid, COLOR_LIGHTRED, "You have to wait a while before taking more meth.");

					SetTimerEx("CocaineEffect", 300000, 0, "i", playerid);

				    PlayerInfo[playerid][dMeth] -= 1;
				    IsCocaineHigh[playerid] = 1;
				    PlayerActionMessage(playerid, 8.0, "takes meth.");
				    new string[84];
   	    			format(string, sizeof(string), "* %s takes meth.", GetName(playerid));
	    			SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
        	    }
         	  	case 4:
        	    {
					new
					    Float: fArmour
					;
					GetPlayerArmour( playerid, fArmour );
    				if (PlayerInfo[playerid][dEcstasy] < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have any ecstasy.");
    				if (fArmour > 20) return SCM(playerid, COLOR_LIGHTRED, "You can't do any more ecstasy.");
    				if(IsCocaineHigh[playerid] == 1) return SCM(playerid, COLOR_LIGHTRED, "You have to wait a while before taking more ecstasy.");

					SetTimerEx("CocaineEffect", 300000, 0, "i", playerid);

				    PlayerInfo[playerid][dEcstasy] -= 1;
				    IsCocaineHigh[playerid] = 1;
				    PlayerActionMessage(playerid, 8.0, "takes ecstasy.");
				    new string[84];
   	    			format(string, sizeof(string), "* %s takes ecstasy.", GetName(playerid));
	    			SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
        	    }
         	  	case 5:
        	    {
					new
					    Float: fArmour
					;
					GetPlayerArmour( playerid, fArmour );
    				if (PlayerInfo[playerid][dHeroin] < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have any heroin.");
    				if (fArmour > 35) return SCM(playerid, COLOR_LIGHTRED, "You can't do any more heroin.");
    				if(IsCocaineHigh[playerid] == 1) return SCM(playerid, COLOR_LIGHTRED, "You have to wait a while before taking more ecstasy.");

					SetTimerEx("CocaineEffect", 300000, 0, "i", playerid);

				    PlayerInfo[playerid][dHeroin] -= 1;
				    IsCocaineHigh[playerid] = 1;
				    PlayerActionMessage(playerid, 8.0, "takes heroin.");
				    new string[84];
   	    			format(string, sizeof(string), "* %s takes heroin.", GetName(playerid));
	    			SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
        	    }
         	  	case 6:
        	    {
					new
					    Float: fArmour
					;
					GetPlayerArmour( playerid, fArmour );
    				if (PlayerInfo[playerid][dCrack] < 1) return SCM(playerid, COLOR_LIGHTRED, "You do not have any crack.");
    				if (fArmour > 30) return SCM(playerid, COLOR_LIGHTRED, "You can't do any more crack.");
    				if(IsCocaineHigh[playerid] == 1) return SCM(playerid, COLOR_LIGHTRED, "You have to wait a while before taking more crack.");

					SetTimerEx("CocaineEffect", 300000, 0, "i", playerid);

				    PlayerInfo[playerid][dCrack] -= 1;
				    IsCocaineHigh[playerid] = 1;
				    PlayerActionMessage(playerid, 8.0, "takes crack.");
				    new string[84];
   	    			format(string, sizeof(string), "* %s takes crack.", GetName(playerid));
	    			SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
        	    }
			}
		}
		case 76:
  		{
           	switch(listitem)
        	{
        	    case 0:
        	    {

					new string[128], Float:BBCoord[4];
				    GetPlayerPos(playerid, BBCoord[0], BBCoord[1], BBCoord[2]);
				    GetPlayerFacingAngle(playerid, BBCoord[3]);
				    SetPVarFloat(playerid, "BBX", BBCoord[0]);
				    SetPVarFloat(playerid, "BBY", BBCoord[1]);
				    SetPVarFloat(playerid, "BBZ", BBCoord[2]);

				    BBCoord[0] += (2 * floatsin(-BBCoord[3], degrees));
				   	BBCoord[1] += (2 * floatcos(-BBCoord[3], degrees));
				   	BBCoord[2] -= 1.0;
					if(PlayerInfo[playerid][pBoombox] == 0) return SCM(playerid, COLOR_LIGHTRED, "You do not have a boombox.");
					if(GetPVarInt(playerid, "PlacedBB")) return SCM(playerid, COLOR_LIGHTRED, "You have already put down a boombox.");
					foreach(new i : Player)
					{
				 		if(GetPVarType(i, "PlacedBB"))
				   		{
				  			if(IsPlayerInRangeOfPoint(playerid, 30.0, GetPVarFloat(i, "BBX"), GetPVarFloat(i, "BBY"), GetPVarFloat(i, "BBZ")))
							{
				   				SCM(playerid, COLOR_LIGHTRED, "You can't put a boombox here. Someone is already listening to music here.");
							    return 1;
							}
						}
					}
				    PlayerActionMessage(playerid, 20.0, "places a boombox on the ground.");

					SetPVarInt(playerid, "PlacedBB", CreateDynamicObject(2226, BBCoord[0], BBCoord[1], BBCoord[2], 0.0, 0.0, 0.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid)));
					format(string, sizeof(string), "Owner: %s", GetName(playerid));
					SetPVarInt(playerid, "BBLabel", _:CreateDynamic3DTextLabel(string, -1, BBCoord[0], BBCoord[1], BBCoord[2]+0.6, 5, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid)));
					SetPVarInt(playerid, "BBArea", CreateDynamicSphere(BBCoord[0], BBCoord[1], BBCoord[2], 30.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid)));
					SetPVarInt(playerid, "BBInt", GetPlayerInterior(playerid));
					SetPVarInt(playerid, "BBVW", GetPlayerVirtualWorld(playerid));
					ApplyPlayerAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
        	    }
        	    case 1:
        	    {
					if(GetPVarType(playerid, "PlacedBB"))
					{
						if(IsPlayerInRangeOfPoint(playerid, 3.0, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ")))
						{
							ShowPlayerDialog(playerid, 75, DIALOG_STYLE_LIST, "Radio List", "Jazz\nPop\nHip-Hop\nR&B and Urban\nRock\nCountry\nEnter URL\nTurn Off Boombox", "Select", "Cancel");
						}
						else
						{
   							return SCM(playerid, COLOR_LIGHTRED, "You're not near your boombox.");
						}
		    			}
					    else
					    {
					        SCM(playerid, COLOR_LIGHTRED, "You have not placed a boombox.");
						}
        	    }
        	    case 2:
        	    {
     				if(!GetPVarType(playerid, "PlacedBB"))
				    {
				        SCM(playerid, COLOR_LIGHTRED, "You have not placed a boombox.");
				    }
					else if(IsPlayerInRangeOfPoint(playerid, 3.0, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ")))
				    {
				        PickUpBoombox(playerid);
				        PlayerActionMessage(playerid, 20.0, "picks up a boombox from the ground.");
					}
        	    }
			}
  		}
  		case DIALOG_LOCKER:
  	   	  {
           	switch(listitem)
        	{
        	    case 0:
        	    {
					SCM(playerid, COLOR_SJPD, "[SJPD:] You've equipped yourself with armour.");
					SetPlayerArmour(playerid, 99);
					ShowPlayerDialog(playerid, DIALOG_LOCKER, DIALOG_STYLE_LIST, "SJPD Locker", "Armour\nNightstick\nPepper-Spray\nDeagle\nShotgun\nMP5\nM4\nTazer\nUniform", "Choose", "Cancel");
        	    }
        	    case 1:
        	    {
					SCM(playerid, COLOR_SJPD, "[SJPD:] You've equipped yourself with a nightstick.");
					GivePlayerWeapon(playerid, 3, 1);
					ShowPlayerDialog(playerid, DIALOG_LOCKER, DIALOG_STYLE_LIST, "SJPD Locker", "Armour\nNightstick\nPepper-Spray\nDeagle\nShotgun\nMP5\nM4\nTazer\nUniform", "Choose", "Cancel");
        	    }
        	    case 2:
        	    {
					SCM(playerid, COLOR_SJPD, "[SJPD:] You've equipped yourself with pepper-spray.");
					GivePlayerWeapon(playerid, 41, 1000);
					ShowPlayerDialog(playerid, DIALOG_LOCKER, DIALOG_STYLE_LIST, "SJPD Locker", "Armour\nNightstick\nPepper-Spray\nDeagle\nShotgun\nMP5\nM4\nTazer\nUniform", "Choose", "Cancel");
        	    }
        	    case 3:
        	    {
					SCM(playerid, COLOR_SJPD, "[SJPD:] You've equipped yourself with a deagle.");
					GivePlayerWeapon(playerid, 24, 100);
					ShowPlayerDialog(playerid, DIALOG_LOCKER, DIALOG_STYLE_LIST, "SJPD Locker", "Armour\nNightstick\nPepper-Spray\nDeagle\nShotgun\nMP5\nM4\nTazer\nUniform", "Choose", "Cancel");
        	    }
        	    case 4:
        	    {
					SCM(playerid, COLOR_SJPD, "[SJPD:] You've equipped yourself with a shotgun.");
					GivePlayerWeapon(playerid, 25, 25);
					ShowPlayerDialog(playerid, DIALOG_LOCKER, DIALOG_STYLE_LIST, "SJPD Locker", "Armour\nNightstick\nPepper-Spray\nDeagle\nShotgun\nMP5\nM4\nTazer\nUniform", "Choose", "Cancel");
        	    }
         	   	case 5:
        	    {
					SCM(playerid, COLOR_SJPD, "[SJPD:] You've equipped yourself with a MP5.");
					GivePlayerWeapon(playerid, 29, 500);
					ShowPlayerDialog(playerid, DIALOG_LOCKER, DIALOG_STYLE_LIST, "SJPD Locker", "Armour\nNightstick\nPepper-Spray\nDeagle\nShotgun\nMP5\nM4\nTazer\nUniform", "Choose", "Cancel");
        	    }
        	   	case 6:
        	    {
					SCM(playerid, COLOR_SJPD, "[SJPD:] You've equipped yourself with a M4.");
					GivePlayerWeapon(playerid, 31, 500);
					ShowPlayerDialog(playerid, DIALOG_LOCKER, DIALOG_STYLE_LIST, "SJPD Locker", "Armour\nNightstick\nPepper-Spray\nDeagle\nShotgun\nMP5\nM4\nTazer\nUniform", "Choose", "Cancel");
        	    }
        	   	case 7:
        	    {
					SCM(playerid, COLOR_SJPD, "[SJPD:] You've equipped yourself with a tazer.");
					GivePlayerWeapon(playerid, 23, 100);
					ShowPlayerDialog(playerid, DIALOG_LOCKER, DIALOG_STYLE_LIST, "SJPD Locker", "Armour\nNightstick\nPepper-Spray\nDeagle\nShotgun\nMP5\nM4\nTazer\nUniform", "Choose", "Cancel");
        	    }
        	   	case 8:
        	    {
					ShowPlayerDialog(playerid, DIALOG_UNIFORM, DIALOG_STYLE_LIST, "SJPD Locker", "Uniform 1\nUniform 2\nUniform 3\nFemale Uniform 1\nFemale Uniform 2\nBiker Uniform\nSheriff Uniform\nBlack\nHispanic\nPulaski", "Choose", "Cancel");
        	    }
			}
		}
  		case DIALOG_UNIFORM:
  	   	  {
           	switch(listitem)
        	{
        	    case 0:
        	    {
					SetPlayerSkin(playerid, 280);
        	    }
        	    case 1:
        	    {
					SetPlayerSkin(playerid, 281);
        	    }
        	    case 2:
        	    {
					SetPlayerSkin(playerid, 282);
        	    }
        	    case 3:
        	    {
					SetPlayerSkin(playerid, 211);
        	    }
        	    case 4:
        	    {
					SetPlayerSkin(playerid, 233);
        	    }
         	   	case 5:
        	    {
					SetPlayerSkin(playerid, 284);
        	    }
        	   	case 6:
        	    {
					SetPlayerSkin(playerid, 283);
        	    }
        	   	case 7:
        	    {
					SetPlayerSkin(playerid, 265);
        	    }
          	 	case 8:
        	    {
					SetPlayerSkin(playerid, 267);
        	    }
        	   	case 9:
        	    {
					SetPlayerSkin(playerid, 266);
        	    }
			}
		}
		case 10:// Our dialog!
	 	{
           	switch(listitem)// Checking which listitem was selected
        	{
        	    case 0:// The first item listed
        	    {
        	        if(GetPlayerMoney(playerid) < 49) return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have enough cash.");
        	        GivePlayerMoney(playerid, -50);
        	        PlayerInfo[playerid][dMarijuana] += 10;
        	    }
        	    case 1: // The second item listed
        	    {
        	        if(GetPlayerMoney(playerid) < 99) return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have enough cash.");
        	        GivePlayerMoney(playerid, -100);
					PlayerInfo[playerid][dCocaine] += 10;
        	    }
        	    case 2: // The third item listed
        	    {
        	        if(GetPlayerMoney(playerid) < 99) return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have enough cash.");
        	        GivePlayerMoney(playerid, -100);
        	        PlayerInfo[playerid][dLSD] += 5;
 	   			}
        	}
    	}
		case 15:// Our dialog!
  		{
           	switch(listitem)// Checking which listitem was selected
        	{
        	    case 0:// The first item listed
        	    {
        	        if(GetPlayerMoney(playerid) < 99) return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have enough cash.");
        	        GivePlayerMoney(playerid, -100);
        	        GivePlayerWeapon(playerid, 4, 1);
        	    }
        	    case 1: // The second item listed
        	    {
        	        if(GetPlayerMoney(playerid) < 49) return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have enough cash.");
        	        GivePlayerMoney(playerid, -50);
        	        GivePlayerWeapon(playerid, 5, 1);
    	        	   }
    	    	   }
       		}
        case DIALOG_REGISTER:
        {
      		if (!response)
            {
                Kick(playerid);
                return 1;
            }
            else if(response) // Pressed ENTER or clicked 'Login' button
            {
                if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT, "Register", "You have entered an invalid password.\n""Type your password below to register a new account.", "Register", "Quit");
                new IP[22];
                GetPlayerIp(playerid, IP, sizeof(IP));
                new name[MAX_PLAYER_NAME];
    			GetPlayerName(playerid, name, sizeof(name));
    			
    			PlayerInfo[playerid][pName] = name;
    			PlayerInfo[playerid][pPlate1] = 0;
    			PlayerInfo[playerid][pPlate2] = 0;
    			PlayerInfo[playerid][pPlate3] = 0;
                new INI:File = INI_Open(UserPath(playerid));
                INI_SetTag(File, "data");
                INI_WriteInt(File, "Password", udb_hash(inputtext));
                INI_WriteInt(File, "Cash", 0);
                INI_WriteInt(File, "Admin", 0);
                INI_WriteInt(File, "Kills", 0);
                INI_WriteInt(File, "Deaths", 0);
                INI_WriteInt(File, "LSD", 0);
                INI_WriteInt(File, "Cocaine", 0);
                INI_WriteInt(File, "Marijuana", 0);
                INI_WriteInt(File, "Respect", 0);
                INI_WriteInt(File, "Cigarettes", 0);
                INI_WriteInt(File, "Beer", 0);
                INI_WriteString(File, "Ip", IP);
                INI_WriteFloat(File, "Health", 0);
                INI_WriteInt(File, "BankAccount", 0);
                INI_WriteInt(File, "Datasaved", 0);
                INI_WriteInt(File, "Number", 0);
                INI_WriteInt(File, "Level", 0);
                INI_WriteInt(File, "Crashed", 0);
                INI_WriteInt(File, "Phone", 0);
                INI_WriteInt(File, "Donator", 0);
				INI_WriteInt(File, "Plate1", PlayerInfo[playerid][pPlate1]);
				INI_WriteInt(File, "Plate2", PlayerInfo[playerid][pPlate2]);
				INI_WriteInt(File, "Plate3", PlayerInfo[playerid][pPlate3]);
   				INI_WriteString(File, "Name", PlayerInfo[playerid][pName]);
                INI_Close(File);
				
      			FadeColorForPlayer(playerid, 0, 0, 0, 0, 0, 0, 0, 255, 15, 0);
                GivePlayerMoney(playerid, 2500);
                PlayerInfo[playerid][pSkin] = 26;
                PlayerInfo[playerid][pXPos] = 1742.9600;
                PlayerInfo[playerid][pYPos] = -1861.4019;
                PlayerInfo[playerid][pZPos] = 0.2426;
                PlayerInfo[playerid][pLevel] = 1;
                PlayerInfo[playerid][pBankAccount] = 1000;
                SetTimerEx("AgeSetup", 1000, false, "i", playerid);
                new Year, Month, Day;
				getdate(Year, Month, Day);
				PlayerLogged[playerid] = true;
				PlayerInfo[playerid][pYear] = Year;
				PlayerInfo[playerid][pMonth] = Month;
				PlayerInfo[playerid][pDay] = Day;
            }
        }
        case DIALOG_LOGIN:
        {
      		if(!response)
            {
                Kick(playerid);
                return 1;
            }
            else if(response) // Pressed ENTER or clicked 'Login' button
            {
                if(udb_hash(inputtext) == PlayerInfo[playerid][pPass])
                {
                    INI_ParseFile(UserPath(playerid), "LoadUser_%s", .bExtra = true, .extra = playerid);
                    GivePlayerMoney(playerid, PlayerInfo[playerid][pCash]);
                    LoadFightingStyle(playerid);
                   	FadeColorForPlayer(playerid, 0, 0, 0, 255, 0, 0, 0, 0, 15, 0);
                    SCM(playerid, COLOR_WHITE, "You have successfully logged in.");
                    TogglePlayerSpectating(playerid, false);
                    PlayerLogged[playerid] = true;
                    SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
              		new playername[24];
					GetPlayerName(playerid, playername, sizeof(playername));
					
					PlayerInfo[playerid][pName] = playername;
					
					new INI:File = INI_Open(UserPath(playerid));
					INI_SetTag(File, "data");
					INI_WriteString(File, "Name", PlayerInfo[playerid][pName]);
					INI_Close(File);
					
					sInfo[playerid][Misc] = 0;
					sInfo[playerid][Head] = 0;
					sInfo[playerid][Chest] = 0;
					sInfo[playerid][Crotch] = 0;
					sInfo[playerid][LArm] = 0;
					sInfo[playerid][RArm] = 0;
					sInfo[playerid][LLeg] = 0;
					sInfo[playerid][RLeg] = 0;
					
					if(PlayerInfo[playerid][pTutorialDone] == 0) return SetTimerEx("AgeSetup", 1000, false, "i", playerid);
					
				 	/* for(new i=1; i < MAX_DVEHICLES; i++)
					{
						if(VehicleCreated[i] == VEHICLE_PLAYER && strcmp(VehicleOwner[i], playername) == 0)
						{
							SetVehicleVirtualWorld(VehicleID[i], VehicleWorld[i]);
							SetVehicleVirtualWorld(VehicleID[i], VehicleWorld[i]);
							SetVehicleVirtualWorld(VehicleID[i], VehicleWorld[i]);
			    			SetVehiclePos(VehicleID[i], VehiclePos[i][0], VehiclePos[i][1], VehiclePos[i][2]);
			    			SetVehiclePos(VehicleID[i], VehiclePos[i][0], VehiclePos[i][1], VehiclePos[i][2]);
			    			SetVehiclePos(VehicleID[i], VehiclePos[i][0], VehiclePos[i][1], VehiclePos[i][2]);
 		    		    	SetVehicleZAngle(VehicleID[i], VehiclePos[i][3]);
 		    		    	SetVehicleZAngle(VehicleID[i], VehiclePos[i][3]);
 		    		    	SetVehicleZAngle(VehicleID[i], VehiclePos[i][3]);
						}
					}
					*/
                   	if(PlayerInfo[playerid][pBanned] == 1)
					{
					    SCM(playerid, COLOR_LIGHTRED, "AdmCmd: You have been banned for logging into a banned account.");
    					SetTimerEx("UnsetBan", 500, 0, "i", playerid);
					}
                }
                else
                {
                    ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_INPUT, "Login", "You have entered an incorrect password.\n""Type your password below to login.", "Login", "Quit");
                }
                return 1;
            }
        }
    }
	if(dialogid == DIALOG_ERROR)
	{
		ShowDialog(playerid, DialogReturn[playerid]);
		return 1;
	}
	DialogReturn[playerid] = dialogid;
	if(dialogid == DIALOG_VEHICLE)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
					if(engine == 0 && Fuel[vehicleid] <= 0)
					{
						ShowErrorDialog(playerid, "This vehicle is out of fuel.");
						return 1;
					}
					if(engine == 1) { engine = 0; lights = 0; }
					else { engine = 1; lights = 1; }
					SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
				}
				case 1:
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
					if(lights == 1) lights = 0; else lights = 1;
					SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
				}
				case 2:
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
					if(bonnet == 1) bonnet = 0; else bonnet = 1;
					SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
				}
				case 3:
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
					if(boot == 1) boot = 0; else boot = 1;
					SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
				}
				case 4:
				{
					if(!GetPVarInt(playerid, "GasCan"))
					{
						ShowErrorDialog(playerid, "You don't have a gas can.");
						return 1;
					}
					new vehicleid = GetPlayerVehicleID(playerid);
					if(Fuel[vehicleid] < 80.0) Fuel[vehicleid] += 20.0;
					else Fuel[vehicleid] = 100.0;
					SetPVarInt(playerid, "GasCan", 0);
					SendClientMessage(playerid, COLOR_WHITE, "You have filled the fuel tank with 20% fuel.");
				}
				case 5:
				{
					new id = GetPVarInt(playerid, "DialogValue1");
					if(GetPlayerVehicleAccess(playerid, id) < 2)
					{
						ShowErrorDialog(playerid, "You are not the owner of this vehicle.");
						return 1;
					}
					if(!strcmp(VehicleNumberPlate[id], PlayerInfo[playerid][pPlate1]))
					{
						PlayerInfo[playerid][pPlate1] = 0;
						new INI:File = INI_Open(UserPath(playerid));
						INI_SetTag(File, "data");
						INI_WriteInt(File, "Plate1", PlayerInfo[playerid][pPlate1]);
						INI_Close(File);
					}
					else if(!strcmp(VehicleNumberPlate[id], PlayerInfo[playerid][pPlate2]))
					{
						PlayerInfo[playerid][pPlate2] = 0;
						new INI:File = INI_Open(UserPath(playerid));
						INI_SetTag(File, "data");
						INI_WriteInt(File, "Plate2", PlayerInfo[playerid][pPlate2]);
						INI_Close(File);
					}
					else if(!strcmp(VehicleNumberPlate[id], PlayerInfo[playerid][pPlate3]))
     				{
						PlayerInfo[playerid][pPlate3] = 0;
						new INI:File = INI_Open(UserPath(playerid));
						INI_SetTag(File, "data");
						INI_WriteInt(File, "Plate3", PlayerInfo[playerid][pPlate3]);
						INI_Close(File);
					}
					new msg[128];
					VehicleCreated[id] = 0;
					new money = VehicleValue[id]/2;
					GivePlayerMoney(playerid, money);
					format(msg, sizeof(msg), "You have sold your vehicle for $%d.", money);
					SendClientMessage(playerid, COLOR_WHITE, msg);
					RemovePlayerFromVehicle(playerid);
					DestroyVehicle(VehicleID[id]);
					SaveVehicle(id);
				}
				case 6:
				{
					new vehicleid = GetPVarInt(playerid, "DialogValue1");
					if(GetPlayerVehicleAccess(playerid, vehicleid) < 2)
					{
						ShowErrorDialog(playerid, "You are not the owner of this vehicle.");
						return 1;
					}
					GetVehiclePos(VehicleID[vehicleid], VehiclePos[vehicleid][0], VehiclePos[vehicleid][1], VehiclePos[vehicleid][2]);
					GetVehicleZAngle(VehicleID[vehicleid], VehiclePos[vehicleid][3]);
					VehicleInterior[vehicleid] = GetPlayerInterior(playerid);
					VehicleWorld[vehicleid] = GetPlayerVirtualWorld(playerid);
					if(GetPlayerMoney(playerid) < 199) return SCM(playerid, COLOR_LIGHTRED, "You don't have enough money. ($700)");
					GivePlayerMoney(playerid, -200);
					SendClientMessage(playerid, COLOR_WHITE, "You have bought this parking spot for your vehicle.");
					UpdateVehicle(vehicleid, 1);
					PutPlayerInVehicle(playerid, VehicleID[vehicleid], 0);
					SaveVehicle(vehicleid);
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHICLE_BUY)
	{
		if(response)
		{
			if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
			{
				ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
				return 1;
			}
			new id = GetPVarInt(playerid, "DialogValue1");
			if(GetPlayerMoney(playerid) < VehicleValue[id])
			{
				ShowErrorDialog(playerid, "You don't have enough money to buy this vehicle.");
				return 1;
			}
			new freeid = GetFreeVehicleID();
			if(!freeid)
			{
				ShowErrorDialog(playerid, "Vehicle dealership is out of stock.");
				return 1;
			}
			GivePlayerMoney(playerid, -VehicleValue[id]);
			new dealerid = strval(VehicleOwner[id]);
			VehicleCreated[freeid] = VEHICLE_PLAYER;
			VehicleModel[freeid] = VehicleModel[id];
			VehiclePos[freeid] = DealershipPos[dealerid];
			VehicleColor[freeid] = VehicleColor[id];
			VehicleInterior[freeid] = 0;
   			VehicleWorld[freeid] = 0;
			VehicleValue[freeid] = VehicleValue[id];
			GetPlayerName(playerid, VehicleOwner[freeid], sizeof(VehicleOwner[]));
			VehicleNumberPlate[freeid] = DEFAULT_NUMBER_PLATE;
			for(new d=0; d < sizeof(VehicleTrunk[]); d++)
			{
				VehicleTrunk[freeid][d][0] = 0;
				VehicleTrunk[freeid][d][1] = 0;
			}
			for(new d=0; d < sizeof(VehicleMods[]); d++)
			{
				VehicleMods[freeid][d] = 0;
			}
			VehiclePaintjob[freeid] = 255;
			VehicleLock[freeid] = 0;
			VehicleAlarm[freeid] = 0;
			UpdateVehicle(freeid, 0);
			SaveVehicle(freeid);
			new msg[128];
			format(msg, sizeof(msg), "You have bought this vehicle for $%d. Your vehicle is waiting for you outside.", VehicleValue[id]);
			SendClientMessage(playerid, COLOR_WHITE, msg);
		}
		else
		{
			new id = GetPVarInt(playerid, "DialogValue1");
			if(GetPlayerVehicleAccess(playerid, id) < 1)
			{
				RemovePlayerFromVehicle(playerid);
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHICLE_SELL)
	{
		if(response)
		{
			if(GetPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
			{
				ShowErrorDialog(playerid, "You can't buy any more vehicles. Limit: " #MAX_PLAYER_VEHICLES );
				return 1;
			}
			new targetid = GetPVarInt(playerid, "DialogValue1");
			new id = GetPVarInt(playerid, "DialogValue2");
			new price = GetPVarInt(playerid, "DialogValue3");
			if(GetPlayerMoney(playerid) < price)
			{
				ShowErrorDialog(playerid, "You don't have enough money to buy this vehicle.");
				return 1;
			}
			new msg[128];
			GetPlayerName(playerid, VehicleOwner[id], sizeof(VehicleOwner[]));
			GivePlayerMoney(playerid, -price);
			GivePlayerMoney(targetid, price);
			SaveVehicle(id);
			format(msg, sizeof(msg), "You have bought this vehicle for $%d.", price);
			SendClientMessage(playerid, COLOR_WHITE, msg);
			format(msg, sizeof(msg), "%s (%d) has accepted your offer and has bought the vehicle.", PlayerName(playerid), playerid);
			SendClientMessage(targetid, COLOR_WHITE, msg);
		}
		else
		{
			new targetid = GetPVarInt(playerid, "DialogValue1");
			new msg[128];
			format(msg, sizeof(msg), "%s (%d) denied your offer.", PlayerName(playerid), playerid);
			SendClientMessage(targetid, COLOR_WHITE, msg);
		}
		return 1;
	}
	if(dialogid == DIALOG_FINDVEHICLE)
	{
		if(response)
		{
			new id;
			sscanf(inputtext[4], "d", id);
			if(IsValidVehicle(id))
			{
				TrackCar[playerid] = VehicleID[id];
				SendClientMessage(playerid, COLOR_WHITE, "Your vehicle's location is shown on your minimap.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_TRUNK)
	{
		if(response)
		{
			SetPVarInt(playerid, "DialogValue2", listitem);
			ShowDialog(playerid, DIALOG_TRUNK_ACTION);
		}
		else
		{
			new vehicleid = GetClosestVehicle(playerid);
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, 0, objective);
		}
		return 1;
	}
	if(dialogid == DIALOG_TRUNK_ACTION)
	{
		if(response)
		{
			new id = GetPVarInt(playerid, "DialogValue1");
			new slot = GetPVarInt(playerid, "DialogValue2");
			switch(listitem)
			{
			case 0:
			{
				new weaponid = GetPlayerWeapon(playerid);
				if(weaponid == 0)
				{
					ShowErrorDialog(playerid, "You don't have a weapon in your hand.");
					return 1;
				}
				VehicleTrunk[id][slot][0] = weaponid;
				if(IsMeleeWeapon(weaponid)) VehicleTrunk[id][slot][1] = 1;
				else VehicleTrunk[id][slot][1] = GetPlayerAmmo(playerid);
				RemovePlayerWeapon(playerid, weaponid);
				SaveVehicle(id);
			}
			case 1:
			{
				if(VehicleTrunk[id][slot][1] <= 0)
				{
					ShowErrorDialog(playerid, "This slot is empty.");
					return 1;
				}
				GivePlayerWeapon(playerid, VehicleTrunk[id][slot][0], VehicleTrunk[id][slot][1]);
				VehicleTrunk[id][slot][0] = 0;
				VehicleTrunk[id][slot][1] = 0;
				SaveVehicle(id);
			}
			}
		}
		ShowDialog(playerid, DIALOG_TRUNK);
		return 1;
	}
	if(dialogid == DIALOG_VEHICLE_PLATE)
	{
		if(response)
		{
			if(strlen(inputtext) < 1 || strlen(inputtext) >= sizeof(VehicleNumberPlate[]))
			{
				ShowErrorDialog(playerid, "* Invalid length.");
				return 1;
			}
			new id = GetPVarInt(playerid, "DialogValue1");
			new vehicleid = VehicleID[id];
			strmid(VehicleNumberPlate[id], inputtext, 0, sizeof(VehicleNumberPlate[]));
			SaveVehicle(id);
			SetVehicleNumberPlate(vehicleid, inputtext);
			SetVehicleToRespawn(vehicleid);
			new msg[128];
			format(msg, sizeof(msg), "You have changed vehicle number plate to %s.", inputtext);
			SendClientMessage(playerid, COLOR_WHITE, msg);
		}
		else ShowDialog(playerid, DIALOG_VEHICLE);
		return 1;
	}
	if(dialogid == DIALOG_FUEL)
	{
		if(response)
		{
			switch(listitem)
			{
			case 0:
			{
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
					ShowErrorDialog(playerid, "You are not driving a vehicle.");
					return 1;
				}
				new vehicleid = GetPlayerVehicleID(playerid);
				if(IsBicycle(vehicleid))
				{
					ShowErrorDialog(playerid, "Your vehicle doesn't have a fuel tank!");
					return 1;
				}
				if(Fuel[vehicleid] >= 100.0)
				{
					ShowErrorDialog(playerid, "Your vehicle fuel tank is full.");
					return 1;
				}
				if(GetPlayerMoney(playerid) < FUEL_PRICE)
				{
					ShowErrorDialog(playerid, "You don't have enough money.");
					return 1;
				}
				RefuelTime[playerid] = 5;
				SetPVarFloat(playerid, "Fuel", Fuel[vehicleid]);
				GameTextForPlayer(playerid, "~g~refueling...", 2000, 3);
			}
			case 1:
			{
				if(GetPVarInt(playerid, "GasCan"))
				{
					ShowErrorDialog(playerid, "You already have a gas can.");
					return 1;
				}
				if(GetPlayerMoney(playerid) < GAS_CAN_PRICE)
				{
					ShowErrorDialog(playerid, "You don't have enough money.");
					return 1;
				}
				GivePlayerMoney(playerid, -GAS_CAN_PRICE);
				SetPVarInt(playerid, "GasCan", 1);
				SendClientMessage(playerid, COLOR_WHITE, "You have bought a gas can for $. Get in your vehicle and type /vehicle to fill it." #GAS_CAN_PRICE );
			}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_EDITVEHICLE)
	{
		if(response)
		{
			new id = GetPVarInt(playerid, "DialogValue1");
			new nr, params[128];
			sscanf(inputtext, "ds", nr, params);
			switch(nr)
			{
				case 1:
				{
					new value = strval(params);
					if(value < 0) value = 0;
					VehicleValue[id] = value;
					UpdateVehicleLabel(id, 1);
					SaveVehicle(id);
					ShowDialog(playerid, DIALOG_EDITVEHICLE);
				}
				case 2:
				{
					new value;
					if(IsNumeric(params)) value = strval(params);
					else value = GetVehicleModelIDFromName(params);
					if(value < 400 || value > 611)
					{
						ShowErrorDialog(playerid, "Invalid vehicle model!");
						return 1;
					}
					VehicleModel[id] = value;
					for(new i=0; i < sizeof(VehicleMods[]); i++)
					{
						VehicleMods[id][i] = 0;
					}
					VehiclePaintjob[id] = 255;
					UpdateVehicle(id, 1);
					SaveVehicle(id);
					ShowDialog(playerid, DIALOG_EDITVEHICLE);
				}
				case 3:
				{
					new color1, color2;
					sscanf(params, "dd", color1, color2);
					VehicleColor[id][0] = color1;
					VehicleColor[id][1] = color2;
					SaveVehicle(id);
					ChangeVehicleColor(VehicleID[id], color1, color2);
					ShowDialog(playerid, DIALOG_EDITVEHICLE);
				}
				case 4:
				{
					if(strlen(params) < 1 || strlen(params) > 8)
					{
						ShowErrorDialog(playerid, "Invalid length!");
						return 1;
					}
					strmid(VehicleNumberPlate[id], params, 0, sizeof(params));
					SaveVehicle(id);
					SetVehicleNumberPlate(VehicleID[id], params);
					SetVehicleToRespawn(VehicleID[id]);
					ShowDialog(playerid, DIALOG_EDITVEHICLE);
				}
				case 5:
				{
					DestroyVehicle(VehicleID[id]);
					if(VehicleCreated[id] == VEHICLE_DEALERSHIP)
					{
						Delete3DTextLabel(VehicleLabel[id]);
					}
					VehicleCreated[id] = 0;
					SaveVehicle(id);
					new msg[128];
					format(msg, sizeof(msg), "You have deleted vehicle id %d", id);
					SendClientMessage(playerid, COLOR_WHITE, msg);
				}
				case 6:
				{
					if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
					{
						ShowErrorDialog(playerid, "You are not in the driver seat of a vehicle.");
						return 1;
					}
					GetVehiclePos(VehicleID[id], VehiclePos[id][0], VehiclePos[id][1], VehiclePos[id][2]);
					GetVehicleZAngle(VehicleID[id], VehiclePos[id][3]);
					VehicleInterior[id] = GetPlayerInterior(playerid);
					VehicleWorld[id] = GetPlayerVirtualWorld(playerid);
					SendClientMessage(playerid, COLOR_WHITE, "You have parked your vehicle at this position.");
					GivePlayerMoney(playerid, -200);
					UpdateVehicle(id, 1);
					PutPlayerInVehicle(playerid, VehicleID[id], 0);
					SaveVehicle(id);
					ShowDialog(playerid, DIALOG_EDITVEHICLE);
				}
				case 7:
				{
					new Float:x, Float:y, Float:z;
					GetVehiclePos(VehicleID[id], x, y, z);
					SetPlayerPos(playerid, x, y, z+1);
					new msg[128];
					format(msg, sizeof(msg), "You have teleported to vehicle id %d", id);
					SendClientMessage(playerid, COLOR_WHITE, msg);
				}
			}
		}
		return 1;
	}
}
return 0;
}

public SaveBusiness(id)
{
    new file4[40];
    format(file4, sizeof(file4), BPATH, id);
    new INI:File = INI_Open(file4);
    INI_SetTag(File, "data");
    INI_WriteInt(File, "bOwned", BusinessInfo[id][bOwned]);
    INI_WriteInt(File, "bPrice", BusinessInfo[id][bPrice]);
    INI_WriteString(File, "bOwner", BusinessInfo[id][bOwner]);
    INI_WriteInt(File, "bType", BusinessInfo[id][bType]);
    INI_WriteInt(File, "bLocked", BusinessInfo[id][bLocked]);
    INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
    INI_WriteFloat(File, "bEntranceX", BusinessInfo[id][bEntranceX]);
    INI_WriteFloat(File, "bEntranceY", BusinessInfo[id][bEntranceY]);
    INI_WriteFloat(File, "bEntranceZ", BusinessInfo[id][bEntranceZ]);
    INI_WriteFloat(File, "bEntranceA", BusinessInfo[id][bEntranceA]);
    INI_WriteFloat(File, "bExitX", BusinessInfo[id][bExitX]);
    INI_WriteFloat(File, "bExitY", BusinessInfo[id][bExitY]);
    INI_WriteFloat(File, "bExitZ", BusinessInfo[id][bExitZ]);
    INI_WriteFloat(File, "bExitA", BusinessInfo[id][bExitA]);
    INI_WriteInt(File, "bInt", BusinessInfo[id][bInt]);
    INI_WriteInt(File, "bWorld", BusinessInfo[id][bWorld]);
    INI_WriteInt(File, "bInsideInt", BusinessInfo[id][bInsideInt]);
    INI_WriteInt(File, "bInsideWorld", BusinessInfo[id][bInsideWorld]);
    INI_WriteString(File, "bName", BusinessInfo[id][bName]);
    INI_Close(File);
    return 1;
}

stock GetName(playerid)
{
    new
    name[24];
    GetPlayerName(playerid, name, sizeof(name));
    strreplace(name, '_', ' ');
    return name;
}

public ProxDetector(Float:radi, playerid, const string[], col1, col2, col3, col4, col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;

		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(!BigEar[i])
				{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					//printf("DEBUG: X:%f Y:%f Z:%f", posx, posy, posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
					    if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
					    {
							SendClientMessage(i, col1, string);
						}
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
                        if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
                        {
							SendClientMessage(i, col2, string);
						}
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
					    if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
					    {
							SendClientMessage(i, col3, string);
						}
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
					    if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
					    {
							SendClientMessage(i, col4, string);
						}
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
                        if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
                        {
							SendClientMessage(i, col5, string);
						}
					}
    	}
				else
				{
					SendClientMessage(i, col1, string);
				}
			}
		}
	}//not connected
	return 1;
}

stock strreplace(string[], find, replace)
{
    for(new i=0; string[i]; i++)
    {
        if(string[i] == find)
        {
            string[i] = replace;
        }
    }
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(mapCP[playerid] == 1)
	{
		DisablePlayerCheckpoint(playerid);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	    mapCP[playerid] = 0;
	}
	if(RobstoreCP[playerid] == 1)
	{
	    SCM(playerid, -1, "Type /emptyregister to empty the cash register.");
	}
	else if(RobstoreCP[playerid] == 2)
	{
	    SCM(playerid, -1, "Type /emptyregister to empty the cash register.");
	}
	else if(RobstoreCP[playerid] == 3)
	{
	    SCM(playerid, -1, "Type /emptyregister to empty the cash register.");
	}
	if(ShopCP[playerid] == 1)
	{
	    SCM(playerid, -1, "Type /place to place products on the shelf.");
	}
	if(BackupCP[playerid] == 1)
	{
   		DisablePlayerCheckpoint(playerid);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	    BackupCP[playerid] = 0;
	}
	if(BoatCP[playerid] == 1)
	{
	}
	if(CP[playerid] == 69)
	{
		DisablePlayerCheckpoint(playerid);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	}
	if(PizzaCP1[playerid] == 1)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				SetPlayerCheckpoint(playerid, 2073.3491, -1693.5277, 13.1523, 3.5);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP1[playerid] = 2;
				return 1;
			}
		}
	}
	else if(PizzaCP1[playerid] == 2)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				SetPlayerCheckpoint(playerid, 2073.7241, -1631.2341, 13.1424, 3.5);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP1[playerid] = 3;
				return 1;
			}
		}
	}
	else if(PizzaCP1[playerid] == 3)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				SetPlayerCheckpoint(playerid, 2009.8979, -1640.0920, 13.1448, 3.5);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP1[playerid] = 4;
				return 1;
			}
		}
	}
	else if(PizzaCP1[playerid] == 4)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				SetPlayerCheckpoint(playerid, 2010.0789, -1715.1626, 13.1399, 3.5);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP1[playerid] = 5;
				return 1;
			}
		}
	}
	else if(PizzaCP1[playerid] == 5)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				SetPlayerCheckpoint(playerid, 1995.2349, -1805.4139, 13.1414, 3.5);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP1[playerid] = 6;
				return 1;
			}
		}
	}
	else if(PizzaCP1[playerid] == 6)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				SetPlayerCheckpoint(playerid, 2088.8938, -1880.6472, 13.1414, 3.5);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP1[playerid] = 7;
				return 1;
			}
		}
	}
	else if(PizzaCP1[playerid] == 7)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				SetPlayerCheckpoint(playerid, 1936.8583, -1924.0994, 13.1409, 3.5);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP1[playerid] = 8;
				return 1;
			}
		}
	}
	else if(PizzaCP1[playerid] == 7)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				SetPlayerCheckpoint(playerid, 1872.1899, -1924.1754, 13.1423, 3.5);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP1[playerid] = 8;
				return 1;
			}
		}
	}
	else if(PizzaCP1[playerid] == 8)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				SetPlayerCheckpoint(playerid, 1865.1620, -1759.8785, 13.1411, 3.5);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP1[playerid] = 9;
				return 1;
			}
		}
	}
	else if(PizzaCP1[playerid] == 9)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				SetPlayerCheckpoint(playerid, 2047.1398, -1759.7383, 13.1406, 3.5);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP1[playerid] = 10;
				return 1;
			}
		}
	}
	else if(PizzaCP1[playerid] == 10)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				SetPlayerCheckpoint(playerid, 2113.2576, -1772.7532, 12.9886, 3.5);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP1[playerid] = 11;
				return 1;
			}
		}
	}
	else if(PizzaCP1[playerid] == 11)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				new vehicle;
				vehicle = GetPlayerVehicleID(playerid);
				SetVehicleToRespawn(vehicle);
				DisablePlayerCheckpoint(playerid);
				new string[128];
				SCM(playerid, -1, "___________________[PIZZA JOB COMPLETED]___________________");
				format(string, sizeof(string), "Old bank balance: $%d", PlayerInfo[playerid][pBankAccount]);
		 		SCM(playerid, COLOR_WHITE, string);
				new randcheck = 50 + random(100);
				PlayerInfo[playerid][pBankAccount] += randcheck;
				format(string, sizeof(string), "Job Paycheck: $%d", randcheck);
				SCM(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "New bank balance: $%d", PlayerInfo[playerid][pBankAccount]);
				SCM(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "~w~Paycheck! ~n~~g~$%d", randcheck);
				GameTextForPlayer(playerid, string, 3000, 1);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP1[playerid] = 0;
				return 1;
			}
		}
	}
	if(PizzaCP2[playerid] == 1)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				SetPlayerCheckpoint(playerid, 2263.6602, -1784.5691, 13.1471, 3.5);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP2[playerid] = 2;
				return 1;
			}
		}
	}
	else if(PizzaCP2[playerid] == 2)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				SetPlayerCheckpoint(playerid, 2326.4851, -1796.2114, 13.1430, 3.5);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP2[playerid] = 3;
				return 1;
			}
		}
	}
	else if(PizzaCP2[playerid] == 3)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				SetPlayerCheckpoint(playerid, 2375.9917, -1724.8312, 13.1427, 3.5);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP2[playerid] = 4;
				return 1;
			}
		}
	}
	else if(PizzaCP2[playerid] == 4)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				SetPlayerCheckpoint(playerid, 2494.6934, -1685.5424, 13.1081, 3.5);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP2[playerid] = 5;
				return 1;
			}
		}
	}
	else if(PizzaCP2[playerid] == 5)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				SetPlayerCheckpoint(playerid, 2499.3152, -1651.8124, 13.1047, 3.5);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP2[playerid] = 6;
				return 1;
			}
		}
	}
	else if(PizzaCP2[playerid] == 6)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				SetPlayerCheckpoint(playerid, 2394.4124, -1651.0870, 13.1425, 3.5);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP2[playerid] = 7;
				return 1;
			}
		}
	}
	else if(PizzaCP2[playerid] == 7)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				SetPlayerCheckpoint(playerid, 2256.6118, -1650.1366, 15.0759, 3.5);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP2[playerid] = 8;
				return 1;
			}
		}
	}
	else if(PizzaCP2[playerid] == 8)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				SetPlayerCheckpoint(playerid, 2157.4480, -1613.1461, 13.8479, 3.5);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP2[playerid] = 9;
				return 1;
			}
		}
	}
	else if(PizzaCP2[playerid] == 9)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				SetPlayerCheckpoint(playerid, 2073.8616, -1653.8837, 13.1462, 3.5);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP2[playerid] = 10;
				return 1;
			}
		}
	}
	else if(PizzaCP2[playerid] == 10)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				SetPlayerCheckpoint(playerid, 2073.4214, -1702.9871, 13.1547, 3.5);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP2[playerid] = 11;
				return 1;
			}
		}
	}
	else if(PizzaCP2[playerid] == 11)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				SetPlayerCheckpoint(playerid, 2114.0469, -1776.7671, 12.9868, 3.5);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP2[playerid] = 12;
				return 1;
			}
		}
	}
	else if(PizzaCP2[playerid] == 12)
	{
		for(new i=0; i<MAX_PIZZABOYS; i++)
		{
			if(IsPlayerInVehicle(playerid, PizzaBoys[i]))
			{
				new vehicle;
				vehicle = GetPlayerVehicleID(playerid);
				SetVehicleToRespawn(vehicle);
				DisablePlayerCheckpoint(playerid);
				new string[128];
				SCM(playerid, -1, "___________________[PIZZA JOB COMPLETED]___________________");
				format(string, sizeof(string), "Old bank balance: $%d", PlayerInfo[playerid][pBankAccount]);
		 		SCM(playerid, COLOR_WHITE, string);
				new randcheck = 50 + random(100);
				PlayerInfo[playerid][pBankAccount] += randcheck;
				format(string, sizeof(string), "Job Paycheck: $%d", randcheck);
				SCM(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "New bank balance: $%d", PlayerInfo[playerid][pBankAccount]);
				SCM(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "~w~Paycheck! ~n~~g~$%d", randcheck);
				GameTextForPlayer(playerid, string, 3000, 1);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				PizzaCP2[playerid] = 0;
				return 1;
			}
		}
	}
	if(SouthRoute[playerid] == 1)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 1916.8032, -1754.8870, 13.0393, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 2;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] Idlewood Gas Station!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 2)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 1959.3656, -1913.0498, 13.0409, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 3;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] El Corona Avenue!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 3)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 2118.1855, -1897.4606, 12.9891, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 4;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] Gilmore Park!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 4)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 2311.2676, -1921.9563, 13.0680, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 5;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] Grace Avenue!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 5)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 2476.2061, -1935.8439, 12.9681, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 6;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] Willowfield Mall!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 6)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 2763.5234, -1997.3419, 13.0327, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 7;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] Willowfield Courts!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 7)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 2739.0593, -1888.1588, 10.5423, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 8;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] San Jose Forum!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 8)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 2457.8542, -1729.7275, 13.1026, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 9;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] Ganton Strip!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 9)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 2274.4644, -1730.1951, 13.0439, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 10;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] Ganton Strip!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 10)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 2227.8440, -1668.9989, 14.5852, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 11;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] Ganton Strip!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 11)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 2215.2141, -1500.1172, 23.4865, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 12;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] Ganton Binco!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 12)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 2170.8970, -1277.1998, 23.4774, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 13;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] Gibson Avenue!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 13)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 2178.2341, -1152.4834, 24.4203, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 14;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] Jefferson Residential Area!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 14)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 2119.7849, -1107.0059, 24.7909, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 15;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] Jefferson Motel!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 15)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 2065.1689, -1180.7289, 23.3208, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 16;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] Scoutt and Schutz Dealership!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 16)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 2065.0417, -1319.5938, 23.4804, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 17;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] Glen Park!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 17)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 1868.3182, -1338.3033, 13.0397, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 18;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] The Bahamas Apartments!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 18)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 1819.2622, -1589.1403, 13.0136, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 19;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] San Jose Skatepark!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 19)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 1526.9795, -1589.1560, 13.0399, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 20;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] San Jose Correctional Facility!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 20)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 1386.4633, -1847.0465, 13.0393, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 21;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] San Jose Police Department!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 21)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 1576.3844, -1875.0330, 13.0396, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 22;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] Verdant Bluffs, 5712!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 22)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 1805.1250, -1834.7235, 13.0426, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 23;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] Verdant Bluffs Restaurant!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 23)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 1818.2186, -1876.0734, 13.0701, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 24;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] Unity Station - END OF THE LINE!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 24)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			SetPlayerCheckpoint(playerid, 1792.9003, -1905.6650, 13.3988, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 25;
			ProxDetector(20.0, playerid, "[South Suburban Route, NEXT:] Unity Station - END OF THE LINE!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(SouthRoute[playerid] == 25)
	{
		if(IsPlayerInVehicle(playerid, southbus))
		{
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			SouthRoute[playerid] = 0;
			new vehicle;
			vehicle = GetPlayerVehicleID(playerid);
			SetVehicleToRespawn(vehicle);
			DisablePlayerCheckpoint(playerid);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			new string[128];
			SCM(playerid, -1, "___________________[SOUTH SUBURBAN ROUTE COMPLETED]___________________");
			format(string, sizeof(string), "Old bank balance: $%d", PlayerInfo[playerid][pBankAccount]);
	 		SCM(playerid, COLOR_WHITE, string);
			new randcheck = 130 + random(200);
			PlayerInfo[playerid][pBankAccount] += randcheck;
			format(string, sizeof(string), "Job Paycheck: $%d", randcheck);
			SCM(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "New bank balance: $%d", PlayerInfo[playerid][pBankAccount]);
			SCM(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "~w~Paycheck! ~n~~g~$%d", randcheck);
			GameTextForPlayer(playerid, string, 3000, 1);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	if(DownRoute[playerid] == 1)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 1914.0433, -1754.7616, 13.4819, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 2;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Idlewood Gas Station!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 2)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 2072.0564, -1755.2196, 13.4908, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 3;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Idlewood Intersection!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 3)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 2227.3677, -1671.0099, 14.9242, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 4;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Ganton Binco!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 4)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 2214.9880, -1503.0588, 23.9335, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 5;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Gibson Avenue!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 5)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 2169.8423, -1278.3075, 23.9148, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 6;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Jefferson Residential Area!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 6)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 2178.0068, -1153.7843, 24.8404, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 7;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Jefferson Motel!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 7)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 2122.0527, -1107.5374, 25.2488, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 8;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Scoutt and Schutz Dealership!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 8)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 1967.1168, -1192.8008, 25.8347, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 9;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Glen Park Bridge!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 9)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 1701.2789, -1297.0234, 13.5303, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 10;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] San Jose Bank!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 10)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 1457.6111, -1264.6238, 13.4756, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 11;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Downtown San Jose, 1493!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 11)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 1231.3308, -1278.4594, 13.4783, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 12;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] All Saints Hospital!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 12)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 1052.0786, -1300.7489, 13.5582, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 13;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Jim's Sticky Ring!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 13)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 829.8799, -1319.0630, 13.4888, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 14;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Downtown Market!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 14)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 496.0009, -1345.5671, 16.2902, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 15;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Downtown PROlaps!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 15)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 438.9577, -1506.6661, 30.9685, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 16;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Downtown Victim!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 16)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 262.3887, -1572.6697, 33.0708, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 17;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Rodeo Bus Stop!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 17)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 154.6491, -1541.6251, 10.8303, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 18;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Santa Maria Beach!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 18)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 419.5532, -1775.0878, 5.3821, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 19;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Santa Maria Beach!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 19)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 655.5206, -1754.3766, 13.4544, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 20;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Santa Maria Beach!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 20)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 920.6957, -1637.5287, 13.4831, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 21;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Verona Beach Residential Area!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 21)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 920.1246, -1426.5458, 13.3677, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 22;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Market Intersection!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 22)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 1156.5651, -1408.9346, 13.5751, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 23;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] San Jose Mall!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 23)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 1377.8499, -1408.4014, 13.4931, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 24;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Commerce Bus Stop!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 24)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 1751.8378, -1445.1815, 13.4592, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 25;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Idlewood Highway!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 25)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 1819.4470, -1588.8961, 13.4515, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 26;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] San Jose Correctional Facility!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 26)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 1528.6421, -1589.7167, 13.4858, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 27;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] San Jose Police Department!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 27)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 1386.5742, -1845.0615, 13.4818, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 28;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Verdant Bluffs Bus Stop!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 28)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 1574.9701, -1874.8087, 13.4802, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 29;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Verdant Bluffs Restaurant!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 29)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 1803.5778, -1834.8622, 13.4803, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 30;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Unity Station!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 30)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 1818.9785, -1873.1276, 13.5078, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 31;
			ProxDetector(20.0, playerid, "[Downtown Route, NEXT:] Unity Station - END OF THE LINE!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 31)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			SetPlayerCheckpoint(playerid, 1792.1425, -1907.0817, 13.4937, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 32;
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(DownRoute[playerid] == 32)
	{
		if(IsPlayerInVehicle(playerid, downtownbus))
		{
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 0;
			new vehicle;
			vehicle = GetPlayerVehicleID(playerid);
			SetVehicleToRespawn(vehicle);
			DisablePlayerCheckpoint(playerid);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			DownRoute[playerid] = 0;
			new string[128];
			SCM(playerid, -1, "___________________[DOWNTOWN ROUTE COMPLETED]___________________");
			format(string, sizeof(string), "Old bank balance: $%d", PlayerInfo[playerid][pBankAccount]);
	 		SCM(playerid, COLOR_WHITE, string);
			new randcheck = 300 + random(500);
			PlayerInfo[playerid][pBankAccount] += randcheck;
			format(string, sizeof(string), "Job Paycheck: $%d", randcheck);
			SCM(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "New bank balance: $%d", PlayerInfo[playerid][pBankAccount]);
			SCM(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "~w~Paycheck! ~n~~g~$%d", randcheck);
			GameTextForPlayer(playerid, string, 3000, 1);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	if(EastRoute[playerid] == 1)
	{
		if(IsPlayerInVehicle(playerid, westbus))
		{
			SetPlayerCheckpoint(playerid, 1912.3469, -1755.3214, 13.0423, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			EastRoute[playerid] = 2;
			ProxDetector(20.0, playerid, "[East Suburban Route, NEXT:] Idlewood Gas Station!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(EastRoute[playerid] == 2)
	{
		if(IsPlayerInVehicle(playerid, westbus))
		{
			SetPlayerCheckpoint(playerid, 2076.6514, -1754.6755, 13.0406, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			EastRoute[playerid] = 3;
			ProxDetector(20.0, playerid, "[East Suburban Route, NEXT:] Idlewood Intersection!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(EastRoute[playerid] == 3)
	{
		if(IsPlayerInVehicle(playerid, westbus))
		{
			SetPlayerCheckpoint(playerid, 2255.3582, -1734.2531, 13.0419, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			EastRoute[playerid] = 4;
			ProxDetector(20.0, playerid, "[East Suburban Route, NEXT:] Ganton Strip!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
        } else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(EastRoute[playerid] == 4)
	{
		if(IsPlayerInVehicle(playerid, westbus))
		{
			SetPlayerCheckpoint(playerid, 2401.2532, -1734.6567, 13.0413, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			EastRoute[playerid] = 5;
			ProxDetector(20.0, playerid, "[East Suburban Route, NEXT:] Ganton Strip!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(EastRoute[playerid] == 5)
	{
		if(IsPlayerInVehicle(playerid, westbus))
		{
			SetPlayerCheckpoint(playerid, 2433.5569, -1521.3722, 23.4937, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			EastRoute[playerid] = 6;
			ProxDetector(20.0, playerid, "[East Suburban Route, NEXT:] East San Jose Clucklin' Bell!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(EastRoute[playerid] == 6)
	{
		if(IsPlayerInVehicle(playerid, westbus))
		{
			SetPlayerCheckpoint(playerid, 2453.9883, -1301.8993, 23.4942, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			EastRoute[playerid] = 7;
			ProxDetector(20.0, playerid, "[East Suburban Route, NEXT:] East San Jose Pig Pen!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(EastRoute[playerid] == 7)
	{
		if(IsPlayerInVehicle(playerid, westbus))
		{
			SetPlayerCheckpoint(playerid, 2645.1538, -1234.7860, 49.5063, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			EastRoute[playerid] = 8;
			ProxDetector(20.0, playerid, "[East Suburban Route, NEXT:] East San Jose Underpass!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(EastRoute[playerid] == 8)
	{
		if(IsPlayerInVehicle(playerid, westbus))
		{
			SetPlayerCheckpoint(playerid, 2520.0332, -1045.8746, 69.0714, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			EastRoute[playerid] = 9;
			ProxDetector(20.0, playerid, "[East Suburban Route, NEXT:] Las Colinas, 3341!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
        } else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(EastRoute[playerid] == 9)
	{
		if(IsPlayerInVehicle(playerid, westbus))
		{
			SetPlayerCheckpoint(playerid, 2164.5154, -1002.6009, 62.4531, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			EastRoute[playerid] = 10;
			ProxDetector(20.0, playerid, "[East Suburban Route, NEXT:] Las Colinas 24/7!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
        } else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(EastRoute[playerid] == 10)
	{
		if(IsPlayerInVehicle(playerid, westbus))
		{
			SetPlayerCheckpoint(playerid, 1967.8184, -1195.8694, 25.3510, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			EastRoute[playerid] = 11;
			ProxDetector(20.0, playerid, "[East Suburban Route, NEXT:] Glen Park bridge!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(EastRoute[playerid] == 11)
	{
		if(IsPlayerInVehicle(playerid, westbus))
		{
			SetPlayerCheckpoint(playerid, 1819.1530, -1589.1243, 13.0146, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			EastRoute[playerid] = 12;
			ProxDetector(20.0, playerid, "[East Suburban Route, NEXT:] San Jose Correctional Facility!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(EastRoute[playerid] == 12)
	{
		if(IsPlayerInVehicle(playerid, westbus))
		{
			SetPlayerCheckpoint(playerid, 1818.9655, -1876.2424, 13.0633, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			EastRoute[playerid] = 13;
			ProxDetector(20.0, playerid, "[East Suburban Route, NEXT:] Unity Station - END OF THE LINE!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
		} else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(EastRoute[playerid] == 13)
	{
		if(IsPlayerInVehicle(playerid, westbus))
		{
			SetPlayerCheckpoint(playerid, 1790.9916, -1908.0903, 13.3974, 3.5);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			EastRoute[playerid] = 14;
			ProxDetector(20.0, playerid, "[East Suburban Route, NEXT:] Unity Station - END OF THE LINE!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 1;
        } else return SCM(playerid, COLOR_LIGHTRED, "You must be in your bus to complete the route.");
	}
	else if(EastRoute[playerid] == 14)
	{
		new vehicle;
		vehicle = GetPlayerVehicleID(playerid);
		SetVehicleToRespawn(vehicle);
		DisablePlayerCheckpoint(playerid);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		EastRoute[playerid] = 0;
		new string[128];
		SCM(playerid, -1, "___________________[EAST SUBURBAN ROUTE COMPLETED]___________________");
		format(string, sizeof(string), "Old bank balance: $%d", PlayerInfo[playerid][pBankAccount]);
 		SCM(playerid, COLOR_WHITE, string);
		new randcheck = 100 + random(200);
		PlayerInfo[playerid][pBankAccount] += randcheck;
		format(string, sizeof(string), "Job Paycheck: $%d", randcheck);
		SCM(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "New bank balance: $%d", PlayerInfo[playerid][pBankAccount]);
		SCM(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "~w~Paycheck! ~n~~g~$%d", randcheck);
		GameTextForPlayer(playerid, string, 3000, 1);
		return 1;
	}
	if(DMVcp[playerid] == 1)
	{
		SetPlayerCheckpoint(playerid, 1963.8790, -1917.8723, 13.0404, 3.0);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		DMVcp[playerid] = 2;
	}
	else if(DMVcp[playerid] == 2)
	{
	    SetPlayerCheckpoint(playerid, 1964.1663, -1761.5699, 13.0424, 3.0);
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		DMVcp[playerid] = 3;
	}
	else if(DMVcp[playerid] == 3)
	{
	    SetPlayerCheckpoint(playerid, 1944.0828, -1629.0889, 13.0433, 3.0);
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		DMVcp[playerid] = 4;
	}
	else if(DMVcp[playerid] == 4)
	{
	    SetPlayerCheckpoint(playerid, 1832.8898, -1609.8771, 13.0373, 3.0);
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		DMVcp[playerid] = 5;
	}
	else if(DMVcp[playerid] == 5)
	{
	    SetPlayerCheckpoint(playerid, 1819.1353, -1715.6960, 13.0438, 3.0);
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		DMVcp[playerid] = 6;
	}
	else if(DMVcp[playerid] == 6)
	{
	    SetPlayerCheckpoint(playerid, 1703.0732, -1729.5927, 13.0392, 3.0);
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		DMVcp[playerid] = 7;
	}
	else if(DMVcp[playerid] == 7)
	{
	    SetPlayerCheckpoint(playerid, 1687.3309, -1796.8857, 13.0394, 3.0);
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		DMVcp[playerid] = 8;
	}
	else if(DMVcp[playerid] == 8)
	{
	    SetPlayerCheckpoint(playerid, 1809.1134, -1834.9813, 13.0400, 3.0);
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		DMVcp[playerid] = 9;
	}
	else if(DMVcp[playerid] == 9)
	{
	    SetPlayerCheckpoint(playerid, 1819.0740, -1923.5848, 13.0372, 3.0);
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		DMVcp[playerid] = 10;
	}
	else if(DMVcp[playerid] == 10)
	{
	    SetPlayerCheckpoint(playerid, 1944.6895, -1934.8452, 13.0406, 3.0);
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		DMVcp[playerid] = 11;
	}
	else if(DMVcp[playerid] == 11)
	{
	    SetPlayerCheckpoint(playerid, 1959.3743, -2037.6431, 13.0401, 3.0);
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		DMVcp[playerid] = 12;
	}
	else if(DMVcp[playerid] == 12)
	{
	    SetPlayerCheckpoint(playerid, 1835.2625, -2049.8945, 13.0392, 3.0);
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		DMVcp[playerid] = 13;
	}
	else if(DMVcp[playerid] == 13)
	{
 		SetPlayerCheckpoint(playerid, 1820.5342, -2154.1677, 13.0399, 3.0);
 		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	    DMVcp[playerid] = 14;
	}
	else if(DMVcp[playerid] == 14)
	{
 		SetPlayerCheckpoint(playerid, 1944.3400, -2169.1870, 13.0471, 3.0);
 		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	    DMVcp[playerid] = 15;
	}
	else if(DMVcp[playerid] == 15)
	{
 		SetPlayerCheckpoint(playerid, 1963.8817, -1964.3220, 13.2833, 3.0);
 		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	    DMVcp[playerid] = 16;
	}
	else if(DMVcp[playerid] == 16)
	{
 		SetPlayerCheckpoint(playerid, 2072.6008, -1935.1334, 13.0427, 3.0);
 		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	    DMVcp[playerid] = 17;
	}
	else if(DMVcp[playerid] == 17)
	{
 		SetPlayerCheckpoint(playerid, 2093.9832, -1896.6034, 13.0399, 3.0);
 		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	    DMVcp[playerid] = 18;
	}
	else if(DMVcp[playerid] == 18)
	{
 		SetPlayerCheckpoint(playerid, 2299.0818, -1896.5027, 13.0623, 3.0);
 		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	    DMVcp[playerid] = 19;
	}
	else if(DMVcp[playerid] == 19)
	{
 		SetPlayerCheckpoint(playerid, 2311.3223, -1960.5221, 13.0380, 3.0);
 		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	    DMVcp[playerid] = 20;
	}
	else if(DMVcp[playerid] == 20)
	{
 		SetPlayerCheckpoint(playerid, 2403.1509, -1975.1035, 13.0412, 3.0);
 		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	    DMVcp[playerid] = 21;
	}
	else if(DMVcp[playerid] == 21)
	{
 		SetPlayerCheckpoint(playerid, 2415.7913, -1744.9744, 13.0415, 3.0);
 		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	    DMVcp[playerid] = 22;
	}
	else if(DMVcp[playerid] == 22)
	{
 		SetPlayerCheckpoint(playerid, 2262.6345, -1729.6825, 13.0432, 3.0);
 		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	    DMVcp[playerid] = 23;
	}
	else if(DMVcp[playerid] == 23)
	{
 		SetPlayerCheckpoint(playerid, 2191.1616, -1729.5641, 13.0359, 3.0);
 		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	    DMVcp[playerid] = 24;
	}
	else if(DMVcp[playerid] == 24)
	{
 		SetPlayerCheckpoint(playerid, 2169.8428, -1750.1501, 13.0445, 3.0);
 		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	    DMVcp[playerid] = 25;
	}
	else if(DMVcp[playerid] == 25)
	{
 		SetPlayerCheckpoint(playerid, 1976.9956, -1749.6023, 13.0396, 3.0);
 		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	    DMVcp[playerid] = 26;
	}
	else if(DMVcp[playerid] == 26)
	{
 		SetPlayerCheckpoint(playerid, 1959.5544, -1853.8024, 13.0433, 3.0);
 		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	    DMVcp[playerid] = 27;
	}
	else if(DMVcp[playerid] == 27)
	{
 		SetPlayerCheckpoint(playerid, 1959.3569, -1918.9984, 13.0400, 3.0);
 		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	    DMVcp[playerid] = 28;
	}
	else if(DMVcp[playerid] == 28)
	{
 		SetPlayerCheckpoint(playerid, 2069.2666, -1934.6638, 13.0585, 3.0);
 		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	    DMVcp[playerid] = 29;
	}
	else if(DMVcp[playerid] == 29)
	{
 		SetPlayerCheckpoint(playerid, 2061.2200, -1910.4030, 13.2041, 3.0);
 		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	    DMVcp[playerid] = 30;
	}
	else if(DMVcp[playerid] == 30)
	{
		new vehicle;
		vehicle = GetPlayerVehicleID(playerid);
		SetVehicleToRespawn(vehicle);
		DisablePlayerCheckpoint(playerid);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		PlayerInfo[playerid][pDriverLicense] = 1;
		DMVcp[playerid] = 0;
		TakingDriverLicense[playerid] = false;
		GivePlayerMoney(playerid, -100);
		SCM(playerid, COLOR_GREEN, "Congratulations, you have passed the test and you now have a drivers license! ($100)");
	}
	if(getcp[playerid] == 1)
	{
		DisablePlayerCheckpoint(playerid);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		getcp[playerid] = 0;
	}
	if(JunkCP[playerid] == 1)
	{
		SetPlayerCheckpoint(playerid, -1813.0813, -1648.3654, 21.7761, 3.0);
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		JunkCP[playerid] = 2;
	}
	else if(JunkCP[playerid] == 2)
	{
	    SetPlayerCheckpoint(playerid, -1826.4453, -1697.8385, 21.4166, 3.0);
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		JunkCP[playerid] = 3;
	}
	else if(JunkCP[playerid] == 3)
	{
	    SetPlayerCheckpoint(playerid, -1875.9592, -1650.9170, 21.4180, 3.0);
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		JunkCP[playerid] = 4;
	}
	else if(JunkCP[playerid] == 4)
	{
	    SetPlayerCheckpoint(playerid, -1925.8707, -1715.5754, 22.4258, 3.0);
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		JunkCP[playerid] = 5;
	}
	else if(JunkCP[playerid] == 5)
	{
	    SetPlayerCheckpoint(playerid, -1857.7029, -1616.6365, 21.4977, 3.0);
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		JunkCP[playerid] = 6;
	}
	else if(JunkCP[playerid] == 6)
	{
	    SetPlayerCheckpoint(playerid, -1856.2964, -1636.8698, 21.9083, 3.0);
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		JunkCP[playerid] = 7;
	}
	else if(JunkCP[playerid] == 7)
	{
	    SetPlayerCheckpoint(playerid, -1807.6385, -1643.9064, 23.0581, 3.0);
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		JunkCP[playerid] = 8;
	}
	else if(JunkCP[playerid] == 8)
	{
	    SetPlayerCheckpoint(playerid, -1828.1674, -1697.4170, 21.4179, 3.0);
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		JunkCP[playerid] = 9;
	}
	else if(JunkCP[playerid] == 9)
	{
	    SetPlayerCheckpoint(playerid, -1760.9272, -1639.1874, 22.1760, 3.0);
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		JunkCP[playerid] = 10;
	}
	else if(JunkCP[playerid] == 10)
	{
	    SetPlayerCheckpoint(playerid, -1870.9700, -1650.6989, 22.3596, 3.0);
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		JunkCP[playerid] = 11;
	}
	else if(JunkCP[playerid] == 11)
	{
	    SetPlayerCheckpoint(playerid, -1872.0945, -1573.9060, 21.4187, 3.0);
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		JunkCP[playerid] = 12;
	}
	else if(JunkCP[playerid] == 12)
	{
	    SetPlayerCheckpoint(playerid, -1857.6067, -1614.7574, 21.4465, 3.0);
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		JunkCP[playerid] = 13;
	}
	else if(JunkCP[playerid] == 13)
	{
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 583)
		{
		    new string[128];
	  		new vehicle = GetPlayerVehicleID(playerid);
			SetVehicleToRespawn(vehicle);
			DisablePlayerCheckpoint(playerid);
			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			JunkCP[playerid] = 0;
			WorkingJunk[playerid] = false;
			new randcheck = 0 + random(200);
			format(string, sizeof(string), "You have finished your shift. $%d dollars has been transferred to your bank account.", randcheck);
			SendClientMessage(playerid, -1, string);
			PlayerInfo[playerid][pBankAccount] += randcheck;
		}
		else
		{
			SCM(playerid, COLOR_LIGHTRED, "You need to be inside of your job-vehicle to complete the job.");
			SCM(playerid, COLOR_LIGHTRED, "/stopworking if you are bugged.");
		}
	}
	if(LumberCP[playerid] == 1)
	{
	    SCM(playerid, COLOR_WHITE, "Chop down the tree. (/chop)");
	}
	else if(LumberCP[playerid] == 6)
	{
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 478)
		{
		    new string[128];
			new randcheck = 0 + random(200);
			format(string, sizeof(string), "You have finished your shift. $%d dollars has been transferred to your bank account.", randcheck);
			SendClientMessage(playerid, -1, string);
			PlayerInfo[playerid][pBankAccount] += randcheck;
			new vehicle = GetPlayerVehicleID(playerid);
			SetVehicleToRespawn(vehicle);
			DisablePlayerCheckpoint(playerid);
			LumberCP[playerid] = 0;
			WorkingLumber[playerid] = false;
		}
		else
		{
			SCM(playerid, COLOR_LIGHTRED, "You need to be inside of your job-vehicle to complete the job.");
		}
	}
 	return 1;
}

public GiveRespectAgain(playerid)
{
	Respect[playerid] = 0;
}

public PoliceBroadcast(color, const string[], level)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pFaction] == 2)
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}

public ABroadCast(color, const string[], level)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if (PlayerInfo[i][pAdmin] >= level)
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}

public SendFactionMessage(faction, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pFaction] != 0)
		    {
			 	if(PlayerInfo[i][pFaction] == faction)
			  	{
 	 				SendClientMessage(i, color, string);
				}
			}
		}
	}
}

stock IsACop(playerid)
{
    new bool:thing;
    switch(GetPlayerSkin(playerid))
    {
        case 280..288: thing = true;
        case 165, 166: thing = true;
        default: thing = false;
    }
    return thing;
}

public UnsetKick(playerid)
{
    Kick(playerid);
    return 1;
}

public UnsetBan(playerid)
{
    PlayerInfo[playerid][pBanned] = 1;
    Ban(playerid);
    return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	foreach(new i : Player)
	{
	    if(GetPVarType(i, "BBArea"))
	    {
	        if(areaid == GetPVarInt(i, "BBArea"))
	        {
	            new station[256];
	            GetPVarString(i, "BBStation", station, sizeof(station));
	            if(!isnull(station))
				{
					PlayStream(playerid, station, GetPVarFloat(i, "BBX"), GetPVarFloat(i, "BBY"), GetPVarFloat(i, "BBZ"), 30.0, 1);
	            }
				return 1;
	        }
	    }
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
    foreach(new i : Player)
	{
	    if(GetPVarType(i, "BBArea"))
	    {
	        if(areaid == GetPVarInt(i, "BBArea"))
	        {
	            StopStream(playerid);
				return 1;
	        }
	    }
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
	for(new h = 1; h < sizeof(HouseInfo); h++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.5, HouseInfo[h][hEntranceX], HouseInfo[h][hEntranceY], HouseInfo[h][hEntranceZ]))
	 	{
			HouseCPP[playerid] = CreateDynamicCP(HouseInfo[h][hEntranceX], HouseInfo[h][hEntranceY], HouseInfo[h][hEntranceZ], 1.5, -1, -1, playerid, 5.0);
		}
	}
	if(!IsPlayerConnected(playerid)) return 0;
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        for(new i = 0; i < sizeof(SpikeInfo); i++)
        {
        	if(IsPlayerInRangeOfPoint(playerid, 3.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ]))
            {
            	if(SpikeInfo[i][sCreated] == 1)
             	{
              		new panels, tires;
                	new carid = GetPlayerVehicleID(playerid);
                 	GetVehicleDamageStatus(carid, panels, doors, lights, tires);
                  	UpdateVehicleDamageStatus(carid, panels, doors, lights, 15);
                   	return 0;
				}
			}
		}
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	SetVehicleParamsEx(vehicleid, 0, 0, alarm, 0, bonnet, boot, 0);
	VehicleSecurity[vehicleid] = 0;
	new id = GetVehicleID(vehicleid);
	if(IsValidVehicle(id))
	{
		if(VehicleColor[id][0] >= 0 && VehicleColor[id][1] >= 0)
			ChangeVehicleColor(vehicleid, VehicleColor[id][0], VehicleColor[id][1]);
		LinkVehicleToInterior(vehicleid, VehicleInterior[id]);
		SetVehicleVirtualWorld(vehicleid, VehicleWorld[id]);
		for(new i=0; i < sizeof(VehicleMods[]); i++)
		{
			AddVehicleComponent(vehicleid, VehicleMods[id][i]);
		}
		ChangeVehiclePaintjob(vehicleid, VehiclePaintjob[id]);
		if(VehicleLock[id]) ToggleDoors(vehicleid, VEHICLE_PARAMS_ON);
		if(VehicleAlarm[id]) VehicleSecurity[vehicleid] = 1;
	}
	return 1;
}

stock StopStream(playerid)
{
	DeletePVar(playerid, "pAudioStream");
    StopAudioStreamForPlayer(playerid);
}

stock PlayStream(playerid, const url[], Float:posX = 0.0, Float:posY = 0.0, Float:posZ = 0.0, Float:distance = 50.0, usepos = 0)
{
	if(GetPVarType(playerid, "pAudioStream")) StopAudioStreamForPlayer(playerid);
	else SetPVarInt(playerid, "pAudioStream", 1);
    PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
}

stock PickUpBoombox(playerid)
{
    foreach(new i : Player)
	{
 		if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
   		{
     		StopStream(i);
		}
	}
	DeletePVar(playerid, "BBArea");
	DestroyDynamicObject(GetPVarInt(playerid, "PlacedBB"));
	DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, "BBLabel"));
	DeletePVar(playerid, "PlacedBB"); DeletePVar(playerid, "BBLabel");
 	DeletePVar(playerid, "BBX"); DeletePVar(playerid, "BBY"); DeletePVar(playerid, "BBZ");
	DeletePVar(playerid, "BBInt");
	DeletePVar(playerid, "BBVW");
	DeletePVar(playerid, "BBStation");
	return 1;
}

stock UserPath(playerid)
{
    new string[128], playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername, sizeof(playername));
    format(string, sizeof(string), PATH, playername);
    return string;
}

stock udb_hash(const buf[]) {
    new length=strlen(buf);
    new s1 = 1;
    new s2 = 0;
    new n;
    for (n=0; n<length; n++)
    {
       s1 = (s1 + buf[n]) % 65521;
       s2 = (s2 + s1)     % 65521;
    }
    return (s2 << 16) + s1;
}

stock SendNearbyMessage(playerid, Float:radius, string[], col1, col2, col3, col4, col5)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	new Float:ix, Float:iy, Float:iz;
	new Float:cx, Float:cy, Float:cz;
	foreach(new i : Player)
	{
 		if(gPlayerLoggin{i})
	    {
	        if(GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
	        {
				GetPlayerPos(i, ix, iy, iz);
				cx = (x - ix);
				cy = (y - iy);
				cz = (z - iz);
				if(((cx < radius/16) && (cx > -radius/16)) && ((cy < radius/16) && (cy > -radius/16)) && ((cz < radius/16) && (cz > -radius/16)))
				{
				    SCM(i, col1, string);
				}
				else if(((cx < radius/8) && (cx > -radius/8)) && ((cy < radius/8) && (cy > -radius/8)) && ((cz < radius/8) && (cz > -radius/8)))
				{
				    SCM(i, col2, string);
				}
				else if(((cx < radius/4) && (cx > -radius/4)) && ((cy < radius/4) && (cy > -radius/4)) && ((cz < radius/4) && (cz > -radius/4)))
				{
				    SCM(i, col3, string);
				}
				else if(((cx < radius/2) && (cx > -radius/2)) && ((cy < radius/2) && (cy > -radius/2)) && ((cz < radius/2) && (cz > -radius/2)))
				{
				    SCM(i, col4, string);
				}
				else if(((cx < radius) && (cx > -radius)) && ((cy < radius) && (cy > -radius)) && ((cz < radius) && (cz > -radius)))
				{
				    SCM(i, col5, string);
				}
			}
	    }
	}
	return 1;
}

stock BusinessType(b)
{
    new string[30];
    switch(BusinessInfo[b][bType])
    {
    	case 7: string = "Restaurant";
    	case 6: string = "Bank";
    	case 5: string = "Hospital";
        case 4: string = "Police Station";
        case 3: string = "24/7";
        case 2: string = "Club";
        case 1: string = "Bar";
        case 0: string = "Clothes Shop";
    }
    return string;
}

IsPlayerNearBizEnt(playerid)
{
    for(new b = 1; b < sizeof(BusinessInfo); b++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 4.0, BusinessInfo[b][bEntranceX], BusinessInfo[b][bEntranceY], BusinessInfo[b][bEntranceZ])) return b;
    }
    return -1;
}

IsPlayerNearBizExit(playerid)
{
    for(new b = 1; b < sizeof(BusinessInfo); b++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 100.0, BusinessInfo[b][bExitX], BusinessInfo[b][bExitY], BusinessInfo[b][bExitZ])) return b;
    }
    return -1;
}

IsPlanted()
{
    for(new id = 1; id < sizeof(WeedInfo); id++)
    {
        if(WeedInfo[id][planted] == true) return id;
    }
    return -1;
}

IsPlayerInsideHouse(playerid)
{
	new hworld = GetPlayerVirtualWorld(playerid);
  	for(new h = 1; h < sizeof(HouseInfo); h++)
  	{
   		if(hworld == HouseInfo[h][hInsideWorld]) return h;
  	}
    return -1;
}

public TimeCycle(playerid)
{
	ServerTime++;
	SetWorldTime(ServerTime);

	new string[48];
    format(string, sizeof(string), "%d:00", ServerTime);
    TextDrawSetString(ServerTimeTXT, string);

	if(ServerTime == 7)//if servetime variable is at 23 it puts it the variable to 0
    {
        SetWeather(40);
    }
   	if(ServerTime == 8)//if servetime variable is at 23 it puts it the variable to 0
    {
        SetWeather(40);
    }
   	if(ServerTime == 13)//if servetime variable is at 23 it puts it the variable to 0
    {
        SetWeather(0);
    }
   	if(ServerTime == 18)//if servetime variable is at 23 it puts it the variable to 0
    {
        if(random(2) != 1) return 0;
        SetWeather(RandomSet(8, 4, 7));
    }
   	if(ServerTime == 19)//if servetime variable is at 23 it puts it the variable to 0
    {
        SetWeather(0);
    }
    if(ServerTime == 23)//if servetime variable is at 23 it puts it the variable to 0
    {
        ServerTime = 0;
        SetWeather(0);
    }
    if(ServerTime == 1)//if servetime variable is at 23 it puts it the variable to 0
    {
        SetWeather(17);
    }
    return 1;
}

public DrugEnd(playerid)
{
    SetPlayerDrunkLevel(playerid, 0);
    SetPlayerWeather(playerid, 0);

    IsSmokingJoint[playerid] = 0;
    IsSmokingCigarette[playerid] = 0;
    IsDrinkingBeer[playerid] = 0;
    IsCocaineHigh[playerid] = 0;
    IsLSDHigh[playerid] = 0;
    return 1;
}

public MarijuanaEffect(playerid)
{
	SetPlayerDrunkLevel (playerid, 5000);

 	SetTimerEx("DrugEnd", 1200000, 0, "i", playerid);
    return 1;
}

public CocaineEffect(playerid)
{
	new
	    Float: fArmour
	;
	GetPlayerArmour( playerid, fArmour );
	SetPlayerArmour( playerid, fArmour + 15 );

	SetPlayerDrunkLevel (playerid, 3000);

 	SetTimerEx("DrugEnd", 300000, 0, "i", playerid);
    return 1;
}

public LSDEffect(playerid)
{

	SetPlayerDrunkLevel(playerid, 500000);
	SetPlayerWeather(playerid, 700);

 	SetTimerEx("DrugEnd", 300000, 0, "i", playerid);
    return 1;
}

public LoadPlayerWeapons(playerid)
{
	SetTimerEx("TimerWeapons", 3000, false, "i", playerid);
}

public LoadPlayerSpawnData(playerid)
{
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);
	gettime(hour, minute);
	SetPlayerTime(playerid, hour, minute);
	TextDrawHideForPlayer(playerid, Textdraw0);
   	TextDrawHideForPlayer(playerid, Textdraw1);
   	TextDrawHideForPlayer(playerid, Textdraw19);
   	
    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
    SetPlayerPos(playerid, PlayerInfo[playerid][pXPos], PlayerInfo[playerid][pYPos], PlayerInfo[playerid][pZPos]);
    SetPlayerFacingAngle( playerid, 359.7086);
    SetPlayerHealth(playerid, 100);
    SetPlayerInterior( playerid, PlayerInfo[playerid][pInterior] );
    SetPlayerVirtualWorld( playerid, PlayerInfo[playerid][pVirtualWorld] );
    SetPlayerScore(playerid, 1);
    LoadPlayerWeapons(playerid);
}

public TimerWeapons(playerid)
{
	GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon1], PlayerInfo[playerid][pAmmo1]);
	GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon2], PlayerInfo[playerid][pAmmo2]);
	GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon3], PlayerInfo[playerid][pAmmo3]);
	GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon4], PlayerInfo[playerid][pAmmo4]);
	GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon5], PlayerInfo[playerid][pAmmo5]);
	GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon6], PlayerInfo[playerid][pAmmo6]);
	GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon7], PlayerInfo[playerid][pAmmo7]);
	GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon8], PlayerInfo[playerid][pAmmo8]);
	GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon9], PlayerInfo[playerid][pAmmo9]);
	GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon10], PlayerInfo[playerid][pAmmo10]);
	GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon11], PlayerInfo[playerid][pAmmo11]);
	GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapon12], PlayerInfo[playerid][pAmmo12]);
    return 1;
}

stock IsVehicleOccupied(vehicleid) // Returns 1 if there is anyone in the vehicle
{
    foreach(new i : Player)
    {
        if(IsPlayerInAnyVehicle(i))
        {
            if(GetPlayerVehicleID(i)==vehicleid)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }
    return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
    if(pickupid == Pickup[0])
    {
        GameTextForPlayer(playerid, "/takedrivingtest", 5000, 5);
    }
    if(pickupid == Pickup[1])
    {
        GameTextForPlayer(playerid, "/advertise", 5000, 5);
    }
    if(pickupid == Pickup[3])
    {
        GameTextForPlayer(playerid, "/train", 5000, 5);
    }
    if(pickupid == Pickup[4])
    {
        GameTextForPlayer(playerid, "/train", 5000, 5);
    }
    if(pickupid == Pickup[5])
    {
        GameTextForPlayer(playerid, "/buy", 5000, 5);
    }
    if(pickupid == Pickup[6])
    {
        GameTextForPlayer(playerid, "/buy", 5000, 5);
    }
    if(pickupid == Pickup[7])
    {
        GameTextForPlayer(playerid, "/buy", 5000, 5);
    }
    if(pickupid == Pickup[8])
    {
        GameTextForPlayer(playerid, "/buy", 5000, 5);
    }
    if(pickupid == Pickup[9])
    {
        GameTextForPlayer(playerid, "/buy", 10000, 5);
    }
    if(pickupid == Pickup[10])
    {
        GameTextForPlayer(playerid, "/takejob", 10000, 5);
    }
	if(pickupid == Pickup[11])
    {
        GameTextForPlayer(playerid, "/takejob", 10000, 5);
    }
	if(pickupid == Pickup[12])
    {
        GameTextForPlayer(playerid, "/buy", 10000, 5);
    }
   	if(pickupid == Pickup[13])
    {
        GameTextForPlayer(playerid, "/v buy", 10000, 5);
    }
   	if(pickupid == Pickup[14])
    {
        GameTextForPlayer(playerid, "/takejob", 10000, 5);
    }
   	if(pickupid == Pickup[15])
    {
        GameTextForPlayer(playerid, "/enter", 10000, 5);
    }
   	if(pickupid == Pickup[16])
    {
        GameTextForPlayer(playerid, "/buy", 10000, 5);
    }
   	if(pickupid == Pickup[17])
    {
        GameTextForPlayer(playerid, "/buy", 10000, 5);
    }
   	if(pickupid == Pickup[18])
    {
        GameTextForPlayer(playerid, "/takejob", 10000, 5);
    }
   	if(pickupid == Pickup[19])
    {
        GameTextForPlayer(playerid, "/buy", 10000, 5);
    }
   	if(pickupid == Pickup[20])
    {
        GameTextForPlayer(playerid, "/takejob", 10000, 5);
    }
   	if(pickupid == Pickup[21])
    {
        GameTextForPlayer(playerid, "/buyclothes", 10000, 5);
    }
   	if(pickupid == Pickup[22])
    {
        GameTextForPlayer(playerid, "/buy", 10000, 5);
    }
    return 1;
}

public LoadInterior(playerid)
{
    TogglePlayerControllable(playerid, 1);
    return 1;
}

public AdvertiseAgain(playerid)
{
	AdvertiseAllowed[playerid] = 0;
	return 1;
}

PreloadAnimLib(playerid, const animlib[])
{
    ApplyAnimation(playerid, animlib, "null", 0.0, 0, 0, 0, 0, 0);
}

public ResetPlayerStats(playerid)
{
	PlayerInfo[playerid][pXPos] = 0;
	PlayerInfo[playerid][pYPos] = 0;
	PlayerInfo[playerid][pZPos] = 0;
	pizzaboy[playerid] = 0;
	PizzaTimer1[playerid] = 0;
	LeftPizzaBoy[playerid] = 0;
	PizzaCP1[playerid] = 0;
	PizzaCP2[playerid] = 0;
    PlayerInfo[playerid][pWalkStyle] = 3;
	PlayerInfo[playerid][pWelfare] = 0;
    PlayerInfo[playerid][pCrashed] = 0;
    MaskOn[playerid] = 0;
	busstop[playerid] = 0;
    PlayerInfo[playerid][pTicketPrice1] = 0;
    PlayerInfo[playerid][pTicketPrice2] = 0;
	PlayerInfo[playerid][pTicket1] = 0;
	PlayerInfo[playerid][pTicket2] = 0;
	DownRoute[playerid] = 0;
	Player_Frisk[playerid] = 0;
	friskInvited[playerid] = false;
	friskApproved[playerid] = false;
    IsBeingSpeced[playerid] = 0;
	spectatorid[playerid] = 0;
    IsSpecing[playerid] = 0;
	SouthRoute[playerid] = 0;
    getcp[playerid] = 0;
    LeftBus[playerid] = 0;
	BUSTimer1[playerid] = 0;
	DMVtimer1[playerid] = 0;
	LeftDMVCar[playerid] = 0;
    EastRoute[playerid] = 0;
    HouseCPP[playerid] = 0;
    breaking[playerid] = 0;
    hotwiring[playerid] = 0;
	killed[playerid] = 0;
	sInfo[playerid][Misc] = 0;
	sInfo[playerid][Head] = 0;
	sInfo[playerid][Chest] = 0;
	sInfo[playerid][Crotch] = 0;
	sInfo[playerid][LArm] = 0;
	sInfo[playerid][RArm] = 0;
	sInfo[playerid][LLeg] = 0;
	sInfo[playerid][RLeg] = 0;
	PlayerInfo[playerid][pJailed] = 0;
    PlayerInfo[playerid][pInJailTime] = 0;
    wormattached2[playerid] = 0;
	PlayerInfo[playerid][pFname] = 0;
	PlayerInfo[playerid][pMask] = 0;
    Mask[playerid] = 0;
    aDuty[playerid] = 0;
    tDuty[playerid] = 0;
    policecall[playerid] = 0;
    attachingw[playerid] = 0;
    PlayerInfo[playerid][pWorms] = 0;
    PlayerInfo[playerid][pPlayingHours] = 0;
    PlayerInfo[playerid][pFaction] = 0;
    fish[playerid] = 0;
    chop[playerid] = 0;
    shopwork[playerid] = 0;
    repair[playerid] = 0;
    AttachWorm[playerid] = 0;
    PlayerInfo[playerid][pBlockPM] = 0;
	PlayerInfo[playerid][pDonator] = 0;
	player[playerid][calling] = false;
    player[playerid][caller] = 255;
	Tazed[playerid] = 0;
	Tazer[playerid] = 0;
    carradio[playerid] = 0;
    StopAudioStreamForPlayer(playerid);
    acceptageup[playerid] = 0;
    PlayerInfo[playerid][pJailed] = 0;
	PlayerInfo[playerid][pNumber] = 0;
	PlayerInfo[playerid][pFishes] = 0;
	PlayerInfo[playerid][pWorms] = 0;
	PlayerInfo[playerid][pFishingRod] = 0;
    RobstoreCP[playerid] = 0;
    PlayerInfo[playerid][pYear] = 0;
	PlayerInfo[playerid][pMonth] = 0;
	PlayerInfo[playerid][pDay] = 0;
    PlayerInfo[playerid][pPhone] = 0;
	onoff[playerid] = 1;
    BackupCP[playerid] = 0;
    PlayerLogged[playerid] = false;
    oldvw[playerid] = 0;
    RVID[playerid] = 0;
    ShopCP[playerid] = 0;
	PlayerInfo[playerid][pJob] = 0;
    ResetPlayerMoney(playerid);
    TreeChopped[playerid] = 0;
    Equipped[playerid] = 0;
    BoatCP[playerid] = 0;
    LumberCP[playerid] = 0;
    PlayerInfo[playerid][pInJailTime] = 0;
    PlayerInfo[playerid][pAdmin] = 0;
    PlayerInfo[playerid][pCigarettes] = 0;
    PlayerInfo[playerid][dMarijuana] = 0;
    PlayerInfo[playerid][dLSD] = 0;
    PlayerInfo[playerid][pTutorialDone] = 0;
    PlayerInfo[playerid][dCocaine] = 0;
    PlayerInfo[playerid][pBeer] = 0;
    PlayerInfo[playerid][pBoombox] = 0;
    WormAttached[playerid] = 0;
    Dice[playerid] = 0;
    PlayerInfo[playerid][HouseID] = 0;
    PlayerInfo[playerid][pGunRights] = 0;
    PlayerInfo[playerid][pRespect] = 0;
    PlayerInfo[playerid][pDeaths] = 0;
    PlayerInfo[playerid][pKills] = 0;
    PlayerInfo[playerid][pBankAccount] = 0;
    PlayerInfo[playerid][pAccountdata] = 0;
    PlayerInfo[playerid][pNumber] = 0;
    PlayerInfo[playerid][pSkin] = 0;
    PlayerInfo[playerid][pLevel] = 1;
    PlayerInfo[playerid][dEcstasy] = 0;
    PlayerInfo[playerid][dMeth] = 0;
    PlayerInfo[playerid][BusinessMoney] = 0;
    PlayerInfo[playerid][BizID] = 0;
    PlayerInfo[playerid][pDriverLicense] = 0;
    gPlayerLoggin{playerid} = 1;
	PlayerInfo[playerid][pAge] = 0;
	PlayerInfo[playerid][pGender] = 0;
	PlayerInfo[playerid][pInJail] = 0;
	PlayerInfo[playerid][pInJailTime] = 0;
	PlayerInfo[playerid][pFightingStyle] = 1;
	masknumber[playerid] = 1000 + random(9999);
 	PlayerInfo[playerid][pXPos] = 0;
 	PlayerInfo[playerid][pYPos] = 0;
 	PlayerInfo[playerid][pZPos] = 0;
 	PlayerInfo[playerid][pInterior] = 0;
 	PlayerInfo[playerid][pVirtualWorld] = 0;
 	PlayerInfo[playerid][pCrashed] = 0;
 	PlayerInfo[playerid][pCrashX] = 0;
 	PlayerInfo[playerid][pPhone] = 0;
 	PlayerInfo[playerid][pCrashY] = 0;
 	PlayerInfo[playerid][pCrashZ] = 0;
 	PlayerInfo[playerid][pCrashWorld] = 0;
 	PlayerInfo[playerid][pCrashInt] = 0;
 	isAlive[playerid] = true;
 	rentingVehicle[playerid] = false;
 	PlayerInfo[playerid][pExperience] = 0;
 	Player_Greet[playerid] = INVALID_PLAYER_ID;
 	PlayerInfo[playerid][pPlayerOwnsHouse] = 0;
 	PlayerInfo[playerid][fRank] = 0;
 	PlayerInfo[playerid][pWepLicense] = 0;

	RefuelTime[playerid] = 0;
	TrackCar[playerid] = 0;


	SpeedoText[playerid] = TextDrawCreate(51.000000, 307.000000, " ");
 	TextDrawAlignment(SpeedoText[playerid], 1);
	TextDrawFont(SpeedoText[playerid], 2);
	TextDrawLetterSize(SpeedoText[playerid], 0.310, 1.400);
	TextDrawSetShadow(SpeedoText[playerid], 0);
	TextDrawUseBox(SpeedoText[playerid], 0);
	TextDrawBoxColor(SpeedoText[playerid], 0x99);
	TextDrawTextSize(SpeedoText[playerid], 520.000, 0.000);

	PlayerInfo[playerid][pWeapon1] = 0;
	PlayerInfo[playerid][pAmmo1] = 0;
	PlayerInfo[playerid][pWeapon2] = 0;
	PlayerInfo[playerid][pAmmo2] = 0;
	PlayerInfo[playerid][pWeapon3] = 0;
	PlayerInfo[playerid][pAmmo3] = 0;
	PlayerInfo[playerid][pWeapon4] = 0;
	PlayerInfo[playerid][pAmmo4] = 0;
	PlayerInfo[playerid][pWeapon5] = 0;
	PlayerInfo[playerid][pAmmo5] = 0;
	PlayerInfo[playerid][pWeapon6] = 0;
	PlayerInfo[playerid][pAmmo6] = 0;
	PlayerInfo[playerid][pWeapon7] = 0;
	PlayerInfo[playerid][pAmmo7] = 0;
	PlayerInfo[playerid][pWeapon8] = 0;
	PlayerInfo[playerid][pAmmo8] = 0;
	PlayerInfo[playerid][pWeapon9] = 0;
	PlayerInfo[playerid][pAmmo9] = 0;
	PlayerInfo[playerid][pWeapon10] = 0;
	PlayerInfo[playerid][pAmmo10] = 0;
	PlayerInfo[playerid][pWeapon11] = 0;
	PlayerInfo[playerid][pAmmo11] = 0;
	PlayerInfo[playerid][pWeapon12] = 0;
	PlayerInfo[playerid][pAmmo12] = 0;
	PlayerInfo[playerid][pWeapon13] = 0;
	PlayerInfo[playerid][pAmmo13] = 0;
	PlayerInfo[playerid][pWeapon14] = 0;
	PlayerInfo[playerid][pAmmo14] = 0;

 	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
 	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
 	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 1);
 	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);
}

public ResetWeapons(playerid)
{
	PlayerInfo[playerid][pWeapon1] = 0;
	PlayerInfo[playerid][pAmmo1] = 0;
	PlayerInfo[playerid][pWeapon2] = 0;
	PlayerInfo[playerid][pAmmo2] = 0;
	PlayerInfo[playerid][pWeapon3] = 0;
	PlayerInfo[playerid][pAmmo3] = 0;
	PlayerInfo[playerid][pWeapon4] = 0;
	PlayerInfo[playerid][pAmmo4] = 0;
	PlayerInfo[playerid][pWeapon5] = 0;
	PlayerInfo[playerid][pAmmo5] = 0;
	PlayerInfo[playerid][pWeapon6] = 0;
	PlayerInfo[playerid][pAmmo6] = 0;
	PlayerInfo[playerid][pWeapon7] = 0;
	PlayerInfo[playerid][pAmmo7] = 0;
	PlayerInfo[playerid][pWeapon8] = 0;
	PlayerInfo[playerid][pAmmo8] = 0;
	PlayerInfo[playerid][pWeapon9] = 0;
	PlayerInfo[playerid][pAmmo9] = 0;
	PlayerInfo[playerid][pWeapon10] = 0;
	PlayerInfo[playerid][pAmmo10] = 0;
	PlayerInfo[playerid][pWeapon11] = 0;
	PlayerInfo[playerid][pAmmo11] = 0;
	PlayerInfo[playerid][pWeapon12] = 0;
	PlayerInfo[playerid][pAmmo12] = 0;
	PlayerInfo[playerid][pWeapon13] = 0;
	PlayerInfo[playerid][pAmmo13] = 0;
	PlayerInfo[playerid][pWeapon14] = 0;
	PlayerInfo[playerid][pAmmo14] = 0;
}

public LoadFightingStyle(playerid)
{
	if(PlayerInfo[playerid][pFightingStyle] == 1)
	{
	    SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
	}
	else if(PlayerInfo[playerid][pFightingStyle] == 2)
	{
	    SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
	}
	else if(PlayerInfo[playerid][pFightingStyle] == 3)
	{
	    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
	}
	else if(PlayerInfo[playerid][pFightingStyle] == 4)
	{
	    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
	}
}

public StartIntro(playerid)
{
    SetTimerEx("Camera1", 20000, false, "i", playerid);
    TogglePlayerSpectating(playerid, 1);
	FadeColorForPlayer(playerid, 0, 0, 0, 255, 0, 0, 0, 0, 15, 0);
    InterpolateCameraPos(playerid, 724.8024, -2001.6941, -12.0839, 722.7170, -1603.7065, 64.4452, 25000, CAMERA_MOVE);
    InterpolateCameraLookAt(playerid, 722.7170, -1603.7065, 64.4452, 724.8024, -2001.6941, -12.0839, 25000, CAMERA_MOVE);
	for(new i = 0; i < 50; i++) SCM(playerid, COLOR_WHITE, " ");
   	TextDrawShowForPlayer(playerid, Textdraw0);
   	TextDrawShowForPlayer(playerid, Textdraw1);
   	TextDrawShowForPlayer(playerid, Textdraw2);
   	TextDrawShowForPlayer(playerid, Textdraw3);
   	TextDrawShowForPlayer(playerid, Textdraw4);
    return 1;
}

public Camera1(playerid)
{
    SetTimerEx("Camera2", 15000, false, "i", playerid);
    InterpolateCameraPos(playerid, 1716.1949, -1303.5061, 13.3906, 1728.7573, -1282.2025, 13.5534, 15000, CAMERA_MOVE);
    InterpolateCameraLookAt(playerid, 1728.7573, -1282.2025, 13.5534, 1728.7573, -1282.2025, 13.5534, 15000, CAMERA_MOVE);
   	TextDrawHideForPlayer(playerid, Textdraw2);
   	TextDrawHideForPlayer(playerid, Textdraw3);
   	TextDrawHideForPlayer(playerid, Textdraw4);
   	TextDrawShowForPlayer(playerid, Textdraw9);
   	TextDrawShowForPlayer(playerid, Textdraw10);
   	TextDrawShowForPlayer(playerid, Textdraw11);
    return 1;
}

public Camera2(playerid)
{
	SetTimerEx("Camera3", 15000, false, "i", playerid);
    InterpolateCameraPos(playerid, 1631.8916, -1204.1125, 19.7890, 1544.4659, -1204.0747, 20.0736, 15000, CAMERA_MOVE);
    InterpolateCameraLookAt(playerid, 1631.8916, -1204.1125, 19.7890, 1544.4659, -1204.0747, 20.0736, 15000, CAMERA_MOVE);
   	TextDrawHideForPlayer(playerid, Textdraw9);
   	TextDrawHideForPlayer(playerid, Textdraw10);
   	TextDrawHideForPlayer(playerid, Textdraw11);
   	TextDrawShowForPlayer(playerid, Textdraw5);
   	TextDrawShowForPlayer(playerid, Textdraw12);
   	TextDrawShowForPlayer(playerid, Textdraw13);
	return 1;
}

public Camera3(playerid)
{
	SetTimerEx("Camera4", 15000, false, "i", playerid);
 	InterpolateCameraPos(playerid, 2158.0725, -1260.8678, 23.9902, 2085.0762, -1261.1925, 23.9924, 15000, CAMERA_MOVE);
 	InterpolateCameraLookAt(playerid, 2085.0762, -1261.1925, 23.9924, 2158.0725, -1260.8678, 23.9902, 15000, CAMERA_MOVE);
   	TextDrawHideForPlayer(playerid, Textdraw5);
   	TextDrawHideForPlayer(playerid, Textdraw12);
   	TextDrawHideForPlayer(playerid, Textdraw13);
   	TextDrawShowForPlayer(playerid, Textdraw6);
   	TextDrawShowForPlayer(playerid, Textdraw14);
   	TextDrawShowForPlayer(playerid, Textdraw15);
	return 1;
}

public Camera4(playerid)
{
 	InterpolateCameraPos(playerid, 1514.9663, -1676.1392, 14.0469, 1524.1227, -1675.9989, 13.5469, 15000, CAMERA_MOVE);
 	InterpolateCameraLookAt(playerid, 1514.9663, -1676.1392, 14.0469, 1524.1227, -1675.9989, 13.5469, 15000, CAMERA_MOVE);
	SetTimerEx("Camera5", 15000, false, "i", playerid);
   	TextDrawHideForPlayer(playerid, Textdraw6);
   	TextDrawHideForPlayer(playerid, Textdraw14);
   	TextDrawHideForPlayer(playerid, Textdraw15);
   	TextDrawShowForPlayer(playerid, Textdraw7);
   	TextDrawShowForPlayer(playerid, Textdraw16);
	return 1;
}

public Camera5(playerid)
{
	SetTimerEx("AgeSetup", 15000, false, "i", playerid);
	InterpolateCameraPos(playerid, 1471.3602, -1682.5798, 14.0469, 1473.1530, -1697.3690, 14.0469, 15000, CAMERA_MOVE);
	InterpolateCameraLookAt(playerid, 1473.0674, -1688.8176, 14.0469, 1480.6729, -1771.5760, 18.7958, 15000, CAMERA_MOVE);
	TextDrawHideForPlayer(playerid, Textdraw7);
   	TextDrawHideForPlayer(playerid, Textdraw16);
	TextDrawShowForPlayer(playerid, Textdraw8);
	TextDrawShowForPlayer(playerid, Textdraw17);
	TextDrawShowForPlayer(playerid, Textdraw18);
	return 1;
}

public AgeSetup(playerid)
{
	SpawnPlayer(playerid);
	TogglePlayerControllable(playerid, 0);
	SetPlayerPos(playerid, 280.1480, 1354.4714, 343.1370);
	SetPlayerFacingAngle(playerid, 359.6018);
	SetPlayerCameraPos(playerid, 279.9863, 1357.4241, 343.1370);
	SetPlayerCameraLookAt(playerid, 280.1480, 1354.4714, 343.1370);
	SetPlayerInterior(playerid, 0);
	TextDrawHideForPlayer(playerid, Textdraw8);
	TextDrawHideForPlayer(playerid, Textdraw17);
	TextDrawHideForPlayer(playerid, Textdraw18);
	ShowPlayerDialog(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, "Age?", "Please type in your characters age below. (7-100)", "Submit", "Cancel");
	return 1;
}

public TutorialDone(playerid)
{
    SpawnPlayer(playerid);
    TogglePlayerSpectating(playerid, 0);
    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
   	TogglePlayerControllable(playerid, 1);
	FadeColorForPlayer(playerid, 0, 0, 0, 0, 0, 0, 0, 255, 15, 0);
	SCM(playerid, COLOR_WHITE, "Thank you for choosing San Jose Roleplay, we hope you enjoy your stay.");
	PlayerInfo[playerid][pTutorialDone] = 1;
	TextDrawHideForPlayer(playerid, Textdraw0);
	TextDrawHideForPlayer(playerid, Textdraw1);
	PlayerInfo[playerid][pTutorialDone] = 1;
	SCM(playerid, COLOR_YELLOW, "TIP: You have not set your forumname yet. /forumname to set it.");
	SCM(playerid, COLOR_YELLOW, "TIP: To find locations as a new player we suggest you look at the /map!");
	return 1;
}

public LoadDeathAnim(playerid)
{
	ApplyPlayerAnimation(playerid, "CRACK", "CRCKIDLE2", 4.0, 1, 0, 0, 0, 0, 1);
	return 1;
}

public OperationDone(playerid)
{
	FadeColorForPlayer(playerid, 0, 0, 0, 255, 0, 0, 0, 0, 15, 0);
	SCM(playerid, COLOR_WHITE, "You have been treated at the hospital. The hospital bill is $50.");
	SetPlayerPos(playerid, 2034.1787, -1401.6705, 17.2949);
	GivePlayerMoney(playerid, -50);
	SetPlayerHealth(playerid, 90.0);
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, 1);
 	SetPlayerInterior(playerid, 0);
 	SetPlayerVirtualWorld(playerid, 0);
 	ResetPlayerWeapons(playerid);
	return 1;
}

public DiveAnim(playerid)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	ClearAnimations(playerid);
	SetPlayerPos(playerid, X, Y -9, Z);
	return 1;
}

stock UpdateWorldWeather()
{
	new next_weather_prob = random(100);
	if(next_weather_prob < 70) 		SetWeather(fine_weather_ids[random(sizeof(fine_weather_ids))]);
	else if(next_weather_prob < 95) SetWeather(foggy_weather_ids[random(sizeof(foggy_weather_ids))]);
	else							SetWeather(wet_weather_ids[random(sizeof(wet_weather_ids))]);
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
    new string[128];
    new holder[128];
	new donatortext[32];
	switch(PlayerInfo[clickedplayerid][pDonator])
	{
	    case 3: donatortext = "Gold Donator";
	    case 2: donatortext = "Silver Donator";
		case 1: donatortext = "Bronze Donator";
		case 0: donatortext = "Regular Player";
	}
	
	// clickedplayer
	format(string, sizeof(string), "Forumname: %s\n", PlayerInfo[clickedplayerid][pForumName]);
 	strcat(holder, string, sizeof(holder));
	format(string, sizeof(string), "Donator Status: %s\n", donatortext);
 	strcat(holder, string, sizeof(holder));
	format(string, sizeof(string), "Playing Hours: %d\n", PlayerInfo[clickedplayerid][pPlayingHours]);
 	strcat(holder, string, sizeof(holder));
	ShowPlayerDialog(playerid, 10999, DIALOG_STYLE_MSGBOX, "Player Information", holder, "Exit", "");
    return 1;
}

public UpdateTimeAndWeather()
{
	// Update time
    gettime(hour, minute);

   	format(timestr, 32, "%02d:%02d", hour, minute);
   	TextDrawSetString(txtTimeDisp, timestr);
   	SetWorldTime(hour);

	new x=0;
	while(x!=MAX_PLAYERS)
	{
 		if(IsPlayerConnected(x) && GetPlayerState(x) != PLAYER_STATE_NONE)
 		{
 			SetPlayerTime(x, hour, minute);
		}
		x++;
	}
	/*if(last_weather_update == 0) {
	    UpdateWorldWeather(); }
	last_weather_update++;
	if(last_weather_update == 60) {
	    last_weather_update = 0; } */
}

RemoveWeapons(playerid)
{
	PlayerInfo[playerid][pWeapon1] = 0;
	PlayerInfo[playerid][pWeapon2] = 0;
	PlayerInfo[playerid][pWeapon3] = 0;
	PlayerInfo[playerid][pWeapon4] = 0;
	PlayerInfo[playerid][pWeapon5] = 0;
	PlayerInfo[playerid][pWeapon6] = 0;
	PlayerInfo[playerid][pWeapon7] = 0;
	PlayerInfo[playerid][pWeapon8] = 0;
	PlayerInfo[playerid][pWeapon9] = 0;
	PlayerInfo[playerid][pWeapon10] = 0;
	PlayerInfo[playerid][pWeapon11] = 0;
	PlayerInfo[playerid][pWeapon12] = 0;
	PlayerInfo[playerid][pWeapon13] = 0;
	PlayerInfo[playerid][pWeapon14] = 0;
	PlayerInfo[playerid][pAmmo1] = 0;
	PlayerInfo[playerid][pAmmo2] = 0;
	PlayerInfo[playerid][pAmmo3] = 0;
	PlayerInfo[playerid][pAmmo4] = 0;
	PlayerInfo[playerid][pAmmo5] = 0;
	PlayerInfo[playerid][pAmmo6] = 0;
	PlayerInfo[playerid][pAmmo7] = 0;
	PlayerInfo[playerid][pAmmo8] = 0;
	PlayerInfo[playerid][pAmmo9] = 0;
	PlayerInfo[playerid][pAmmo10] = 0;
	PlayerInfo[playerid][pAmmo11] = 0;
	PlayerInfo[playerid][pAmmo12] = 0;
	PlayerInfo[playerid][pAmmo13] = 0;
	PlayerInfo[playerid][pAmmo14] = 0;
	ResetPlayerWeapons(playerid);
}

RemoveDrugs(playerid)
{
	PlayerInfo[playerid][dLSD] = 0;
	PlayerInfo[playerid][dMarijuana] = 0;
	PlayerInfo[playerid][dCocaine] = 0;
	PlayerInfo[playerid][dEcstasy] = 0;
	PlayerInfo[playerid][dMeth] = 0;
	PlayerInfo[playerid][dCrack] = 0;
	PlayerInfo[playerid][dHeroin] = 0;
}

stock IsRPName(const name[], max_underscores = 2)
{
    new underscores = 0;
    if (name[0] < 'A' || name[0] > 'Z') return false; // First letter is not capital
    for(new i = 1; i < strlen(name); i++)
    {
        if(name[i] != '_' && (name[i] < 'A' || name[i] > 'Z') && (name[i] < 'a' || name[i] > 'z')) return false; // a-zA-Z_
        if(name[i] == '_')
        {
            underscores++;
            if(underscores > max_underscores || i == strlen(name)) return false; // More underlines than limit, or underline at the last pos
            if(name[i + 1] < 'A' || name[i + 1] > 'Z') return false; // Not a capital letter after underline
        }
    }
    if (underscores == 0) return false; // No underline detected
    return true;
}

OnePlayAnim(playerid, const animlib[], const animname[], Float:Speed, looping, lockx, locky, lockz, lp, forcesync)
{
	ApplyPlayerAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp, forcesync);
}


LoopingAnim(playerid, const animlib[], const animname[], Float:Speed, looping, lockx, locky, lockz, lp, forcesync)
{
    gPlayerUsingLoopingAnim[playerid] = 1;
    ApplyPlayerAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp, forcesync);
}

stock PlayerName(playerid)
{
	new playerName[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playerName, MAX_PLAYER_NAME);
	return playerName;
}

stock IsPlayerSpawned(playerid)
{
	switch(GetPlayerState(playerid))
	{
		case 1, 2, 3: return 1;
	}
	return 0;
}

stock IsMeleeWeapon(weaponid)
{
	switch(weaponid)
	{
		case 2 .. 15, 40, 44 .. 46: return 1;
	}
	return 0;
}

stock IsBicycle(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 481, 448, 509, 510, 521, 522, 523, 581, 586, 468, 471, 463, 461, 462: return 1;
	}
	return 0;
}

stock IsBus(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 481, 448, 509, 510, 521, 522, 523, 581, 586, 468, 471, 463, 461, 462: return 1;
	}
	return 0;
}

stock IsMeeleWeapon(weaponid)
{
	switch(GetPlayerWeapon(weaponid))
	{
		case 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15: return 1;
	}
	return 0;
}

stock IsWeapon(weaponid)
{
	switch(GetPlayerWeapon(weaponid))
	{
		case 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34: return 1;
	}
	return 0;
}


stock PlayerToPlayer(playerid, targetid, Float:dist)
{
	new Float:pos[3];
	GetPlayerPos(targetid, pos[0], pos[1], pos[2]);
	return IsPlayerInRangeOfPoint(playerid, dist, pos[0], pos[1], pos[2]);
}

stock PlayerToVehicle(playerid, vehicleid, Float:dist)
{
	new Float:pos[3];
	GetVehiclePos(vehicleid, pos[0], pos[1], pos[2]);
	return IsPlayerInRangeOfPoint(playerid, dist, pos[0], pos[1], pos[2]);
}

stock GetClosestVehicle(playerid)
{
	new Float:x, Float:y, Float:z;
	new Float:dist, Float:closedist=9999, closeveh;
	for(new i=1; i < MAX_VEHICLES; i++)
	{
		if(GetVehiclePos(i, x, y, z))
		{
			dist = GetPlayerDistanceFromPoint(playerid, x, y, z);
			if(dist < closedist)
			{
				closedist = dist;
				closeveh = i;
			}
		}
	}
	return closeveh;
}

stock ToggleEngine(vehicleid, toggle)
{
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, toggle, lights, alarm, doors, bonnet, boot, objective);
}

stock ToggleAlarm(vehicleid, toggle)
{
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, engine, lights, toggle, doors, bonnet, boot, objective);
}

stock ToggleDoors(vehicleid, toggle)
{
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, engine, lights, alarm, toggle, bonnet, boot, objective);
}

stock ToggleBoot(vehicleid, toggle)
{
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, toggle, objective);
}

stock IsNumeric(const string[])
{
	for(new i=0; string[i]; i++)
	{
		if(string[i] < '0' || string[i] > '9') return 0;
	}
	return 1;
}

stock GetVehicleModelIDFromName(const vname[])
{
	for(new i=0; i < sizeof(VehicleNames); i++)
	{
		if(strfind(VehicleNames[i], vname, true) != -1) return i + 400;
	}
	return -1;
}

stock GetPlayer2DZone(playerid)
{
	new zone[32] = "San Andreas";
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
 	for(new i = 0; i < sizeof(SanAndreasZones); i++)
	{
		if(x >= SanAndreasZones[i][Zone_Area][0] && x <= SanAndreasZones[i][Zone_Area][3]
		&& y >= SanAndreasZones[i][Zone_Area][1] && y <= SanAndreasZones[i][Zone_Area][4])
		{
			strmid(zone, SanAndreasZones[i][Zone_Name], 0, 28);
			return zone;
		}
	}
	return zone;
}

stock GetPlayer3DZone(playerid)
{
	new zone[32] = "San Andreas";
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
 	for(new i = 0; i < sizeof(SanAndreasZones); i++)
	{
		if(x >= SanAndreasZones[i][Zone_Area][0] && x <= SanAndreasZones[i][Zone_Area][3]
		&& y >= SanAndreasZones[i][Zone_Area][1] && y <= SanAndreasZones[i][Zone_Area][4]
		&& z >= SanAndreasZones[i][Zone_Area][2] && z <= SanAndreasZones[i][Zone_Area][5])
		{
			strmid(zone, SanAndreasZones[i][Zone_Name], 0, 28);
			return zone;
		}
	}
	return zone;
}

stock GetPlayerSpeed(playerid, bool:kmh = true)
{
	new
		Float:xx, 
		Float:yy, 
		Float:zz, 
		Float:pSpeed;

	if(IsPlayerInAnyVehicle(playerid))
	{
		GetVehicleVelocity(GetPlayerVehicleID(playerid), xx, yy, zz);
	}
	else
	{
		GetPlayerVelocity(playerid, xx, yy, zz);
	}

	pSpeed = floatsqroot((xx * xx) + (yy * yy) + (zz * zz));
	return kmh ? floatround((pSpeed * 165.12)) : floatround((pSpeed * 103.9));
}

LoadVehicles()
{
	new string[64];
	new File:handle, count;
	new filename[64], line[256], s, key[64];
	for(new i=1; i < MAX_DVEHICLES; i++)
	{
		format(filename, sizeof(filename), VEHICLE_FILE_PATH "v%d.ini", i);
		if(!fexist(filename)) continue;
		handle = fopen(filename, io_read);
		while(fread(handle, line))
		{
			StripNL(line);
			s = strfind(line, "=");
			if(!line[0] || s < 1) continue;
			strmid(key, line, 0, s++);
			if(strcmp(key, "Created") == 0) VehicleCreated[i] = strval(line[s]);
			else if(strcmp(key, "Model") == 0) VehicleModel[i] = strval(line[s]);
			else if(strcmp(key, "Pos") == 0) sscanf(line[s], "p<,>ffff", VehiclePos[i][0], VehiclePos[i][1], VehiclePos[i][2], VehiclePos[i][3]);
			else if(strcmp(key, "Colors") == 0) sscanf(line[s], "p<,>dd", VehicleColor[i][0], VehicleColor[i][1]);
			else if(strcmp(key, "Interior") == 0) VehicleInterior[i] = strval(line[s]);
			else if(strcmp(key, "VirtualWorld") == 0) VehicleWorld[i] = strval(line[s]);
			else if(strcmp(key, "Owner") == 0) strmid(VehicleOwner[i], line, s, sizeof(line));
			else if(strcmp(key, "NumberPlate") == 0) strmid(VehicleNumberPlate[i], line, s, sizeof(line));
			else if(strcmp(key, "Value") == 0) VehicleValue[i] = strval(line[s]);
			else if(strcmp(key, "Lock") == 0) VehicleLock[i] = strval(line[s]);
			else if(strcmp(key, "Alarm") == 0) VehicleAlarm[i] = strval(line[s]);
			else if(strcmp(key, "Paintjob") == 0) VehiclePaintjob[i] = strval(line[s]);
			else
			{
				for(new t=0; t < sizeof(VehicleTrunk[]); t++)
				{
					format(string, sizeof(string), "Trunk%d", t+1);
					if(strcmp(key, string) == 0) sscanf(line[s], "p<,>dd", VehicleTrunk[i][t][0], VehicleTrunk[i][t][1]);
				}
				for(new m=0; m < sizeof(VehicleMods[]); m++)
				{
					format(string, sizeof(string), "Mod%d", m);
					if(strcmp(key, string) == 0) VehicleMods[i][m] = strval(line[s]);
				}
			}
		}
		fclose(handle);
		if(VehicleCreated[i]) count++;
	}
	printf("  Loaded %d vehicles", count);
}

SaveVehicle(vehicleid)
{
	new filename[64], line[256];
	format(filename, sizeof(filename), VEHICLE_FILE_PATH "v%d.ini", vehicleid);
	new File:handle = fopen(filename, io_write);
	format(line, sizeof(line), "Created=%d\r\n", VehicleCreated[vehicleid]); fwrite(handle, line);
	format(line, sizeof(line), "Model=%d\r\n", VehicleModel[vehicleid]); fwrite(handle, line);
	format(line, sizeof(line), "Pos=%.3f, %.3f, %.3f, %.3f\r\n", VehiclePos[vehicleid][0], VehiclePos[vehicleid][1], 
		VehiclePos[vehicleid][2], VehiclePos[vehicleid][3]);
	fwrite(handle, line);
	format(line, sizeof(line), "Colors=%d, %d\r\n", VehicleColor[vehicleid][0], VehicleColor[vehicleid][1]); fwrite(handle, line);
	format(line, sizeof(line), "Interior=%d\r\n", VehicleInterior[vehicleid]); fwrite(handle, line);
	format(line, sizeof(line), "VirtualWorld=%d\r\n", VehicleWorld[vehicleid]); fwrite(handle, line);
	format(line, sizeof(line), "Owner=%s\r\n", VehicleOwner[vehicleid]); fwrite(handle, line);
	format(line, sizeof(line), "NumberPlate=%s\r\n", VehicleNumberPlate[vehicleid]); fwrite(handle, line);
	format(line, sizeof(line), "Value=%d\r\n", VehicleValue[vehicleid]); fwrite(handle, line);
	format(line, sizeof(line), "Lock=%d\r\n", VehicleLock[vehicleid]); fwrite(handle, line);
	format(line, sizeof(line), "Alarm=%d\r\n", VehicleAlarm[vehicleid]); fwrite(handle, line);
	format(line, sizeof(line), "Paintjob=%d\r\n", VehiclePaintjob[vehicleid]); fwrite(handle, line);
	for(new t=0; t < sizeof(VehicleTrunk[]); t++)
	{
		format(line, sizeof(line), "Trunk%d=%d, %d\r\n", t+1, VehicleTrunk[vehicleid][t][0], VehicleTrunk[vehicleid][t][1]);
		fwrite(handle, line);
	}
	for(new m=0; m < sizeof(VehicleMods[]); m++)
	{
		format(line, sizeof(line), "Mod%d=%d\r\n", m, VehicleMods[vehicleid][m]);
		fwrite(handle, line);
	}
	fclose(handle);
}

UpdateVehicle(vehicleid, removeold)
{
	if(VehicleCreated[vehicleid])
	{
		if(removeold)
		{
			new Float:health;
			GetVehicleHealth(VehicleID[vehicleid], health);
			GetVehicleParamsEx(VehicleID[vehicleid], engine, lights, alarm, doors, bonnet, boot, objective);
			//new panels, doorsd, lightsd, tires;
			//GetVehicleDamageStatus(VehicleID[vehicleid], panels, doorsd, lightsd, tires);
			DestroyVehicle(VehicleID[vehicleid]);
			VehicleID[vehicleid] = CreateVehicle(VehicleModel[vehicleid], VehiclePos[vehicleid][0], VehiclePos[vehicleid][1], 
				VehiclePos[vehicleid][2], VehiclePos[vehicleid][3], VehicleColor[vehicleid][0], VehicleColor[vehicleid][1], 3600);
			SetVehicleHealth(VehicleID[vehicleid], health);
			SetVehicleParamsEx(VehicleID[vehicleid], engine, lights, alarm, doors, bonnet, 0, objective);
			//UpdateVehicleDamageStatus(VehicleID[vehicleid], panels, doorsd, lightsd, tires);
		}
		else
		{
			VehicleID[vehicleid] = CreateVehicle(VehicleModel[vehicleid], VehiclePos[vehicleid][0], VehiclePos[vehicleid][1], 
				VehiclePos[vehicleid][2], VehiclePos[vehicleid][3], VehicleColor[vehicleid][0], VehicleColor[vehicleid][1], 3600);
		}
		LinkVehicleToInterior(VehicleID[vehicleid], VehicleInterior[vehicleid]);
		SetVehicleVirtualWorld(VehicleID[vehicleid], VehicleWorld[vehicleid]);
		SetVehicleNumberPlate(VehicleID[vehicleid], VehicleNumberPlate[vehicleid]);
		for(new i=0; i < sizeof(VehicleMods[]); i++)
		{
			AddVehicleComponent(VehicleID[vehicleid], VehicleMods[vehicleid][i]);
		}
		ChangeVehiclePaintjob(VehicleID[vehicleid], VehiclePaintjob[vehicleid]);
		if(VehicleLock[vehicleid]) ToggleDoors(VehicleID[vehicleid], VEHICLE_PARAMS_ON);
		if(VehicleAlarm[vehicleid]) VehicleSecurity[VehicleID[vehicleid]] = 1;
		UpdateVehicleLabel(vehicleid, removeold);
		GetVehicleParamsEx(VehicleID[vehicleid], engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(VehicleID[vehicleid], engine, lights, alarm, doors, bonnet, 0, objective);
	}
}

UpdateVehicleLabel(vehicleid, removeold)
{
	if(VehicleCreated[vehicleid] == VEHICLE_DEALERSHIP)
	{
		if(removeold)
		{
			Delete3DTextLabel(VehicleLabel[vehicleid]);
		}
		new labeltext[128];
		format(labeltext, sizeof(labeltext), ""COL_WHITE"%s\n"COL_BROWN"Price: "COL_WHITE"$%d", VehicleNames[VehicleModel[vehicleid]-400], VehicleValue[vehicleid]);
		VehicleLabel[vehicleid] = Create3DTextLabel(labeltext, 0xBB7700DD, 0, 0, 0, 10.0, 0);
		Attach3DTextLabelToVehicle(VehicleLabel[vehicleid], VehicleID[vehicleid], 0, 0, 0);
	}
}

GetFreeVehicleID()
{
	for(new i=1; i < MAX_DVEHICLES; i++)
	{
		if(!VehicleCreated[i]) return i;
	}
	return 0;
}

GetVehicleID(vehicleid)
{
	for(new i=1; i < MAX_DVEHICLES; i++)
	{
		if(VehicleCreated[i] && VehicleID[i] == vehicleid) return i;
	}
	return 0;
}

GetPlayerVehicles(playerid)
{
	new playername[24];
	GetPlayerName(playerid, playername, sizeof(playername));
	new count;
	for(new i=1; i < MAX_DVEHICLES; i++)
	{
		if(VehicleCreated[i] == VEHICLE_PLAYER && strcmp(VehicleOwner[i], playername) == 0)
		{
			count++;
		}
	}
	return count;
}

GetPlayerVehicleAccess(playerid, vehicleid)
{
	if(VehicleCreated[vehicleid] == VEHICLE_PLAYER)
	{
		if(strcmp(VehicleOwner[vehicleid], PlayerName(playerid)) == 0)
		{
			return 2;
		}
		else if(GetPVarInt(playerid, "CarKeys") == vehicleid)
		{
			return 1;
		}
	}
	else
	{
		return 1;
	}
	return 0;
}

LoadDealerships()
{
	new File:handle, count;
	new filename[64], line[256], s, key[64];
	for(new i=1; i < MAX_DEALERSHIPS; i++)
	{
		format(filename, sizeof(filename), DEALERSHIP_FILE_PATH "d%d.ini", i);
		if(!fexist(filename)) continue;
		handle = fopen(filename, io_read);
		while(fread(handle, line))
		{
			StripNL(line);
			s = strfind(line, "=");
			if(!line[0] || s < 1) continue;
			strmid(key, line, 0, s++);
			if(strcmp(key, "Created") == 0) DealershipCreated[i] = strval(line[s]);
			else if(strcmp(key, "Pos") == 0) sscanf(line[s], "p<,>fff", DealershipPos[i][0], 
				DealershipPos[i][1], DealershipPos[i][2]);
		}
		fclose(handle);
		if(DealershipCreated[i]) count++;
	}
	printf("  Loaded %d dealerships", count);
}

SaveDealership(dealerid)
{
	new filename[64], line[256];
	format(filename, sizeof(filename), DEALERSHIP_FILE_PATH "d%d.ini", dealerid);
	new File:handle = fopen(filename, io_write);
	format(line, sizeof(line), "Created=%d\r\n", DealershipCreated[dealerid]); fwrite(handle, line);
	format(line, sizeof(line), "Pos=%.3f, %.3f, %.3f\r\n", DealershipPos[dealerid][0], 
		DealershipPos[dealerid][1], DealershipPos[dealerid][2]);
	fwrite(handle, line);
	fclose(handle);
}

UpdateDealership(dealerid, removeold)
{
	if(DealershipCreated[dealerid])
	{
		if(removeold)
		{
			Delete3DTextLabel(DealershipLabel[dealerid]);
		}
		new labeltext[32];
		format(labeltext, sizeof(labeltext), ""COL_BROWN"Vehicle Dealership\n"COL_WHITE"ID: %d", dealerid);
		DealershipLabel[dealerid] = Create3DTextLabel(labeltext, 0xBB7700DD, DealershipPos[dealerid][0], 
			DealershipPos[dealerid][1], DealershipPos[dealerid][2]+0.5, 20.0, 0);
	}
}

IsValidDealership(dealerid)
{
	if(dealerid < 1 || dealerid >= MAX_DEALERSHIPS) return 0;
	if(DealershipCreated[dealerid]) return 1;
	return 0;
}

LoadFuelStations()
{
	new File:handle, count;
	new filename[64], line[256], s, key[64];
	for(new i=1; i < MAX_FUEL_STATIONS; i++)
	{
		format(filename, sizeof(filename), FUEL_STATION_FILE_PATH "f%d.ini", i);
		if(!fexist(filename)) continue;
		handle = fopen(filename, io_read);
		while(fread(handle, line))
		{
			StripNL(line);
			s = strfind(line, "=");
			if(!line[0] || s < 1) continue;
			strmid(key, line, 0, s++);
			if(strcmp(key, "Created") == 0) FuelStationCreated[i] = strval(line[s]);
			else if(strcmp(key, "Pos") == 0) sscanf(line[s], "p<,>fff", FuelStationPos[i][0], 
				FuelStationPos[i][1], FuelStationPos[i][2]);
		}
		fclose(handle);
		if(FuelStationCreated[i]) count++;
	}
	printf("  Loaded %d fuel stations", count);
}

SaveFuelStation(stationid)
{
	new filename[64], line[256];
	format(filename, sizeof(filename), FUEL_STATION_FILE_PATH "f%d.ini", stationid);
	new File:handle = fopen(filename, io_write);
	format(line, sizeof(line), "Created=%d\r\n", FuelStationCreated[stationid]); fwrite(handle, line);
	format(line, sizeof(line), "Pos=%.3f, %.3f, %.3f\r\n", FuelStationPos[stationid][0], 
		FuelStationPos[stationid][1], FuelStationPos[stationid][2]);
	fwrite(handle, line);
	fclose(handle);
}

UpdateFuelStation(stationid, removeold)
{
	if(FuelStationCreated[stationid])
	{
		if(removeold)
		{
			Delete3DTextLabel(FuelStationLabel[stationid]);
		}
		new labeltext[60];
		format(labeltext, sizeof(labeltext), ""COL_BROWN"Gas Station\n"COL_WHITE"/refuel", stationid);
		FuelStationLabel[stationid] = Create3DTextLabel(labeltext, 0x00BBFFDD, FuelStationPos[stationid][0], 
			FuelStationPos[stationid][1], FuelStationPos[stationid][2]+0.5, 20.0, 0);
	}
}

IsValidFuelStation(stationid)
{
	if(stationid < 1 || stationid >= MAX_FUEL_STATIONS) return 0;
	if(FuelStationCreated[stationid]) return 1;
	return 0;
}

public IsPlayerInsideAHouse(playerid)
{
    if(!GetPlayerInterior(playerid)) // He is outside any house ( interior = 0)
    {
        return 1;
	}
	return 1;
}

public MainTimer()
{
	new string[128];
	new Float:x, Float:y, Float:z;

    foreach (new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
				new vehicleid = GetPlayerVehicleID(i);
				if(!IsBicycle(vehicleid) && !IsBus(vehicleid) && Fuel[vehicleid] > 0)
				{
					Fuel[vehicleid] -= GetPlayerSpeed(i)/1000.0;
					if(Fuel[vehicleid] <= 0)
					{
						ToggleEngine(vehicleid, VEHICLE_PARAMS_OFF);
						GameTextForPlayer(i, "~r~out of fuel", 3000, 3);
						SendClientMessage(i, COLOR_LIGHTRED, "This vehicle is out of fuel!");
					}
				}
			}
			if(RefuelTime[i] > 0 && GetPVarInt(i, "FuelStation"))
			{
				new vehicleid = GetPlayerVehicleID(i);
				Fuel[vehicleid] += 2.0;
				RefuelTime[i]--;
				if(RefuelTime[i] == 0)
				{
					if(Fuel[vehicleid] >= 100.0) Fuel[vehicleid] = 100.0;
					new stationid = GetPVarInt(i, "FuelStation");
					new cost = floatround(Fuel[vehicleid]-GetPVarFloat(i, "Fuel"))*FUEL_PRICE;
					if(GetPlayerState(i) != PLAYER_STATE_DRIVER || Fuel[vehicleid] >= 100.0 || GetPlayerMoney(i) < cost
					|| !IsPlayerInRangeOfPoint(i, 10.0, FuelStationPos[stationid][0], FuelStationPos[stationid][1], FuelStationPos[stationid][2]))
					{
						if(GetPlayerMoney(i) < cost) cost = GetPlayerMoney(i);
						GivePlayerMoney(i, -cost);
						format(string, sizeof(string), "~r~-$%d", cost);
						GameTextForPlayer(i, string, 2000, 3);
						format(string, sizeof(string), "You have paid $%d for the fuel.", cost);
						SendClientMessage(i, COLOR_WHITE, string);
						SetPVarInt(i, "FuelStation", 0);
						SetPVarFloat(i, "Fuel", 0.0);
					}
					else
					{
						RefuelTime[i] = 5;
						format(string, sizeof(string), "~w~refueling...~n~~r~-$%d", cost);
						GameTextForPlayer(i, string, 2000, 3);
					}
				}
			}
			if(TrackCar[i])
			{
				GetVehiclePos(TrackCar[i], x, y, z);
				SetPlayerCheckpoint(i, x, y, z, 3);
			}
		}
	}
}

public Speedometer()
{
	new vehicleid, Float:health;
	new fstring[32], string[512];

    foreach (new i : Player)
	{
		if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i))
		{
			vehicleid = GetPlayerVehicleID(i);
			GetVehicleHealth(vehicleid, health);
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

			string = "~w~";
			strcat(string, "~w~~h~fuel: ~g~", sizeof(string));
			fstring = "iiiiiiiiii";
			if(Fuel[vehicleid] > 100.0) strins(fstring, "~r~", 10, sizeof(fstring));
			else if(Fuel[vehicleid] < 0.0) strins(fstring, "~r~", 0, sizeof(fstring));
			else strins(fstring, "~r~", floatround(Fuel[vehicleid]/10.0), sizeof(fstring));
			strcat(string, fstring, sizeof(string));
			
			strcat(string, "~n~~w~~h~", sizeof(string));
			if(GetPVarInt(i, "Speedo")) format(fstring, sizeof(fstring), "mph: ~w~%d", GetPlayerSpeed(i, false));
			else format(fstring, sizeof(fstring), "kph: ~w~%d", GetPlayerSpeed(i, true));
			strcat(string, fstring, sizeof(string));

			TextDrawSetString(SpeedoText[i], string);
		}
	}
}

public SaveTimer()
{
	SaveVehicleIndex++;
	if(SaveVehicleIndex >= MAX_DVEHICLES) SaveVehicleIndex = 1;
	if(IsValidVehicle(SaveVehicleIndex)) SaveVehicle(SaveVehicleIndex);
}

public StopAlarm(vehicleid)
{
	ToggleAlarm(vehicleid, VEHICLE_PARAMS_OFF);
}

stock RandomSet(...) return getarg(random(numargs()));

public OnVehicleMod(playerid, vehicleid, componentid)
{
	new id = GetVehicleID(vehicleid);
	if(IsValidVehicle(id))
	{
		VehicleMods[id][GetVehicleComponentType(componentid)] = componentid;
		SaveVehicle(id);
	}
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	new id = GetVehicleID(vehicleid);
	if(IsValidVehicle(id))
	{
		VehiclePaintjob[id] = paintjobid;
		SaveVehicle(id);
	}
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	new id = GetVehicleID(vehicleid);
	if(IsValidVehicle(id))
	{
		VehicleColor[id][0] = color1;
		VehicleColor[id][1] = color2;
		SaveVehicle(id);
	}
	return 1;
}

ShowDialog(playerid, dialogid)
{
	switch(dialogid)
	{
		case DIALOG_VEHICLE:
		{
			new vehicleid = GetPVarInt(playerid, "DialogValue1");
			new caption[32], info[256];
			format(caption, sizeof(caption), "Vehicle ID %d", vehicleid);
			strcat(info, "Engine\nLights\nHood\nTrunk", sizeof(info));
			strcat(info, "\nFill Tank", sizeof(info));
			if(GetPlayerVehicleAccess(playerid, vehicleid) >= 2)
			{
				new value = VehicleValue[vehicleid]/2;
				format(info, sizeof(info), "%s\nSell Vehicle  ($%d)\nPark Vehicle ($200)", info, value);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, info, "Select", "Cancel");
		}
		case DIALOG_VEHICLE_BUY:
		{
			new vehicleid = GetPVarInt(playerid, "DialogValue1");
			new caption[32], info[256];
			format(caption, sizeof(caption), "Vehicle ID %d", vehicleid);
			format(info, sizeof(info), "This vehicle is for sale ($%d)\nWould you like to buy it?", VehicleValue[vehicleid]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, info, "Yes", "No");
		}
		case DIALOG_VEHICLE_SELL:
		{
			new targetid = GetPVarInt(playerid, "DialogValue1");
			new id = GetPVarInt(playerid, "DialogValue2");
			new price = GetPVarInt(playerid, "DialogValue3");
			new info[256];
			format(info, sizeof(info), "%s (%d) wants to sell you a %s for $%d.", PlayerName(targetid), targetid, 
				VehicleNames[VehicleModel[id]-400], price);
			strcat(info, "\n\nWould you like to buy?", sizeof(info));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Buy Vehicle", info, "Yes", "No");
		}
		case DIALOG_TRUNK:
		{
			new vehicleid = GetPVarInt(playerid, "DialogValue1");
			new name[32], info[256];
			for(new i=0; i < sizeof(VehicleTrunk[]); i++)
			{
				if(VehicleTrunk[vehicleid][i][1] > 0)
				{
					GetWeaponName(VehicleTrunk[vehicleid][i][0], name, sizeof(name));
					format(info, sizeof(info), "%s%d. %s (%d)\n", info, i+1, name, VehicleTrunk[vehicleid][i][1]);
				}
				else
				{
					format(info, sizeof(info), "%s%d. Empty\n", info, i+1);
				}
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Trunk", info, "Select", "Cancel");
		}
		case DIALOG_TRUNK_ACTION:
		{
			new info[128];
			strcat(info, "Put Into Trunk\nTake From Trunk", sizeof(info));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Trunk", info, "Select", "Cancel");
		}
		case DIALOG_VEHICLE_PLATE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Edit License Plate", "Enter new license plate:", "Change", "Back");
		}
		case DIALOG_FUEL:
		{
			new info[128];
			strcat(info, "Refuel Vehicle  ($" #FUEL_PRICE " per liter)\nBuy Gas Can  ($" #GAS_CAN_PRICE ")", sizeof(info));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Fuel Station", info, "OK", "Cancel");
		}
		case DIALOG_EDITVEHICLE:
		{
			new vehicleid = GetPVarInt(playerid, "DialogValue1");
			new caption[32], info[256];
			format(caption, sizeof(caption), "Edit Vehicle ID %d", vehicleid);
			format(info, sizeof(info), "1. Value: [$%d]\n2. Model: [%d (%s)]\n3. Colors: [%d]  [%d]\n4. License Plate: [%s]", 
				VehicleValue[vehicleid], VehicleModel[vehicleid], VehicleNames[VehicleModel[vehicleid]-400], 
				VehicleColor[vehicleid][0], VehicleColor[vehicleid][1], VehicleNumberPlate[vehicleid]);
			strcat(info, "\n5. Delete Vehicle\n6. Park Vehicle\n7. Go To Vehicle", sizeof(info));
			strcat(info, "\n\nEnter: [nr] [value1] [value2]", sizeof(info));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, info, "OK", "Cancel");
		}
	}
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
    if(listid == males)
    {
        if(response)
        {
            SendClientMessage(playerid, COLOR_WHITE, "New clothes bought. ($50)");
            SetPlayerSkin(playerid, modelid);
            GivePlayerMoney(playerid, -50);
            
		    new id = GetPlayerVirtualWorld(playerid);

		    BusinessInfo[id][bMoney] += 50;

			new file4[40];
			format(file4, sizeof(file4), BPATH, id);
			new INI:File = INI_Open(file4);
			INI_SetTag(File, "data");
			INI_WriteInt(File, "bOwned", BusinessInfo[id][bOwned]);
			INI_WriteInt(File, "bPrice", BusinessInfo[id][bPrice]);
			INI_WriteString(File, "bOwner", BusinessInfo[id][bOwner]);
			INI_WriteInt(File, "bType", BusinessInfo[id][bType]);
			INI_WriteInt(File, "bLocked", BusinessInfo[id][bLocked]);
			INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
			INI_WriteFloat(File, "bEntranceX", BusinessInfo[id][bEntranceX]);
			INI_WriteFloat(File, "bEntranceY", BusinessInfo[id][bEntranceY]);
			INI_WriteFloat(File, "bEntranceZ", BusinessInfo[id][bEntranceZ]);
			INI_WriteFloat(File, "bEntranceA", BusinessInfo[id][bEntranceA]);
			INI_WriteFloat(File, "bExitX", BusinessInfo[id][bExitX]);
			INI_WriteFloat(File, "bExitY", BusinessInfo[id][bExitY]);
			INI_WriteFloat(File, "bExitZ", BusinessInfo[id][bExitZ]);
			INI_WriteFloat(File, "bExitA", BusinessInfo[id][bExitA]);
			INI_WriteInt(File, "bInt", BusinessInfo[id][bInt]);
			INI_WriteInt(File, "bWorld", BusinessInfo[id][bWorld]);
			INI_WriteInt(File, "bInsideInt", BusinessInfo[id][bInsideInt]);
			INI_WriteInt(File, "bInsideWorld", BusinessInfo[id][bInsideWorld]);
			INI_WriteString(File, "bName", BusinessInfo[id][bName]);
			INI_Close(File);
        }
    }
    else if(listid == females)
    {
        if(response)
        {
            SendClientMessage(playerid, COLOR_WHITE, "New clothes bought. ($50)");
            SetPlayerSkin(playerid, modelid);
            GivePlayerMoney(playerid, -50);

		    new id = GetPlayerVirtualWorld(playerid);

		    BusinessInfo[id][bMoney] += 50;

			new file4[40];
			format(file4, sizeof(file4), BPATH, id);
			new INI:File = INI_Open(file4);
			INI_SetTag(File, "data");
			INI_WriteInt(File, "bOwned", BusinessInfo[id][bOwned]);
			INI_WriteInt(File, "bPrice", BusinessInfo[id][bPrice]);
			INI_WriteString(File, "bOwner", BusinessInfo[id][bOwner]);
			INI_WriteInt(File, "bType", BusinessInfo[id][bType]);
			INI_WriteInt(File, "bLocked", BusinessInfo[id][bLocked]);
			INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
			INI_WriteFloat(File, "bEntranceX", BusinessInfo[id][bEntranceX]);
			INI_WriteFloat(File, "bEntranceY", BusinessInfo[id][bEntranceY]);
			INI_WriteFloat(File, "bEntranceZ", BusinessInfo[id][bEntranceZ]);
			INI_WriteFloat(File, "bEntranceA", BusinessInfo[id][bEntranceA]);
			INI_WriteFloat(File, "bExitX", BusinessInfo[id][bExitX]);
			INI_WriteFloat(File, "bExitY", BusinessInfo[id][bExitY]);
			INI_WriteFloat(File, "bExitZ", BusinessInfo[id][bExitZ]);
			INI_WriteFloat(File, "bExitA", BusinessInfo[id][bExitA]);
			INI_WriteInt(File, "bInt", BusinessInfo[id][bInt]);
			INI_WriteInt(File, "bWorld", BusinessInfo[id][bWorld]);
			INI_WriteInt(File, "bInsideInt", BusinessInfo[id][bInsideInt]);
			INI_WriteInt(File, "bInsideWorld", BusinessInfo[id][bInsideWorld]);
			INI_WriteString(File, "bName", BusinessInfo[id][bName]);
			INI_Close(File);
        }
    }
    return 1;
}

public OnPlayerDataSave(playerid)
{
	if(PlayerLogged[playerid] == true)
	{
		new INI:File = INI_Open(UserPath(playerid));
		INI_SetTag(File, "data");

		new
		pskin = GetPlayerSkin(playerid);

		PlayerInfo[playerid][pSkin] = pskin;

		GetPlayerPos(playerid, PlayerInfo[playerid][pXPos], PlayerInfo[playerid][pYPos], PlayerInfo[playerid][pZPos]);

		GetPlayerWeaponData(playerid, 0, PlayerInfo[playerid][pWeapon1], PlayerInfo[playerid][pAmmo1]);
		GetPlayerWeaponData(playerid, 1, PlayerInfo[playerid][pWeapon2], PlayerInfo[playerid][pAmmo2]);
		GetPlayerWeaponData(playerid, 2, PlayerInfo[playerid][pWeapon3], PlayerInfo[playerid][pAmmo3]);
		GetPlayerWeaponData(playerid, 3, PlayerInfo[playerid][pWeapon4], PlayerInfo[playerid][pAmmo4]);
		GetPlayerWeaponData(playerid, 4, PlayerInfo[playerid][pWeapon5], PlayerInfo[playerid][pAmmo5]);
		GetPlayerWeaponData(playerid, 5, PlayerInfo[playerid][pWeapon6], PlayerInfo[playerid][pAmmo6]);
		GetPlayerWeaponData(playerid, 6, PlayerInfo[playerid][pWeapon7], PlayerInfo[playerid][pAmmo7]);
		GetPlayerWeaponData(playerid, 7, PlayerInfo[playerid][pWeapon8], PlayerInfo[playerid][pAmmo8]);
		GetPlayerWeaponData(playerid, 8, PlayerInfo[playerid][pWeapon9], PlayerInfo[playerid][pAmmo9]);
		GetPlayerWeaponData(playerid, 9, PlayerInfo[playerid][pWeapon10], PlayerInfo[playerid][pAmmo10]);
		GetPlayerWeaponData(playerid, 10, PlayerInfo[playerid][pWeapon11], PlayerInfo[playerid][pAmmo11]);
		GetPlayerWeaponData(playerid, 11, PlayerInfo[playerid][pWeapon12], PlayerInfo[playerid][pAmmo12]);
		GetPlayerWeaponData(playerid, 12, PlayerInfo[playerid][pWeapon13], PlayerInfo[playerid][pAmmo13]);
		GetPlayerWeaponData(playerid, 13, PlayerInfo[playerid][pWeapon14], PlayerInfo[playerid][pAmmo14]);

		GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
		INI_WriteInt(File, "Cash", GetPlayerMoney(playerid));
		INI_WriteInt(File, "Admin", PlayerInfo[playerid][pAdmin]);
		INI_WriteInt(File, "Kills", PlayerInfo[playerid][pKills]);
		INI_WriteInt(File, "Deaths", PlayerInfo[playerid][pDeaths]);
		INI_WriteInt(File, "LSD", PlayerInfo[playerid][dLSD]);
		INI_WriteInt(File, "BizID", PlayerInfo[playerid][BizID]);
		INI_WriteInt(File, "Cocaine", PlayerInfo[playerid][dCocaine]);
		INI_WriteInt(File, "Marijuana", PlayerInfo[playerid][dMarijuana]);
		INI_WriteInt(File, "Meth", PlayerInfo[playerid][dMeth]);
		INI_WriteInt(File, "Ecstasy", PlayerInfo[playerid][dEcstasy]);
		INI_WriteInt(File, "Seeds", PlayerInfo[playerid][dSeeds]);
		INI_WriteInt(File, "Respect", PlayerInfo[playerid][pRespect]);
		INI_WriteInt(File, "Cigarettes", PlayerInfo[playerid][pCigarettes]);
		INI_WriteInt(File, "Beer", PlayerInfo[playerid][pBeer]);
		INI_WriteInt(File, "BankAccount", PlayerInfo[playerid][pBankAccount]);
		INI_WriteInt(File, "Datasaved", PlayerInfo[playerid][pAccountdata]);
		INI_WriteInt(File, "Number", PlayerInfo[playerid][pNumber]);
		INI_WriteInt(File, "Skin", PlayerInfo[playerid][pSkin]);
		INI_WriteInt(File, "Level", PlayerInfo[playerid][pLevel]);
		INI_WriteInt(File, "Weapon1", PlayerInfo[playerid][pWeapon1]);
		INI_WriteInt(File, "Weapon2", PlayerInfo[playerid][pWeapon2]);
		INI_WriteInt(File, "Weapon3", PlayerInfo[playerid][pWeapon3]);
		INI_WriteInt(File, "Weapon4", PlayerInfo[playerid][pWeapon4]);
		INI_WriteInt(File, "Weapon5", PlayerInfo[playerid][pWeapon5]);
		INI_WriteInt(File, "Weapon6", PlayerInfo[playerid][pWeapon6]);
		INI_WriteInt(File, "Weapon7", PlayerInfo[playerid][pWeapon7]);
		INI_WriteInt(File, "Weapon8", PlayerInfo[playerid][pWeapon8]);
		INI_WriteInt(File, "Weapon9", PlayerInfo[playerid][pWeapon9]);
		INI_WriteInt(File, "Weapon10", PlayerInfo[playerid][pWeapon10]);
		INI_WriteInt(File, "Weapon11", PlayerInfo[playerid][pWeapon11]);
		INI_WriteInt(File, "Weapon12", PlayerInfo[playerid][pWeapon12]);
		INI_WriteInt(File, "Weapon13", PlayerInfo[playerid][pWeapon13]);
		INI_WriteInt(File, "Weapon14", PlayerInfo[playerid][pWeapon14]);
		INI_WriteInt(File, "Ammo1", PlayerInfo[playerid][pAmmo1]);
		INI_WriteInt(File, "Ammo2", PlayerInfo[playerid][pAmmo2]);
		INI_WriteInt(File, "Ammo3", PlayerInfo[playerid][pAmmo3]);
		INI_WriteInt(File, "Ammo4", PlayerInfo[playerid][pAmmo4]);
		INI_WriteInt(File, "Ammo5", PlayerInfo[playerid][pAmmo5]);
		INI_WriteInt(File, "Ammo6", PlayerInfo[playerid][pAmmo6]);
		INI_WriteInt(File, "Ammo7", PlayerInfo[playerid][pAmmo7]);
		INI_WriteInt(File, "Ammo8", PlayerInfo[playerid][pAmmo8]);
		INI_WriteInt(File, "Ammo9", PlayerInfo[playerid][pAmmo9]);
		INI_WriteInt(File, "Ammo10", PlayerInfo[playerid][pAmmo10]);
		INI_WriteInt(File, "Ammo11", PlayerInfo[playerid][pAmmo11]);
		INI_WriteInt(File, "Ammo12", PlayerInfo[playerid][pAmmo12]);
		INI_WriteInt(File, "Ammo13", PlayerInfo[playerid][pAmmo13]);
		INI_WriteInt(File, "Ammo14", PlayerInfo[playerid][pAmmo14]);
		INI_WriteInt(File, "BusinessMoney", PlayerInfo[playerid][BusinessMoney]);
		INI_WriteFloat(File, "Health", PlayerInfo[playerid][pHealth]);
		INI_WriteInt(File, "DriverLicense", PlayerInfo[playerid][pDriverLicense]);
		INI_WriteInt(File, "Age", PlayerInfo[playerid][pAge]);
		INI_WriteInt(File, "Gender", PlayerInfo[playerid][pGender]);
		INI_WriteInt(File, "InJail", PlayerInfo[playerid][pInJail]);
		INI_WriteInt(File, "InJailTime", PlayerInfo[playerid][pInJailTime]);
		INI_WriteInt(File, "HouseID", PlayerInfo[playerid][HouseID]);
		INI_WriteInt(File, "Mask", PlayerInfo[playerid][pMask]);
		INI_WriteInt(File, "FightingStyle", PlayerInfo[playerid][pFightingStyle]);
		INI_WriteInt(File, "Boombox", PlayerInfo[playerid][pBoombox]);
		INI_WriteInt(File, "Experience", PlayerInfo[playerid][pExperience]);
		INI_WriteInt(File, "Crashed", PlayerInfo[playerid][pCrashed]);
		INI_WriteFloat(File, "CrashX", PlayerInfo[playerid][pCrashX]);
		INI_WriteFloat(File, "CrashY", PlayerInfo[playerid][pCrashY]);
		INI_WriteFloat(File, "CrashZ", PlayerInfo[playerid][pCrashZ]);
		INI_WriteInt(File, "CrashInt", PlayerInfo[playerid][pCrashInt]);
		INI_WriteInt(File, "CrashWorld", PlayerInfo[playerid][pCrashWorld]);
		INI_WriteInt(File, "PlayerOwnsHouse", PlayerInfo[playerid][pPlayerOwnsHouse]);
		INI_WriteInt(File, "WepLicense", PlayerInfo[playerid][pWepLicense]);
		INI_WriteInt(File, "Phone", PlayerInfo[playerid][pPhone]);
		INI_WriteInt(File, "Faction", PlayerInfo[playerid][pFaction]);
		INI_WriteInt(File, "Rank", PlayerInfo[playerid][fRank]);
		INI_WriteInt(File, "Fishes", PlayerInfo[playerid][pFishes]);
		INI_WriteInt(File, "FishingRod", PlayerInfo[playerid][pFishingRod]);
		INI_WriteInt(File, "Worms", PlayerInfo[playerid][pWorms]);
		INI_WriteInt(File, "PlayingHours", PlayerInfo[playerid][pPlayingHours]);
		INI_WriteInt(File, "Job", PlayerInfo[playerid][pJob]);
		INI_WriteInt(File, "Banned", PlayerInfo[playerid][pBanned]);
		INI_WriteInt(File, "TutorialDone", PlayerInfo[playerid][pTutorialDone]);
		INI_WriteInt(File, "GunRights", PlayerInfo[playerid][pGunRights]);
		INI_WriteString(File, "Note1", PlayerInfo[playerid][pNote1]);
		INI_WriteString(File, "Note2", PlayerInfo[playerid][pNote2]);
		INI_WriteString(File, "Note3", PlayerInfo[playerid][pNote3]);
		INI_WriteString(File, "Note4", PlayerInfo[playerid][pNote4]);
		INI_WriteString(File, "BannedIP", PlayerInfo[playerid][BannedIP]);
		INI_WriteInt(File, "Seeds", PlayerInfo[playerid][pSeeds]);
		INI_WriteInt(File, "Caller", PlayerInfo[playerid][pCaller]);
		INI_WriteInt(File, "Number", PlayerInfo[playerid][pNumber]);
		INI_WriteInt(File, "Year", PlayerInfo[playerid][pYear]);
		INI_WriteInt(File, "Month", PlayerInfo[playerid][pMonth]);
		INI_WriteInt(File, "Day", PlayerInfo[playerid][pDay]);
		INI_WriteInt(File, "Donator", PlayerInfo[playerid][pDonator]);
		INI_WriteInt(File, "BlockPM", PlayerInfo[playerid][pBlockPM]);
		INI_WriteString(File, "ForumName", PlayerInfo[playerid][pForumName]);
		INI_WriteInt(File, "Fname", PlayerInfo[playerid][pFname]);
		INI_WriteInt(File, "Jailed", PlayerInfo[playerid][pJailed]);
		INI_WriteInt(File, "Heroin", PlayerInfo[playerid][dHeroin]);
		INI_WriteInt(File, "Crack", PlayerInfo[playerid][dCrack]);
		INI_WriteString(File, "ActiveOffense", PlayerInfo[playerid][pActiveOffense]);
		INI_WriteInt(File, "ActiveOffenses", PlayerInfo[playerid][pActiveOffenses]);
		INI_WriteInt(File, "UnActiveOffenses", PlayerInfo[playerid][pUnActiveOffenses]);
		INI_WriteInt(File, "Plate1", PlayerInfo[playerid][pPlate1]);
		INI_WriteInt(File, "Plate2", PlayerInfo[playerid][pPlate2]);
		INI_WriteInt(File, "Plate3", PlayerInfo[playerid][pPlate3]);
		INI_WriteString(File, "Name", PlayerInfo[playerid][pName]);
		INI_WriteString(File, "TicketReason1", PlayerInfo[playerid][pTicketReason1]);
		INI_WriteString(File, "TicketReason2", PlayerInfo[playerid][pTicketReason2]);
		INI_WriteInt(File, "Ticket1", PlayerInfo[playerid][pTicket1]);
		INI_WriteInt(File, "Ticket2", PlayerInfo[playerid][pTicket2]);
		INI_WriteInt(File, "TicketPrice1", PlayerInfo[playerid][pTicketPrice1]);
		INI_WriteInt(File, "TicketPrice2", PlayerInfo[playerid][pTicketPrice2]);
		INI_WriteInt(File, "Welfare", PlayerInfo[playerid][pWelfare]);
		INI_WriteInt(File, "Walkstyle", PlayerInfo[playerid][pWalkStyle]);
		INI_WriteFloat(File, "XPos", PlayerInfo[playerid][pXPos]);
		INI_WriteFloat(File, "YPos", PlayerInfo[playerid][pYPos]);
		INI_WriteFloat(File, "ZPos", PlayerInfo[playerid][pZPos]);
		INI_WriteInt(File, "Interior", PlayerInfo[playerid][pInterior]);
		INI_WriteInt(File, "VirtualWorld", PlayerInfo[playerid][pVirtualWorld]);
		INI_Close(File);
	}
	return 1;
}

public UnsetHacksBan(playerid)
{
    PlayerInfo[playerid][pBanned] = 1;
    Ban(playerid);
    return 1;
}

public PlayerLocalMessage(playerid, Float:radius, const message[])
{
	//This is for messages like "Blah has crashed"
	new string[128];
	format(string, sizeof(string), "[LOCAL:] %s %s", GetName(playerid), message);
	ProxDetector(20.0, playerid, string, COLOR_LOCALMSG, COLOR_LOCALMSG, COLOR_LOCALMSG, COLOR_LOCALMSG, COLOR_LOCALMSG);
	return 1;
}

public EndOfRegister(playerid)
{
	if(PlayerInfo[playerid][pGender] == 0)
	{
		if(playerRace[playerid] == 1)
		{
			SetTimerEx("TutorialDone", 1000, false, "i", playerid);
			SetPlayerSkin(playerid, 48);
			PlayerInfo[playerid][pSkin] = 48;
		}
		else if(playerRace[playerid] == 2)
		{
			SetTimerEx("TutorialDone", 1000, false, "i", playerid);
			SetPlayerSkin(playerid, 28);
			PlayerInfo[playerid][pSkin] = 28;
		}
		else if(playerRace[playerid] == 3)
		{
			SetTimerEx("TutorialDone", 1000, false, "i", playerid);
			SetPlayerSkin(playerid, 60);
			PlayerInfo[playerid][pSkin] = 60;
		}
		else if(playerRace[playerid] == 4)
		{
			SetTimerEx("TutorialDone", 1000, false, "i", playerid);
			SetPlayerSkin(playerid, 120);
			PlayerInfo[playerid][pSkin] = 120;
		}
	}
	else if(PlayerInfo[playerid][pGender] == 1)
	{
		if(playerRace[playerid] == 1)
		{
			SetTimerEx("TutorialDone", 1000, false, "i", playerid);
			SetPlayerSkin(playerid, 12);
			PlayerInfo[playerid][pSkin] = 12;
		}
		else if(playerRace[playerid] == 2)
		{
			SetTimerEx("TutorialDone", 1000, false, "i", playerid);
			SetPlayerSkin(playerid, 13);
			PlayerInfo[playerid][pSkin] = 13;
		}
		else if(playerRace[playerid] == 3)
		{
			SetTimerEx("TutorialDone", 1000, false, "i", playerid);
			SetPlayerSkin(playerid, 93);
			PlayerInfo[playerid][pSkin] = 93;
		}
		else if(playerRace[playerid] == 4)
		{
			SetTimerEx("TutorialDone", 1000, false, "i", playerid);
			SetPlayerSkin(playerid, 55);
			PlayerInfo[playerid][pSkin] = 55;
		}
	}
	return 1;
}

public timerFish(playerid)
{
    if(fish[playerid] > 0)
    {
        new string[128];
        format(string, 50, "~w~FISHING...", fish[playerid]);
        GameTextForPlayer(playerid, string, 1300, 1);
        fish[playerid] = fish[playerid] - 1;
	    format(string, sizeof(string), "* %s is fishing.", GetName(playerid));
	    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
    }
    else
    {
		TogglePlayerControllable(playerid, 1);
		KillTimer(TimerFish[playerid]);
		FishChance(playerid);
		ClearAnimations(playerid);
		Fishing[playerid] = false;
	}
	return 1;
}

public timerchop(playerid)
{
    if(chop[playerid] > 0)
    {
        new string[128];
        format(string, 50, "~w~CUTTING...", chop[playerid]);
        GameTextForPlayer(playerid, string, 1300, 1);
        chop[playerid] = chop[playerid] - 1;
	    format(string, sizeof(string), "* %s is chopping down the tree.", GetName(playerid));
	    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
    }
    else
    {
        if(LumberCP[playerid] == 1)
        {
            SetPlayerCheckpoint(playerid, -2215.63647, -2154.07959, 43.49667, 1.0);
			TogglePlayerControllable(playerid, 1);
			KillTimer(TimerChop[playerid]);
			ClearAnimations(playerid);
			DestroyObject(LumberTree[0]);
			ChoppedTree[0] = CreateObject(684, -2217.94116, -2164.31836, 42.22606,   7.32000, -21.00000, 0.00000);
			LumberCP[playerid] = 2;
			SetTimerEx("tree1respawn", 60000, 1, "i", playerid);
			RemovePlayerWeapon(playerid, 9);
			Chopping[playerid] = false;
		}
  		else if(LumberCP[playerid] == 2)
        {
            SetPlayerCheckpoint(playerid, -2209.71729, -2142.16846, 45.55535, 1.0);
			TogglePlayerControllable(playerid, 1);
			KillTimer(TimerChop[playerid]);
			ClearAnimations(playerid);
			DestroyObject(LumberTree[1]);
			ChoppedTree[1] = CreateObject(684, -2214.65161, -2153.41870, 43.76148,   7.32000, -21.00000, 0.00000);
			LumberCP[playerid] = 3;
			TreeChopped[playerid] = 2;
			SetTimerEx("tree2respawn", 60000, 1, "i", playerid);
			RemovePlayerWeapon(playerid, 9);
			Chopping[playerid] = false;
		}
		else if(LumberCP[playerid] == 3)
        {
            SetPlayerCheckpoint(playerid, -2197.78564, -2154.36914, 45.55535, 1.0);
			TogglePlayerControllable(playerid, 1);
			KillTimer(TimerChop[playerid]);
			ClearAnimations(playerid);
			DestroyObject(LumberTree[2]);
			ChoppedTree[2] = CreateObject(684, -2208.92285, -2140.71802, 45.75963,   5.10000, -16.80000, 0.00000);
			LumberCP[playerid] = 4;
			TreeChopped[playerid] = 3;
			SetTimerEx("tree3respawn", 60000, 1, "i", playerid);
			RemovePlayerWeapon(playerid, 9);
			Chopping[playerid] = false;
		}
		else if(LumberCP[playerid] == 4)
        {
            SetPlayerCheckpoint(playerid, -2192.93359, -2141.94360, 47.621983, 2.0);
			TogglePlayerControllable(playerid, 1);
			KillTimer(TimerChop[playerid]);
			ClearAnimations(playerid);
			DestroyObject(LumberTree[3]);
			ChoppedTree[3] = CreateObject(684, -2196.66553, -2152.92310, 46.17335,   7.32000, -21.00000, 0.00000);
			LumberCP[playerid] = 5;
			TreeChopped[playerid] = 4;
			SetTimerEx("tree4respawn", 60000, 1, "i", playerid);
			RemovePlayerWeapon(playerid, 9);
			Chopping[playerid] = false;
		}
		else if(LumberCP[playerid] == 5)
        {
            SetPlayerCheckpoint(playerid, -2020.6166, -2396.2029, 30.2942, 3.0);
			TogglePlayerControllable(playerid, 1);
			KillTimer(TimerChop[playerid]);
			ClearAnimations(playerid);
			DestroyObject(LumberTree[4]);
			ChoppedTree[4] = CreateObject(684, -2192.05469, -2140.66406, 48.10807,   5.94000, -17.87999, 0.00000);
			LumberCP[playerid] = 6;
			TreeChopped[playerid] = 5;
			SetTimerEx("tree5respawn", 60000, 1, "i", playerid);
			SCM(playerid, -1, "Drop off the wood at the lumbermill.");
	 		RemovePlayerWeapon(playerid, 9);
	 		Chopping[playerid] = false;
		}
	}
	return 1;
}

public timershop(playerid)
{
    if(shopwork[playerid] > 0)
    {
        new string[128];
        format(string, 50, "~w~PLACING...", shopwork[playerid]);
        GameTextForPlayer(playerid, string, 1300, 1);
        shopwork[playerid] = shopwork[playerid] - 1;
	    format(string, sizeof(string), "* %s is placing products on the shelf.", GetName(playerid));
	    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
    }
    else
    {
		if(ShopCP[playerid] == 1)
		{
	    	SetPlayerCheckpoint(playerid, -28.4407, -49.2976, 1003.5469, 1.0);
			TogglePlayerControllable(playerid, 1);
			KillTimer(TimerShop[playerid]);
			Producting[playerid] = false;
			ApplyPlayerAnimation(playerid, "COP_AMBIENT", "COPBROWSE_OUT", 4.0, 0, 1, 0, 0, 0, 1);
			ShopCP[playerid] = 2;
		}
		else if(ShopCP[playerid] == 2)
		{
 			SetPlayerCheckpoint(playerid, -36.5776, -49.9914, 1003.5469, 1.0);
			TogglePlayerControllable(playerid, 1);
			KillTimer(TimerShop[playerid]);
			Producting[playerid] = false;
			ApplyPlayerAnimation(playerid, "COP_AMBIENT", "COPBROWSE_OUT", 4.0, 0, 1, 0, 0, 0, 1);
			ShopCP[playerid] = 3;
		}
		else if(ShopCP[playerid] == 3)
		{
 			SetPlayerCheckpoint(playerid, -36.5628, -55.4194, 1003.5469, 1.0);
			TogglePlayerControllable(playerid, 1);
			KillTimer(TimerShop[playerid]);
			Producting[playerid] = false;
			ApplyPlayerAnimation(playerid, "COP_AMBIENT", "COPBROWSE_OUT", 4.0, 0, 1, 0, 0, 0, 1);
			ShopCP[playerid] = 4;
		}
		else if(ShopCP[playerid] == 4)
		{
 			SetPlayerCheckpoint(playerid, -31.2107, -53.2609, 1003.5469, 1.0);
			TogglePlayerControllable(playerid, 1);
			KillTimer(TimerShop[playerid]);
			Producting[playerid] = false;
			ApplyPlayerAnimation(playerid, "COP_AMBIENT", "COPBROWSE_OUT", 4.0, 0, 1, 0, 0, 0, 1);
			ShopCP[playerid] = 5;
		}
		else if(ShopCP[playerid] == 5)
		{
 			SetPlayerCheckpoint(playerid, -22.7139, -49.3138, 1003.5469, 1.0);
			TogglePlayerControllable(playerid, 1);
			KillTimer(TimerShop[playerid]);
			Producting[playerid] = false;
			ApplyPlayerAnimation(playerid, "COP_AMBIENT", "COPBROWSE_OUT", 4.0, 0, 1, 0, 0, 0, 1);
			ShopCP[playerid] = 6;
		}
		else if(ShopCP[playerid] == 6)
		{
			ClearAnimations(playerid);
   			new string[128];
			new randcheck = 120 + random(170);
			TogglePlayerControllable(playerid, 1);
			format(string, sizeof(string), "You have finished your shift. You got $%d dollars in-hand from the shop owner since you are not old enough for a wire-transfer.", randcheck);
			SendClientMessage(playerid, -1, string);
			GivePlayerMoney(playerid, randcheck);
			ShopCP[playerid] = 0;
		}
	}
	return 1;
}

public tree1respawn(playerid)
{
    DestroyObject(ChoppedTree[0]);
    LumberTree[0] = CreateObject(618, -2219.23193, -2165.13379, 41.66151,   0.00000, 0.00000, 0.00000);
	return 1;
}

public tree2respawn(playerid)
{
    DestroyObject(ChoppedTree[1]);
    LumberTree[1] = CreateObject(618, -2215.63647, -2154.07959, 43.49667,   0.00000, 0.00000, 0.00000);
	return 1;
}

public tree3respawn(playerid)
{
    DestroyObject(ChoppedTree[2]);
    LumberTree[2] = CreateObject(618, -2209.71729, -2142.16846, 45.55535,   0.00000, 0.00000, 0.00000);
	return 1;
}

public tree4respawn(playerid)
{
    DestroyObject(ChoppedTree[3]);
    LumberTree[3] = CreateObject(618, -2197.78564, -2154.36914, 45.55535,   0.00000, 0.00000, 0.00000);
	return 1;
}

public tree5respawn(playerid)
{
    DestroyObject(ChoppedTree[4]);
    LumberTree[4] = CreateObject(618, -2192.93359, -2141.94360, 47.62198,   0.00000, 0.00000, 0.00000);
	return 1;
}

public GrowingMarijuana(playerid)
{
	new id = IsPlanted();
    WeedInfo[id][planted] = false;
	DestroyObject(WeedInfo[id][plantobject]);
	WeedInfo[id][plantdone] = true;
	WeedInfo[id][plantobject] = CreateObject(3409, WeedInfo[id][plantx], WeedInfo[id][planty], WeedInfo[id][plantz] - 1.3, 0.0, 0.0, 0);
	return 1;
}

public timerrepair(playerid)
{
    if(repair[playerid] > 0)
    {
        new string[128];
        format(string, 50, "~w~REPAIRING..", repair[playerid]);
        GameTextForPlayer(playerid, string, 800, 3);
        repair[playerid] = repair[playerid] - 1;
	    format(string, sizeof(string), "* %s is getting his car repaired.", GetName(playerid));
	    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
    }
    else
    {
		TogglePlayerControllable(playerid, 1);
		KillTimer(TimerRepair[playerid]);
		RepairVehicle(GetPlayerVehicleID(playerid));
	}
	return 1;
}

public timerAttachWorm(playerid)
{
    if(AttachWorm[playerid] > 0)
    {
        new string[128];
        format(string, 50, "~w~Attaching...", AttachWorm[playerid]);
        GameTextForPlayer(playerid, string, 800, 1);
        AttachWorm[playerid] = AttachWorm[playerid] - 1;
	    format(string, sizeof(string), "* %s is trying to attach a worm to his fishing hook.", GetName(playerid));
	    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 100.0, 10000);
    }
    else
    {
		TogglePlayerControllable(playerid, 1);
		KillTimer(TimerAttachWorm[playerid]);
		WormAttached[playerid] = 1;
		attachingw[playerid] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "You have attached the worm to the hook.");
	}
	return 1;
}

	public FishChance(playerid)
	{
		new
		fishchance = 0 + random(30);

		if(fishchance == 0)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You have caught a Salmon. (5g)");
			PlayerInfo[playerid][pFishes] += 5;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else if(fishchance == 1)
		{
			SendClientMessage(playerid, COLOR_GREEN, "You have caught a Lobster. (20g)");
			PlayerInfo[playerid][pFishes] += 20;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else if(fishchance == 2)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You have caught a Salmon. (5g)");
			PlayerInfo[playerid][pFishes] += 5;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else if(fishchance == 3)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You have caught an Angelfish. (1g)");
			PlayerInfo[playerid][pFishes] += 1;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else if(fishchance == 4)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "You reel the line in and notice that the worm is gone.");
		}
		else if(fishchance == 5)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You have caught an Angelfish. (1g)");
			PlayerInfo[playerid][pFishes] += 1;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else if(fishchance == 6)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "You reel the line in and notice that the worm is gone.");
		}
		else if(fishchance == 7)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You have caught an Angelfish. (1g)");
			PlayerInfo[playerid][pFishes] += 1;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else if(fishchance == 8)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You have caught an Angelfish. (1g)");
			PlayerInfo[playerid][pFishes] += 1;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else if(fishchance == 9)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You have caught a Salmon. (5g)");
			PlayerInfo[playerid][pFishes] += 5;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else if(fishchance == 10)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "You reel the line in and notice that the worm is gone.");
		}
		else if(fishchance == 11)
		{
			SendClientMessage(playerid, COLOR_GREEN, "You have caught a Lobster. (20g)");
			PlayerInfo[playerid][pFishes] += 20;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else if(fishchance == 12)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "You reel the line in and notice that the worm is gone.");
		}
		else if(fishchance == 13)
		{
			SendClientMessage(playerid, COLOR_GREEN, "You have caught a Lobster! (20g)");
			PlayerInfo[playerid][pFishes] += 20;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else if(fishchance == 14)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You have caught an Angelfish. (1g)");
			PlayerInfo[playerid][pFishes] += 1;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else if(fishchance == 15)
		{
			SendClientMessage(playerid, COLOR_GREEN, "You have caught a Shark! (100g)");
			PlayerInfo[playerid][pFishes] += 100;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else if(fishchance == 16)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "You reel the line in and notice that the worm is gone.");
		}
		else if(fishchance == 17)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You have caught an Angelfish. (1g)");
			PlayerInfo[playerid][pFishes] += 1;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else if(fishchance == 18)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You have caught a Salmon. (5g)");
			PlayerInfo[playerid][pFishes] += 5;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else if(fishchance == 19)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "You reel the line in and notice that the worm is gone.");
		}
		else if(fishchance == 20)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You have caught an Angelfish. (1g)");
			PlayerInfo[playerid][pFishes] += 1;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else if(fishchance == 21)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You have caught an Angelfish. (1g)");
			PlayerInfo[playerid][pFishes] += 1;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else if(fishchance == 22)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "You reel the line in and notice that the worm is gone.");
		}
		else if(fishchance == 23)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You have caught a Salmon. (5g)");
			PlayerInfo[playerid][pFishes] += 5;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else if(fishchance == 24)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "You reel the line in and notice that the worm is gone.");
		}
		else if(fishchance == 25)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You have caught an Angelfish. (1g)");
			PlayerInfo[playerid][pFishes] += 1;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else if(fishchance == 26)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You have caught a Salmon. (5g)");
			PlayerInfo[playerid][pFishes] += 5;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else if(fishchance == 27)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "You reel the line in and notice that the worm is gone.");
		}
		else if(fishchance == 28)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You have caught an Angelfish. (1g)");
			PlayerInfo[playerid][pFishes] += 1;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else if(fishchance == 29)
		{
			SendClientMessage(playerid, COLOR_GREEN, "You have caught a Lobster. (20g)");
			PlayerInfo[playerid][pFishes] += 20;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else if(fishchance == 30)
		{
			SendClientMessage(playerid, COLOR_GREEN, "You have caught a Shark! (100g)");
			PlayerInfo[playerid][pFishes] += 100;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		return 1;
	}

public timer(playerid)
{
    if(breakin[playerid] > 0)
    {
        new str[50];
        format(str, 50, "~w~SECONDS LEFT: ~g~%i", breakin[playerid]);
        GameTextForPlayer(playerid, str, 800, 3);
        breakin[playerid] = breakin[playerid] - 1;
   	    format(str, sizeof(str), "* %s is breaking into the vehicle.", GetName(playerid));
	    SetPlayerChatBubble(playerid, str, COLOR_PURPLE, 100.0, 10000);

    }
    else
    {
        new vehicleid;
        new id = GetVehicleID(vehicleid);
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			vehicleid = GetPlayerVehicleID(playerid);
		}
		else
		{
			vehicleid = GetClosestVehicle(playerid);
			if(!PlayerToVehicle(playerid, vehicleid, 5.0)) vehicleid = 0;
		}
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		doors = 0;
		breaking[playerid] = 0;
		VehicleLock[id] = 0;
		GameTextForPlayer(playerid, "~w~vehicle ~g~unlocked", 3000, 6);
		PlayerActionMessage(playerid, 20.0, "succesfully unlocks the vehicle with his toolkit.");
		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
		SaveVehicle(id);
		TogglePlayerControllable(playerid, 1);
		KillTimer(Timer[playerid]);
    }
    return 1;
}

public timer2(playerid)
{
    if(hotwire[playerid] > 0)
    {
        new str[50];
        format(str, 50, "~w~SECONDS LEFT: ~g~%i", hotwire[playerid]);
        GameTextForPlayer(playerid, str, 800, 3);
   	    format(str, sizeof(str), "* %s is hotwiring the vehicle.", GetName(playerid));
	    SetPlayerChatBubble(playerid, str, COLOR_PURPLE, 100.0, 10000);
        hotwire[playerid] = hotwire[playerid] - 1;

    }
    else
    {
 		new vehicleid = GetPlayerVehicleID(playerid);
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, COLOR_LIGHTRED, "You need to be inside a vehicle.");
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		PlayerActionMessage(playerid, 20.0, "succesfully hotwires the vehicle.");
		SetVehicleParamsEx(vehicleid, 1, 1, 0, doors, bonnet, boot, objective);
		TogglePlayerControllable(playerid, 1);
		KillTimer(Timer2[playerid]);
		hotwiring[playerid] = 0;
    }
    return 1;
}

public timerrob1(playerid)
{
    if(robbingstore1[playerid] > 0)
    {
        new str[50];
        format(str, 50, "~w~SECONDS LEFT: ~g~%i", robbingstore1[playerid]);
        GameTextForPlayer(playerid, str, 800, 3);
   	    format(str, sizeof(str), "* %s is emptying the cash register.", GetName(playerid));
	    SetPlayerChatBubble(playerid, str, COLOR_PURPLE, 100.0, 10000);
        robbingstore1[playerid] = robbingstore1[playerid] - 1;

    }
    else
    {
        new string[84];
		PlayerActionMessage(playerid, 20.0, "succesfully empties the cash register.");
		TogglePlayerControllable(playerid, 1);
		KillTimer(TimerRob1[playerid]);
		new
		robchance1 = 0 + random(2000);
		GivePlayerMoney(playerid, robchance1);
		format(string, sizeof(string), "You got $%d from the cash register.", robchance1);
		SendClientMessage(playerid, COLOR_WHITE, string);
		robbing[playerid] = false;
		DisablePlayerCheckpoint(playerid);
		RobstoreCP[playerid] = 0;
    }
    return 1;
}

public timerrob2(playerid)
{
    if(robbingstore2[playerid] > 0)
    {
        new str[50];
        format(str, 50, "~w~SECONDS LEFT: ~g~%i", robbingstore2[playerid]);
        GameTextForPlayer(playerid, str, 800, 3);
   	    format(str, sizeof(str), "* %s is emptying the cash register.", GetName(playerid));
	    SetPlayerChatBubble(playerid, str, COLOR_PURPLE, 100.0, 10000);
        robbingstore2[playerid] = robbingstore2[playerid] - 1;

    }
    else
    {
        new string[84];
		PlayerActionMessage(playerid, 20.0, "succesfully empties the cash register.");
		TogglePlayerControllable(playerid, 1);
		KillTimer(TimerRob2[playerid]);
		new
		robchance2 = 0 + random(2000);
		GivePlayerMoney(playerid, robchance2);
		format(string, sizeof(string), "You got $%d from the cash register.", robchance2);
		SendClientMessage(playerid, COLOR_WHITE, string);
		robbing[playerid] = false;
		DisablePlayerCheckpoint(playerid);
		RobstoreCP[playerid] = 0;
    }
    return 1;
}

public timerrob3(playerid)
{
	if(PlayerLogged[playerid] == true)
	{
	    if(robbingstore3[playerid] > 0)
	    {
	        new str[50];
	        format(str, 50, "~w~SECONDS LEFT: ~g~%i", robbingstore3[playerid]);
	        GameTextForPlayer(playerid, str, 800, 3);
	   	    format(str, sizeof(str), "* %s is emptying the cash register.", GetName(playerid));
		    SetPlayerChatBubble(playerid, str, COLOR_PURPLE, 100.0, 10000);
	        robbingstore3[playerid] = robbingstore3[playerid] - 1;

	    }
	    else
		{
		    new string[84];
			PlayerActionMessage(playerid, 20.0, "succesfully empties the cash register.");
			TogglePlayerControllable(playerid, 1);
			KillTimer(TimerRob3[playerid]);
			new
			robchance3 = 0 + random(2000);
			GivePlayerMoney(playerid, robchance3);
			format(string, sizeof(string), "You got $%d from the cash register.", robchance3);
			SendClientMessage(playerid, COLOR_WHITE, string);
			robbing[playerid] = false;
			DisablePlayerCheckpoint(playerid);
			RobstoreCP[playerid] = 0;
	    }
	    return 1;
	}
	return 1;
}

public RobbedStore1()
{
	StoresRobbed[0] = 0;
    return 1;
}

public RobbedStore2()
{
	StoresRobbed[1] = 0;
    return 1;
}

public RobbedStore3()
{
    StoresRobbed[2] = 0;
    return 1;
}
	
public Unfreeze(playerid) {

	TogglePlayerControllable(playerid, 1);
	DeletePVar(playerid, "Tazed");
	return ClearAnimations(playerid);
}

public UnloadTazer(playerid)
{
    TogglePlayerControllable(playerid, 1);
    GameTextForPlayer(playerid, "TAZER EFFECT GONE", 2000, 3);
    return 1;
}

public stopphone(playerid)
{
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
    return 1;
}

public startphone(playerid)
{
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
    return 1;
}

public paytime(playerid)
{
    new hh, mm, ss;
    gettime( hh, mm, ss );

    if( mm == 0 )
    {
	    for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i))
	    {
  			if(PlayerInfo[i][pWelfare] == 1)
			{
				new string[128];
				SCM(i, -1, "___________________[PAYDAY INFORMATION]___________________");
	  			format(string, sizeof(string), "Old bank balance: $%d", PlayerInfo[i][pBankAccount]);
	        	SCM(i, COLOR_WHITE, string);
	        	new taxes = 0 + random(10);
	        	new welfare = 50 + random(100);
	  			format(string, sizeof(string), "Government Taxes: $%d", taxes);
	        	SCM(i, COLOR_WHITE, string);
	  			format(string, sizeof(string), "Welfare bonus: $%d", welfare);
	        	SCM(i, COLOR_WHITE, string);
				new randcheck = 50 + random(150);
				PlayerInfo[i][pBankAccount] += randcheck;
				PlayerInfo[i][pBankAccount] -= taxes;
	  			format(string, sizeof(string), "New bank balance: $%d", PlayerInfo[i][pBankAccount]);
	        	SCM(i, COLOR_WHITE, string);

				format(string, sizeof(string), "~w~PayDay! ~n~~g~$%d", randcheck);
				GameTextForPlayer(i, string, 3000, 1);
				PlayerInfo[i][pPlayingHours] += 1;
			}
			else
			{
				new string[128];
				SCM(i, -1, "___________________[PAYDAY INFORMATION]___________________");
	  			format(string, sizeof(string), "Old bank balance: $%d", PlayerInfo[i][pBankAccount]);
	        	SCM(i, COLOR_WHITE, string);
	        	new taxes = 0 + random(10);
	  			format(string, sizeof(string), "Government Taxes: $%d", taxes);
	        	SCM(i, COLOR_WHITE, string);
				new randcheck = 100 + random(250);
				PlayerInfo[i][pBankAccount] += randcheck;
				PlayerInfo[i][pBankAccount] -= taxes;
	  			format(string, sizeof(string), "New bank balance: $%d", PlayerInfo[i][pBankAccount]);
	        	SCM(i, COLOR_WHITE, string);

				format(string, sizeof(string), "~w~PayDay! ~n~~g~$%d", randcheck);
				GameTextForPlayer(i, string, 3000, 1);
				PlayerInfo[i][pPlayingHours] += 1;
			}
	    }
	}
}

stock ApplyPlayerAnimation(playerid, const animlib[], const animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0)
{
    ApplyAnimation(playerid, animlib, "null", fDelta, loop, lockx, locky, freeze, time, forcesync); // Pre-load animation library
    return ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    if(!success) SendClientMessage(playerid, COLOR_LIGHTRED, "This command does not exist, /commands.");
    return 1;
}

public login_dialog(playerid)
{
    SetTimerEx("LoginTimer", 60000, false, "i", playerid);

	TextDrawShowForPlayer(playerid, Textdraw0);
   	TextDrawShowForPlayer(playerid, Textdraw1);
   	TextDrawShowForPlayer(playerid, Textdraw19);
	SetPlayerCameraPos(playerid, 1813.1046, -1449.2799, 107.7444);
	SetPlayerCameraLookAt(playerid, 1649.3676, -1306.5536, 132.4665);

	for( new i = 0; i <= 100; i ++ ) SCM(playerid, -1, "" );
 	if(fexist(UserPath(playerid)))
    {
        INI_ParseFile(UserPath(playerid), "LoadUser_%s", .bExtra = true, .extra = playerid);
        ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_INPUT, "Login", "Welcome back to San Jose Roleplay, please type in your password to log in.\nYou have 60 seconds to log in before you kicked.", "Login", "Quit");
    }
    else
    {
        ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT, "Register", "Welcome to San Jose Roleplay.\nTo register an account please type in your desired password below.", "Register", "Quit");
    }
    return 1;
}

public OnPlayerCheat(playerid, cheatid, source[])
{
    new elc_str[120], elc_reason[60], elc_name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, elc_name, sizeof(elc_name));
    format(elc_str, sizeof(elc_str), "( ! ) WARNING: %s has turned on possible cheats: ", elc_name);
    
	// Logging hacks
	new hackingstring[256];

	new Hour, Minute, Second;
	gettime(Hour, Minute, Second);

	format(hackingstring, sizeof(hackingstring), "[%d:%d%d] ( ! ) WARNING: %s has turned on possible cheats: ", Hour, Minute, Second, GetName(playerid), elc_name);
	HackingLog(hackingstring);
	// -------------------------------------------------------
    switch(cheatid)
    {
        case 1: format(elc_reason, sizeof(elc_reason), "Money Cheat ( %s $ )", source);
        case 2: format(elc_reason, sizeof(elc_reason), "Weapon Cheat ( %s )", source);
        case 3: format(elc_reason, sizeof(elc_reason), "Ammo Cheat ( %s bullets )", source);
        case 4: format(elc_reason, sizeof(elc_reason), "Ammo Block Cheat");
        case 5: format(elc_reason, sizeof(elc_reason), "Speed Cheat");
        case 6: format(elc_reason, sizeof(elc_reason), "Airbreak/Teleport Cheat");
        case 7: format(elc_reason, sizeof(elc_reason), "Health Cheat");
        case 8: format(elc_reason, sizeof(elc_reason), "Armour Cheat");
        case 9: format(elc_reason, sizeof(elc_reason), "Vehicle Spawn Cheat");
        case 10: format(elc_reason, sizeof(elc_reason), "Vehicle Crasher");
    }
    strcat(elc_str, elc_reason);
    ABroadCast(COLOR_LIGHTRED, elc_str, 1);
	return 1;
}

public KillLog(killstring[])
{
	new entry[256]; // This will add an entry to the logs.
	format(entry, sizeof(entry), "\n %s", killstring); // this will collect the string information
	
	new File:hFile; // Creates the file variable
	hFile = fopen("logs/kill.log", io_append); // what file to open
	fwrite(hFile, entry); // writes the string into the file.
	fclose(hFile); // closes the file
}

public PayLog(paystring[])
{
	new entry[256]; // This will add an entry to the logs.
	format(entry, sizeof(entry), "\n %s", paystring); // this will collect the string information

	new File:hFile; // Creates the file variable
	hFile = fopen("logs/pay.log", io_append); // what file to open
	fwrite(hFile, entry); // writes the string into the file.
	fclose(hFile); // closes the file
}

public GiveGunLog(givegunstring[])
{
	new entry[256]; // This will add an entry to the logs.
	format(entry, sizeof(entry), "\n %s", givegunstring); // this will collect the string information

	new File:hFile; // Creates the file variable
	hFile = fopen("logs/givegun.log", io_append); // what file to open
	fwrite(hFile, entry); // writes the string into the file.
	fclose(hFile); // closes the file
}

public aGiveGunLog(agivegunstring[])
{
	new entry[256]; // This will add an entry to the logs.
	format(entry, sizeof(entry), "\n %s", agivegunstring); // this will collect the string information

	new File:hFile; // Creates the file variable
	hFile = fopen("logs/admingivegun.log", io_append); // what file to open
	fwrite(hFile, entry); // writes the string into the file.
	fclose(hFile); // closes the file
}

public GiveMoneyLog(givemoneystring[])
{
	new entry[256]; // This will add an entry to the logs.
	format(entry, sizeof(entry), "\n %s", givemoneystring); // this will collect the string information

	new File:hFile; // Creates the file variable
	hFile = fopen("logs/admingivemoney.log", io_append); // what file to open
	fwrite(hFile, entry); // writes the string into the file.
	fclose(hFile); // closes the file
}

public SetMoneyLog(setmoneystring[])
{
	new entry[256]; // This will add an entry to the logs.
	format(entry, sizeof(entry), "\n %s", setmoneystring); // this will collect the string information

	new File:hFile; // Creates the file variable
	hFile = fopen("logs/adminsetmoney.log", io_append); // what file to open
	fwrite(hFile, entry); // writes the string into the file.
	fclose(hFile); // closes the file
}

public BanLog(banstring[])
{
	new entry[256]; // This will add an entry to the logs.
	format(entry, sizeof(entry), "\n %s", banstring); // this will collect the string information

	new File:hFile; // Creates the file variable
	hFile = fopen("logs/bans.log", io_append); // what file to open
	fwrite(hFile, entry); // writes the string into the file.
	fclose(hFile); // closes the file
}

public DropGunLog(dropgunstring[])
{
	new entry[256]; // This will add an entry to the logs.
	format(entry, sizeof(entry), "\n %s", dropgunstring); // this will collect the string information

	new File:hFile; // Creates the file variable
	hFile = fopen("logs/dropgun.log", io_append); // what file to open
	fwrite(hFile, entry); // writes the string into the file.
	fclose(hFile); // closes the file
}

public PickupGunLog(pickupgunstring[])
{
	new entry[256]; // This will add an entry to the logs.
	format(entry, sizeof(entry), "\n %s", pickupgunstring); // this will collect the string information

	new File:hFile; // Creates the file variable
	hFile = fopen("logs/pickupgun.log", io_append); // what file to open
	fwrite(hFile, entry); // writes the string into the file.
	fclose(hFile); // closes the file
}

public HackingLog(hackingstring[])
{
	new entry[256]; // This will add an entry to the logs.
	format(entry, sizeof(entry), "\n %s", hackingstring); // this will collect the string information

	new File:hFile; // Creates the file variable
	hFile = fopen("logs/hacking.log", io_append); // what file to open
	fwrite(hFile, entry); // writes the string into the file.
	fclose(hFile); // closes the file
}

public LoginTimer(playerid)
{
	if(PlayerLogged[playerid] == false)
	{
	    Kick(playerid);
	}
    return 1;
}

stock frename(oldname[], newname[]) {
    if (!fexist(oldname)) return false;
    fremove(newname);
    if (!fcopy(oldname, newname)) return false;
    fremove(oldname);
    return true;
}

stock fcopy(oldname[], newname[]) {
    new File:ohnd, File:nhnd;
    if (!fexist(oldname)) return false;
    ohnd=fopen(oldname, io_read);
    nhnd=fopen(newname, io_write);
    new buf2[1];
    new i;
    for (i=flength(ohnd);i>0;i--) {
        fputchar(nhnd, fgetchar(ohnd, buf2[0], false), false);
    }
    fclose(ohnd);
    fclose(nhnd);
    return true;
}

public ServerRestart(playerid)
{
	for(new i; i < MAX_OBJECTS; i++)
	{
	   if(IsValidObject(i)) DestroyObject(i);
	}
    SendRconCommand("gmx");
    return 1;
}

stock CreateDroppedGun(GunID, GunAmmo, Float:gPosX, Float:gPosY, Float:gPosZ, world, interior)
{
	new f = MAX_OBJ+1;
    for(new a = 0; a < MAX_OBJ; a++)
    {
        if(dGunData[a][ObjPos][0] == 0.0)
        {
            f = a;
            break;
        }
    }
    if(f > MAX_OBJ) return;
    dGunData[f][ObjData][0] = GunID;
	dGunData[f][ObjData][1] = GunAmmo;
	dGunData[f][ObjPos][0] = gPosX;
	dGunData[f][ObjPos][1] = gPosY;
	dGunData[f][ObjPos][2] = gPosZ;
	dGunData[f][ObjInt] = interior;
	dGunData[f][ObjWorld] = world;
	dGunData[f][ObjID] = CreateDynamicObject(GunObjects[GunID], dGunData[f][ObjPos][0], dGunData[f][ObjPos][1], dGunData[f][ObjPos][2]-1, 93.7, 120.0, 120.0, dGunData[f][ObjWorld], dGunData[f][ObjInt], -1, 200.0, 0.0);
	return;
}

stock split(const strsrc[], strdest[][], delimiter)
{ // Not mine :3
	new i, li;
	new aNum;
	new len;

	while(i <= strlen(strsrc))
	{
	    if(strsrc[i]==delimiter || i==strlen(strsrc))
		{
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid)
{
	if(Tazer[playerid] == 1 && GetPlayerWeapon(playerid) == TAZE_WEAPON)
	{
	    new Float:health, losehp;
    	GetPlayerHealth(damagedid, health);
    	losehp = TAZE_LOSEHP;
	    if(Tazed[damagedid] == 1) return 1;
	    new Float:x, Float:y, Float:z;
	    GetPlayerPos(damagedid, x, y, z);
	    ClearAnimations(damagedid);
	    ApplyAnimation(damagedid, "PED", "KO_skid_front", 4.1, 0, 1, 1, 1, 0);
	    Spark[damagedid] = CreateObject(TAZE_SPARK, x, y, z-3, 0, 0, 0);
	    SetTimerEx("DestroySpark", TAZE_DESTROY, 0, "i", damagedid);
	    SetTimerEx("TazedRemove", TAZE_TIMER, 0, "i", damagedid);
	    PlayerActionMessage(playerid, 20.0, "got tazed and fell to the ground.");
	    //TogglePlayerControllable(damagedid, 0);
	    Tazed[damagedid] = 1;
	    if(losehp) {} else SetPlayerHealth(damagedid, health+amount);
	}
	return 1;
}

stock p_name( playerid )
{
	new p_namev[MAX_PLAYER_NAME];
	GetPlayerName(playerid, p_namev, MAX_PLAYER_NAME);
	return p_namev;
}

public DestroySpark(playerid)
{
	DestroyObject(Spark[playerid]);
	return 1;
}

public TazedRemove(playerid)
{
	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid);
	Tazed[playerid] = 0;
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(MaskOn[i] == 1)
            {
                ShowPlayerNameTagForPlayer(playerid, i, 0);
            }
        }
    }
    return 1;
}

stock CreateRoadblock(Object, Float:x, Float:y, Float:z, Float:Angle)
{
    for(new i = 0; i < sizeof(Roadblocks); i++)
    {
    	if(Roadblocks[i][sCreated] == 0)
     	{
            Roadblocks[i][sCreated] = 1;
            Roadblocks[i][sX] = x;
            Roadblocks[i][sY] = y;
            Roadblocks[i][sZ] = z-0.7;
            Roadblocks[i][sObject] = CreateDynamicObject(Object, x, y, z-0.9, 0, 0, Angle);
            return 1;
		}
	}
	return 0;
}

public SafeSetPlayerPos(playerid, Float:x, Float:y, Float:z)
{
	SetPlayerPos(playerid, x, y, z);
 	return 1;
}

stock CreateSpike(Float:x, Float:y, Float:z, Float:Angle)
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
    {
    	if(SpikeInfo[i][sCreated] == 0)
     	{
            SpikeInfo[i][sCreated]=1;
            SpikeInfo[i][sX]=x;
            SpikeInfo[i][sY]=y;
            SpikeInfo[i][sZ]=z-0.7;
            SpikeInfo[i][sObject] = CreateObject(2899, x, y, z-0.9, 0, 0, Angle-90);
            return 1;
		}
	}
 	return 0;
}

public JailTimer()
{
	new string[128];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(PlayerInfo[i][pJailed] == 1)
	    {
	    	if(PlayerInfo[i][pInJailTime] != 0)
	    	{
				PlayerInfo[i][pInJailTime]--;
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~w~Time Left: ~g~%d seconds.", PlayerInfo[i][pInJailTime]);
   				GameTextForPlayer(i, string, 999, 3);
			}
			if(PlayerInfo[i][pInJailTime] == 0)
			{
			    PlayerInfo[i][pInJailTime] = 0;
				SendClientMessage(i, COLOR_SJPD, "[INFO:] You have served your sentence, you are now free to go.");
	  			SetPlayerPos(i, 1555.3206, -1675.6517, 16.1953);
				SetPlayerVirtualWorld(i, 0);
				SetPlayerInterior(i, 0);
				PlayerInfo[i][pJailed] = 0;
			}
		}
	}
	return 1;
}

public DMVTimer()
{
	new string[128];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(LeftDMVCar[i] == 1)
	    {
		    if(DMVtimer1[i] != 0)
 		   {
				DMVtimer1[i]--;
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~w~Time Left: ~g~%d seconds.", DMVtimer1[i]);
			   	GameTextForPlayer(i, string, 999, 3);
			}
			if(DMVtimer1[i] == 0)
			{
				SetVehicleToRespawn(dmvcar[i]);
				DisablePlayerCheckpoint(i);
			    DMVtimer1[i] = 0;
				SendClientMessage(i, COLOR_LIGHTRED, "[INFO:] You did not return to your DMV vehicle in time. You'll have to do the test again.");
				LeftDMVCar[i] = 0;
				TakingDriverLicense[i] = false;
			}
		}
	}
	return 1;
}

public BUSTimer()
{
	new string[128];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(LeftBus[i] == 1)
	    {
		    if(BUSTimer1[i] != 0)
 		   {
				BUSTimer1[i]--;
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~w~Time Left: ~g~%d seconds.", BUSTimer1[i]);
			   	GameTextForPlayer(i, string, 999, 3);
			}
			if(BUSTimer1[i] == 0)
			{
				SetVehicleToRespawn(westbus);
				DisablePlayerCheckpoint(i);
			    BUSTimer1[i] = 0;
				SendClientMessage(i, COLOR_LIGHTRED, "[INFO:] You did not return to your bus in time. Your bus has been respawned.");
				LeftBus[i] = 0;
			}
		}
	}
	return 1;
}

public PizzaTimer()
{
	new string[128];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(LeftPizzaBoy[i] == 1)
	    {
		    if(PizzaTimer1[i] != 0)
 		   {
				PizzaTimer1[i]--;
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~w~Time Left: ~g~%d seconds.", PizzaTimer1[i]);
			   	GameTextForPlayer(i, string, 999, 3);
			}
			if(PizzaTimer1[i] == 0)
			{
				SetVehicleToRespawn(pizzaboy[i]);
				DisablePlayerCheckpoint(i);
			    PizzaTimer1[i] = 0;
				SendClientMessage(i, COLOR_LIGHTRED, "[INFO:] You did not return to your PizzaBoy in time. Your PizzaBoy has been respawned.");
				LeftPizzaBoy[i] = 0;
			}
		}
	}
	return 1;
}

public GlobalSavery()
{
	for(new ipp = 1; ipp < sizeof(PlayerInfo); ipp++)
 	{
 		if(PlayerLogged[ipp] == true)
		{
			new INI:File = INI_Open(UserPath(ipp));
		    INI_SetTag(File, "data");
			INI_WriteInt(File, "Cash", GetPlayerMoney(ipp));
			INI_WriteInt(File, "Admin", PlayerInfo[ipp][pAdmin]);
			INI_WriteInt(File, "Kills", PlayerInfo[ipp][pKills]);
			INI_WriteInt(File, "Deaths", PlayerInfo[ipp][pDeaths]);
			INI_WriteInt(File, "LSD", PlayerInfo[ipp][dLSD]);
			INI_WriteInt(File, "BizID", PlayerInfo[ipp][BizID]);
			INI_WriteInt(File, "Cocaine", PlayerInfo[ipp][dCocaine]);
			INI_WriteInt(File, "Marijuana", PlayerInfo[ipp][dMarijuana]);
			INI_WriteInt(File, "Meth", PlayerInfo[ipp][dMeth]);
			INI_WriteInt(File, "Ecstasy", PlayerInfo[ipp][dEcstasy]);
			INI_WriteInt(File, "Seeds", PlayerInfo[ipp][dSeeds]);
			INI_WriteInt(File, "Respect", PlayerInfo[ipp][pRespect]);
			INI_WriteInt(File, "Cigarettes", PlayerInfo[ipp][pCigarettes]);
			INI_WriteInt(File, "Beer", PlayerInfo[ipp][pBeer]);
			INI_WriteInt(File, "BankAccount", PlayerInfo[ipp][pBankAccount]);
			INI_WriteInt(File, "Datasaved", PlayerInfo[ipp][pAccountdata]);
			INI_WriteInt(File, "Number", PlayerInfo[ipp][pNumber]);
			INI_WriteInt(File, "Skin", PlayerInfo[ipp][pSkin]);
			INI_WriteInt(File, "Level", PlayerInfo[ipp][pLevel]);
			INI_WriteInt(File, "Weapon1", PlayerInfo[ipp][pWeapon1]);
			INI_WriteInt(File, "Weapon2", PlayerInfo[ipp][pWeapon2]);
			INI_WriteInt(File, "Weapon3", PlayerInfo[ipp][pWeapon3]);
			INI_WriteInt(File, "Weapon4", PlayerInfo[ipp][pWeapon4]);
			INI_WriteInt(File, "Weapon5", PlayerInfo[ipp][pWeapon5]);
			INI_WriteInt(File, "Weapon6", PlayerInfo[ipp][pWeapon6]);
			INI_WriteInt(File, "Weapon7", PlayerInfo[ipp][pWeapon7]);
			INI_WriteInt(File, "Weapon8", PlayerInfo[ipp][pWeapon8]);
			INI_WriteInt(File, "Weapon9", PlayerInfo[ipp][pWeapon9]);
			INI_WriteInt(File, "Weapon10", PlayerInfo[ipp][pWeapon10]);
			INI_WriteInt(File, "Weapon11", PlayerInfo[ipp][pWeapon11]);
			INI_WriteInt(File, "Weapon12", PlayerInfo[ipp][pWeapon12]);
			INI_WriteInt(File, "Weapon13", PlayerInfo[ipp][pWeapon13]);
			INI_WriteInt(File, "Weapon14", PlayerInfo[ipp][pWeapon14]);
			INI_WriteInt(File, "Ammo1", PlayerInfo[ipp][pAmmo1]);
			INI_WriteInt(File, "Ammo2", PlayerInfo[ipp][pAmmo2]);
			INI_WriteInt(File, "Ammo3", PlayerInfo[ipp][pAmmo3]);
			INI_WriteInt(File, "Ammo4", PlayerInfo[ipp][pAmmo4]);
			INI_WriteInt(File, "Ammo5", PlayerInfo[ipp][pAmmo5]);
			INI_WriteInt(File, "Ammo6", PlayerInfo[ipp][pAmmo6]);
			INI_WriteInt(File, "Ammo7", PlayerInfo[ipp][pAmmo7]);
			INI_WriteInt(File, "Ammo8", PlayerInfo[ipp][pAmmo8]);
			INI_WriteInt(File, "Ammo9", PlayerInfo[ipp][pAmmo9]);
			INI_WriteInt(File, "Ammo10", PlayerInfo[ipp][pAmmo10]);
			INI_WriteInt(File, "Ammo11", PlayerInfo[ipp][pAmmo11]);
			INI_WriteInt(File, "Ammo12", PlayerInfo[ipp][pAmmo12]);
			INI_WriteInt(File, "Ammo13", PlayerInfo[ipp][pAmmo13]);
			INI_WriteInt(File, "Ammo14", PlayerInfo[ipp][pAmmo14]);
			INI_WriteInt(File, "BusinessMoney", PlayerInfo[ipp][BusinessMoney]);
			INI_WriteFloat(File, "Health", PlayerInfo[ipp][pHealth]);
			INI_WriteInt(File, "DriverLicense", PlayerInfo[ipp][pDriverLicense]);
			INI_WriteInt(File, "Age", PlayerInfo[ipp][pAge]);
			INI_WriteInt(File, "Gender", PlayerInfo[ipp][pGender]);
			INI_WriteInt(File, "InJail", PlayerInfo[ipp][pInJail]);
			INI_WriteInt(File, "InJailTime", PlayerInfo[ipp][pInJailTime]);
			INI_WriteInt(File, "HouseID", PlayerInfo[ipp][HouseID]);
			INI_WriteInt(File, "Mask", PlayerInfo[ipp][pMask]);
			INI_WriteInt(File, "FightingStyle", PlayerInfo[ipp][pFightingStyle]);
			INI_WriteInt(File, "Boombox", PlayerInfo[ipp][pBoombox]);
			INI_WriteInt(File, "Experience", PlayerInfo[ipp][pExperience]);
			INI_WriteInt(File, "Crashed", PlayerInfo[ipp][pCrashed]);
			INI_WriteFloat(File, "CrashX", PlayerInfo[ipp][pCrashX]);
			INI_WriteFloat(File, "CrashY", PlayerInfo[ipp][pCrashY]);
			INI_WriteFloat(File, "CrashZ", PlayerInfo[ipp][pCrashZ]);
			INI_WriteInt(File, "CrashInt", PlayerInfo[ipp][pCrashInt]);
			INI_WriteInt(File, "CrashWorld", PlayerInfo[ipp][pCrashWorld]);
			INI_WriteInt(File, "PlayerOwnsHouse", PlayerInfo[ipp][pPlayerOwnsHouse]);
			INI_WriteInt(File, "WepLicense", PlayerInfo[ipp][pWepLicense]);
			INI_WriteInt(File, "Phone", PlayerInfo[ipp][pPhone]);
			INI_WriteInt(File, "Faction", PlayerInfo[ipp][pFaction]);
			INI_WriteInt(File, "Rank", PlayerInfo[ipp][fRank]);
			INI_WriteInt(File, "Fishes", PlayerInfo[ipp][pFishes]);
			INI_WriteInt(File, "FishingRod", PlayerInfo[ipp][pFishingRod]);
			INI_WriteInt(File, "Worms", PlayerInfo[ipp][pWorms]);
			INI_WriteInt(File, "PlayingHours", PlayerInfo[ipp][pPlayingHours]);
			INI_WriteInt(File, "Job", PlayerInfo[ipp][pJob]);
			INI_WriteInt(File, "Banned", PlayerInfo[ipp][pBanned]);
			INI_WriteInt(File, "TutorialDone", PlayerInfo[ipp][pTutorialDone]);
			INI_WriteInt(File, "GunRights", PlayerInfo[ipp][pGunRights]);
			INI_WriteString(File, "Note1", PlayerInfo[ipp][pNote1]);
			INI_WriteString(File, "Note2", PlayerInfo[ipp][pNote2]);
			INI_WriteString(File, "Note3", PlayerInfo[ipp][pNote3]);
			INI_WriteString(File, "Note4", PlayerInfo[ipp][pNote4]);
			INI_WriteString(File, "BannedIP", PlayerInfo[ipp][BannedIP]);
			INI_WriteInt(File, "Seeds", PlayerInfo[ipp][pSeeds]);
			INI_WriteInt(File, "Caller", PlayerInfo[ipp][pCaller]);
			INI_WriteInt(File, "Number", PlayerInfo[ipp][pNumber]);
			INI_WriteInt(File, "Year", PlayerInfo[ipp][pYear]);
			INI_WriteInt(File, "Month", PlayerInfo[ipp][pMonth]);
			INI_WriteInt(File, "Day", PlayerInfo[ipp][pDay]);
			INI_WriteInt(File, "Donator", PlayerInfo[ipp][pDonator]);
			INI_WriteInt(File, "BlockPM", PlayerInfo[ipp][pBlockPM]);
			INI_WriteString(File, "ForumName", PlayerInfo[ipp][pForumName]);
			INI_WriteInt(File, "Fname", PlayerInfo[ipp][pFname]);
			INI_WriteInt(File, "Jailed", PlayerInfo[ipp][pJailed]);
			INI_WriteInt(File, "Heroin", PlayerInfo[ipp][dHeroin]);
			INI_WriteInt(File, "Crack", PlayerInfo[ipp][dCrack]);
			INI_WriteString(File, "ActiveOffense", PlayerInfo[ipp][pActiveOffense]);
			INI_WriteInt(File, "ActiveOffenses", PlayerInfo[ipp][pActiveOffenses]);
			INI_WriteInt(File, "UnActiveOffenses", PlayerInfo[ipp][pUnActiveOffenses]);
			INI_WriteInt(File, "Plate1", PlayerInfo[ipp][pPlate1]);
			INI_WriteInt(File, "Plate2", PlayerInfo[ipp][pPlate2]);
			INI_WriteInt(File, "Plate3", PlayerInfo[ipp][pPlate3]);
			INI_WriteString(File, "Name", PlayerInfo[ipp][pName]);
			INI_WriteString(File, "TicketReason1", PlayerInfo[ipp][pTicketReason1]);
			INI_WriteString(File, "TicketReason2", PlayerInfo[ipp][pTicketReason2]);
			INI_WriteInt(File, "Ticket1", PlayerInfo[ipp][pTicket1]);
			INI_WriteInt(File, "Ticket2", PlayerInfo[ipp][pTicket2]);
			INI_WriteInt(File, "TicketPrice1", PlayerInfo[ipp][pTicketPrice1]);
			INI_WriteInt(File, "TicketPrice2", PlayerInfo[ipp][pTicketPrice2]);
			INI_WriteInt(File, "Welfare", PlayerInfo[ipp][pWelfare]);
			INI_WriteInt(File, "Walkstyle", PlayerInfo[ipp][pWalkStyle]);
			INI_Close(File);
	  	}
	}
	for(new id = 1; id < sizeof(BusinessInfo); id++)
    {
        new file4[40];
	    format(file4, sizeof(file4), BPATH, id);
	    new INI:File = INI_Open(file4);
	    INI_SetTag(File, "data");
	    INI_WriteInt(File, "bOwned", BusinessInfo[id][bOwned]);
	    INI_WriteInt(File, "bPrice", BusinessInfo[id][bPrice]);
	    INI_WriteString(File, "bOwner", BusinessInfo[id][bOwner]);
	    INI_WriteInt(File, "bType", BusinessInfo[id][bType]);
	    INI_WriteInt(File, "bLocked", BusinessInfo[id][bLocked]);
	    INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
	    INI_WriteFloat(File, "bEntranceX", BusinessInfo[id][bEntranceX]);
	    INI_WriteFloat(File, "bEntranceY", BusinessInfo[id][bEntranceY]);
	    INI_WriteFloat(File, "bEntranceZ", BusinessInfo[id][bEntranceZ]);
	    INI_WriteFloat(File, "bEntranceA", BusinessInfo[id][bEntranceA]);
	    INI_WriteFloat(File, "bExitX", BusinessInfo[id][bExitX]);
	    INI_WriteFloat(File, "bExitY", BusinessInfo[id][bExitY]);
	    INI_WriteFloat(File, "bExitZ", BusinessInfo[id][bExitZ]);
	    INI_WriteFloat(File, "bExitA", BusinessInfo[id][bExitA]);
	    INI_WriteInt(File, "bInt", BusinessInfo[id][bInt]);
	    INI_WriteInt(File, "bWorld", BusinessInfo[id][bWorld]);
	    INI_WriteInt(File, "bInsideInt", BusinessInfo[id][bInsideInt]);
	    INI_WriteInt(File, "bInsideWorld", BusinessInfo[id][bInsideWorld]);
	    INI_WriteString(File, "bName", BusinessInfo[id][bName]);
	    INI_Close(File);
    }
    for(new id = 1; id < sizeof(BusinessInfo); id++)
    {
        new file4[40];
	    format(file4, sizeof(file4), BPATH, id);
	    new INI:File = INI_Open(file4);
	    INI_SetTag(File, "data");
	    INI_WriteInt(File, "bOwned", BusinessInfo[id][bOwned]);
	    INI_WriteInt(File, "bPrice", BusinessInfo[id][bPrice]);
	    INI_WriteString(File, "bOwner", BusinessInfo[id][bOwner]);
	    INI_WriteInt(File, "bType", BusinessInfo[id][bType]);
	    INI_WriteInt(File, "bLocked", BusinessInfo[id][bLocked]);
	    INI_WriteInt(File, "bMoney", BusinessInfo[id][bMoney]);
	    INI_WriteFloat(File, "bEntranceX", BusinessInfo[id][bEntranceX]);
	    INI_WriteFloat(File, "bEntranceY", BusinessInfo[id][bEntranceY]);
	    INI_WriteFloat(File, "bEntranceZ", BusinessInfo[id][bEntranceZ]);
	    INI_WriteFloat(File, "bEntranceA", BusinessInfo[id][bEntranceA]);
	    INI_WriteFloat(File, "bExitX", BusinessInfo[id][bExitX]);
	    INI_WriteFloat(File, "bExitY", BusinessInfo[id][bExitY]);
	    INI_WriteFloat(File, "bExitZ", BusinessInfo[id][bExitZ]);
	    INI_WriteFloat(File, "bExitA", BusinessInfo[id][bExitA]);
	    INI_WriteInt(File, "bInt", BusinessInfo[id][bInt]);
	    INI_WriteInt(File, "bWorld", BusinessInfo[id][bWorld]);
	    INI_WriteInt(File, "bInsideInt", BusinessInfo[id][bInsideInt]);
	    INI_WriteInt(File, "bInsideWorld", BusinessInfo[id][bInsideWorld]);
	    INI_WriteString(File, "bName", BusinessInfo[id][bName]);
	    INI_Close(File);
    }

    for(new idz = 1; idz < sizeof(HouseInfo); idz++)
    {
        new file4[40];
	    format(file4, sizeof(file4), HPATH, idz);
	    new INI:File = INI_Open(file4);
	    INI_SetTag(File, "data");
	    INI_WriteInt(File, "hOwned", HouseInfo[idz][hOwned]);
	    INI_WriteInt(File, "hPrice", HouseInfo[idz][hPrice]);
	    INI_WriteString(File, "hOwner", HouseInfo[idz][hOwner]);
	    INI_WriteInt(File, "hLocked", HouseInfo[idz][hLocked]);
	    INI_WriteInt(File, "hMoney", HouseInfo[idz][hMoney]);
	    INI_WriteFloat(File, "hEntranceX", HouseInfo[idz][hEntranceX]);
	    INI_WriteFloat(File, "hEntranceY", HouseInfo[idz][hEntranceY]);
	    INI_WriteFloat(File, "hEntranceZ", HouseInfo[idz][hEntranceZ]);
	    INI_WriteFloat(File, "hEntranceA", HouseInfo[idz][hEntranceA]);
	    INI_WriteFloat(File, "hExitX", HouseInfo[idz][hExitX]);
	    INI_WriteFloat(File, "hExitY", HouseInfo[idz][hExitY]);
	    INI_WriteFloat(File, "hExitZ", HouseInfo[idz][hExitZ]);
	    INI_WriteFloat(File, "hExitA", HouseInfo[idz][hExitA]);
	    INI_WriteInt(File, "hInt", HouseInfo[idz][hInt]);
	    INI_WriteInt(File, "hWorld", HouseInfo[idz][hWorld]);
	    INI_WriteInt(File, "hInsideInt", HouseInfo[idz][hInsideInt]);
	    INI_WriteInt(File, "hInsideWorld", HouseInfo[idz][hInsideWorld]);
	    INI_WriteInt(File, "hWeapon1", HouseInfo[idz][hWeapon1]);
	    INI_WriteInt(File, "hWeapon2", HouseInfo[idz][hWeapon2]);
	    INI_WriteInt(File, "hWeapon3", HouseInfo[idz][hWeapon3]);
	    INI_WriteInt(File, "hWeapon4", HouseInfo[idz][hWeapon4]);
	    INI_WriteInt(File, "hWeapon5", HouseInfo[idz][hWeapon5]);
	    INI_WriteInt(File, "hWeapon6", HouseInfo[idz][hWeapon6]);
	    INI_WriteInt(File, "hWeapon7", HouseInfo[idz][hWeapon7]);
	    INI_WriteInt(File, "hWeapon8", HouseInfo[idz][hWeapon8]);
	    INI_WriteInt(File, "hWeapon9", HouseInfo[idz][hWeapon9]);
	    INI_WriteInt(File, "hWeapon10", HouseInfo[idz][hWeapon10]);
	    INI_WriteInt(File, "hAmmo1", HouseInfo[idz][hAmmo1]);
	    INI_WriteInt(File, "hAmmo2", HouseInfo[idz][hAmmo2]);
	    INI_WriteInt(File, "hAmmo3", HouseInfo[idz][hAmmo3]);
	    INI_WriteInt(File, "hAmmo4", HouseInfo[idz][hAmmo4]);
	    INI_WriteInt(File, "hAmmo5", HouseInfo[idz][hAmmo5]);
	    INI_WriteInt(File, "hAmmo6", HouseInfo[idz][hAmmo6]);
	    INI_WriteInt(File, "hAmmo7", HouseInfo[idz][hAmmo7]);
	    INI_WriteInt(File, "hAmmo8", HouseInfo[idz][hAmmo8]);
	    INI_WriteInt(File, "hAmmo9", HouseInfo[idz][hAmmo9]);
	    INI_WriteInt(File, "hAmmo10", HouseInfo[idz][hAmmo10]);
	    INI_WriteInt(File, "hOutsideInt", HouseInfo[idz][hOutsideInt]);
	    INI_WriteInt(File, "hOutsideWorld", HouseInfo[idz][hOutsideWorld]);
	    INI_WriteInt(File, "hLSD", HouseInfo[idz][hLSD]);
	    INI_WriteInt(File, "hCocaine", HouseInfo[idz][hCocaine]);
	    INI_WriteInt(File, "hMarijuana", HouseInfo[idz][hMarijuana]);
	    INI_WriteInt(File, "hMeth", HouseInfo[idz][hMeth]);
	    INI_WriteInt(File, "hEcstasy", HouseInfo[idz][hEcstasy]);
	    INI_WriteInt(File, "hHouseCP", HouseInfo[idz][HouseCP]);
	    INI_Close(File);
    }
    
    for(new idv = 1; idv < sizeof(FactionInfo); idv++)
    {
        new file4[40];
	    format(file4, sizeof(file4), FPATH, idv);
	    new INI:File = INI_Open(file4);
	    INI_SetTag(File, "data");
	    INI_WriteInt(File, "Members", FactionInfo[idv][fMembers]);
	    INI_WriteInt(File, "ID", FactionInfo[idv][fID]);
	    INI_WriteString(File, "Name", FactionInfo[idv][fName]);
	    INI_WriteString(File, "Leader", FactionInfo[idv][fLeader]);
	    INI_WriteString(File, "Information", FactionInfo[idv][fInformation]);
	    INI_WriteString(File, "Rank1", FactionInfo[idv][fRank1]);
	    INI_WriteString(File, "Rank2", FactionInfo[idv][fRank2]);
	    INI_WriteString(File, "Rank3", FactionInfo[idv][fRank3]);
	    INI_WriteString(File, "Rank4", FactionInfo[idv][fRank4]);
	    INI_WriteInt(File, "Type", FactionInfo[idv][fType]);
	    INI_Close(File);
    }
	return 1;
}

stock GetDistanceBetweenPlayers(playerid, playerid2)
{
    new Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2;
    new Float:tmpdis;
    GetPlayerPos(playerid, x1, y1, z1);
    GetPlayerPos(playerid2, x2, y2, z2);
    tmpdis = floatsqroot(floatpower(floatabs(floatsub(x2, x1)), 2) + floatpower(floatabs(floatsub(y2, y1)), 2) + floatpower(floatabs(floatsub(z2, z1)), 2));
    return floatround(tmpdis);
}

stock SetVehicleInterior(vehicleid, interior)
{
   return LinkVehicleToInterior(vehicleid, interior);
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)//This is called when a player's interior is changed.
{
	if(IsBeingSpeced[playerid] == 1)//If the player being spectated, changes an interior, then update the interior and virtualword for the spectator.
	{
	    foreach(new i : Player)
	    {
	    	if(spectatorid[i] == playerid)
			{
				SetPlayerInterior(i, GetPlayerInterior(playerid));
				SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
			}
		}
	}
	return 1;
}

public StopBus(playerid)
{
	busstop[playerid] = 0;
    return 1;
}
			
public EngineOn(playerid)
{
	new string[128];
	new id = GetVehicleID(GetPlayerVehicleID(playerid));
 	new vehicleid = GetPlayerVehicleID(playerid);
 	
	format(string, sizeof(string), "* %s turns the engine on.", GetName(playerid));
	ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	ToggleAlarm(vehicleid, VEHICLE_PARAMS_OFF);
	SetVehicleParamsEx(vehicleid, 1, 1, 0, doors, bonnet, boot, 0);
	VehicleSecurity[vehicleid] = 0;
	VehicleAlarm[id] = 0;
    return 1;
}
